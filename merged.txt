// =============================================
// Merged JS File
// This file is automatically generated by merge_js_files.py
// Do not edit this file directly. Update source files instead.
// This file merges the following JavaScript files:
// - App.js
// - App.test.js
// - components\Admin\AdminDashboard.js
// - components\Auth\AuthContext.js
// - components\Auth\Login.js
// - components\Auth\Logout.js
// - components\Auth\Register.js
// - components\Collection.js
// - components\CreateData.js
// - components\DeleteData.js
// - components\DesktopImageViewer.js
// - components\DesktopObjectDetails.js
// - components\Header.js
// - components\Home.js
// - components\MobileImageViewer.js
// - components\MobileObjectDetails.js
// - components\ObjectDetail.js
// - components\ProtectedRoute.js
// - components\ReadData.js
// - components\RecordManager.js
// - components\ResultsPage.js
// - components\SearchBox.js
// - components\SearchPage.js
// - components\UpdateData.js
// - components\constants.js
// - components\exportRecordsToCSV.js
// - firebase.js
// - hooks\useDeviceType.js
// - index.js
// - reportWebVitals.js
// - setupTests.js
// - utils\fetchData.js
// - utils\urlParser.js
// =============================================



// ---------------------------------------------
// BEGIN: App.js
// ---------------------------------------------

import React from "react";
import "./App.css";
import { Routes, Route } from "react-router-dom";
import Header from "./components/Header"; // Import Header Component
import Login from "./components/Auth/Login"; // Import Login Component
import Register from "./components/Auth/Register"; // Import Register Component
import Logout from "./components/Auth/Logout"; // Import Logout Component
import ProtectedRoute from "./components/ProtectedRoute"; // Import ProtectedRoute
import Home from "./components/Home"; // Import Home Component
import RecordManager from "./components/RecordManager"; // Import RecordManager
import SearchPage from "./components/SearchPage"; // Import SearchPage Component
import Collection from "./components/Collection"; // Import Collection Component
import ObjectDetail from "./components/ObjectDetail"; // Import ObjectDetail Component
import CreatePage from "./components/CreateData"; // Import the CreatePage component
import ResultsPage from "./components/ResultsPage"; // Import ResultsPage Component
import AdminDashboard from './components/Admin/AdminDashboard'; // Import Admin Dashboard

function App() {
  return (
    <div className="App">
      <Header />
      <main>
        <Routes>
          {/* Landing page */}
          <Route path="/" element={<Home />} />

          {/* Public routes */}
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />

          {/* Search page */}
          <Route path="/search" element={<SearchPage />} />

          {/* Results page */}
          <Route path="/results" element={<ResultsPage />} />

          <Route path="/object/:objectId" element={<ObjectDetail />} />

          {/* Collection page */}
          <Route path="/collection" element={<Collection />} />

          {/* Object detail page */}
          <Route path="/object/:objectId" element={<ObjectDetail />} />

          {/* Protected routes */}
          <Route
            path="/records"
            element={
              <ProtectedRoute>
                <RecordManager />
              </ProtectedRoute>
            }
          />
          <Route
            path="/create"
            element={
              <ProtectedRoute>
                <CreatePage />
              </ProtectedRoute>
            }
          />
          <Route
            path="/logout"
            element={
              <ProtectedRoute>
                <Logout />
              </ProtectedRoute>
            }
          />
          <Route
            path="/admin"
            element={
              <ProtectedRoute>
                <AdminDashboard />
              </ProtectedRoute>
            }
          />
        </Routes>
      </main>
    </div>
  );
}

export default App;


// ---------------------------------------------
// END: App.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: App.test.js
// ---------------------------------------------

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


// ---------------------------------------------
// END: App.test.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Admin\AdminDashboard.js
// ---------------------------------------------

import React, { useState, useEffect } from "react";
import { ref, get, remove, set } from "firebase/database";
import { createUserWithEmailAndPassword } from "firebase/auth";
import { db, auth } from "../../firebase";

const AdminDashboard = () => {
  const [pendingRequests, setPendingRequests] = useState([]);
  const [loading, setLoading] = useState(true);

  // Fetch pending requests from Firebase
  useEffect(() => {
    const fetchPendingRequests = async () => {
      try {
        const pendingRef = ref(db, "pendingRequests");
        const snapshot = await get(pendingRef);

        if (snapshot.exists()) {
          const requests = snapshot.val();
          const formattedRequests = Object.keys(requests).map((key) => ({
            id: key,
            ...requests[key],
          }));
          setPendingRequests(formattedRequests);
        } else {
          setPendingRequests([]);
        }
      } catch (error) {
        console.error("Error fetching pending requests:", error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchPendingRequests();
  }, []);

  // Approve a user
  const approveUser = async (email) => {
    try {
      const defaultPassword = "defaultPassword123";
  
      console.log(`Approving user: ${email}`);
      // Create user in Firebase Authentication without logging in as the new user
      const userCredential = await auth.createUser({
        email: email,
        password: defaultPassword,
      });
  
      console.log(`User created: ${userCredential.uid}`);
  
      // Add the user to the whitelistedEmails node
      const whitelistRef = ref(db, `whitelistedEmails/${btoa(email)}`);
      await set(whitelistRef, true);
  
      // Remove the user from pendingRequests
      const pendingRef = ref(db, `pendingRequests/${btoa(email)}`);
      await remove(pendingRef);
      console.log(`Removed ${email} from pending requests.`);
  
      alert(`User ${email} has been approved and added to the system.`);
      // Refresh pending requests list
      setPendingRequests((prev) => prev.filter((request) => request.email !== email));
    } catch (error) {
      console.error("Error approving user:", error.message);
      alert(`Error approving user: ${error.message}`);
    }
  };

  // Reject a user
  const rejectUser = async (email) => {
    try {
      // Remove the user from pendingRequests
      const pendingRef = ref(db, `pendingRequests/${btoa(email)}`);
      await remove(pendingRef);

      alert(`User ${email} has been rejected.`);
      // Refresh pending requests list
      setPendingRequests((prev) => prev.filter((request) => request.email !== email));
    } catch (error) {
      console.error("Error rejecting user:", error.message);
      alert(`Error rejecting user: ${error.message}`);
    }
  };

  if (loading) {
    return <p>Loading pending requests...</p>;
  }

  return (
    <div className="admin-dashboard">
      <h1 className="text-2xl font-bold mb-4">Admin Dashboard</h1>
      {pendingRequests.length === 0 ? (
        <p>No pending requests.</p>
      ) : (
        <table className="min-w-full bg-white border border-gray-300">
          <thead>
            <tr>
              <th className="px-4 py-2 border-b">Email</th>
              <th className="px-4 py-2 border-b">Requested At</th>
              <th className="px-4 py-2 border-b">Actions</th>
            </tr>
          </thead>
          <tbody>
            {pendingRequests.map((request) => (
              <tr key={request.id}>
                <td className="px-4 py-2 border-b">{request.email}</td>
                <td className="px-4 py-2 border-b">
                  {new Date(request.requestedAt).toLocaleString()}
                </td>
                <td className="px-4 py-2 border-b">
                  <button
                    className="bg-green-500 text-white px-3 py-1 rounded mr-2"
                    onClick={() => approveUser(request.email)}
                  >
                    Approve
                  </button>
                  <button
                    className="bg-red-500 text-white px-3 py-1 rounded"
                    onClick={() => rejectUser(request.email)}
                  >
                    Reject
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default AdminDashboard;


// ---------------------------------------------
// END: components\Admin\AdminDashboard.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Auth\AuthContext.js
// ---------------------------------------------

import React, { createContext, useContext, useEffect, useState } from "react";
import { onAuthStateChanged, getAuth, signOut } from "firebase/auth";
import { ref, get } from "firebase/database";
import { db } from "../../firebase"; // Adjust the path to your firebase.js

// Create the AuthContext
const AuthContext = createContext();

// Retry utility
const retry = async (fn, retries = 3, delay = 1000) => {
  for (let i = 0; i < retries; i++) {
    try {
      return await fn();
    } catch (error) {
      console.warn(`Retry ${i + 1} failed: ${error.message}`);
      if (i === retries - 1) throw error; // If it's the last retry, rethrow
      await new Promise((resolve) => setTimeout(resolve, delay)); // Wait before retrying
    }
  }
};

// AuthProvider component to wrap the app
export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [emailVerified, setEmailVerified] = useState(false);
  const [userType, setUserType] = useState("regular");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const auth = getAuth();

    // Subscribe to auth state changes
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        console.log(`User signed in: ${user.email}`);
        setEmailVerified(user.emailVerified);

        try {
          // Log Base64-encoded email
          const base64Email = btoa(user.email);
          console.log(`Base64-encoded email: ${base64Email}`);

          // Check if the user's email exists in the whitelist with retry and delay
          const whitelistRef = ref(db, `whitelistedEmails/${base64Email}`);
          let whitelistSnapshot;
          let retries = 0;
          const maxRetries = 3;
          const delay = 1000; // 1 second delay

          while (retries < maxRetries) {
            try {
              whitelistSnapshot = await get(whitelistRef);
              if (whitelistSnapshot.exists()) break;
            } catch (error) {
              console.warn(`Retry ${retries + 1} failed: ${error.message}`);
            }
            await new Promise((resolve) => setTimeout(resolve, delay));
            retries++;
          }

          if (!whitelistSnapshot.exists()) {
            console.warn(`User ${user.email} is not whitelisted. Signing out.`);
            alert("Your email is not whitelisted. Please contact the administrator.");

            // Check if the current user is an admin before logging out
            const userRef = ref(db, `users/${user.uid}/userType`);
            const userTypeSnapshot = await retry(() => get(userRef));
            if (userTypeSnapshot.exists() && userTypeSnapshot.val() === 'admin') {
              console.log("Admin user, do not log out.");
            } else {
              await signOut(auth); // Log out the user
              setCurrentUser(null);
            }
            setLoading(false);
            return;
          }

          console.log(`User ${user.email} is whitelisted.`);
          setCurrentUser(user);

          // Check the userType for additional roles with retry
          const userRef = ref(db, `users/${user.uid}/userType`);
          const snapshot = await retry(() => get(userRef));

          if (snapshot.exists()) {
            setUserType(snapshot.val());
            console.log(`User type for ${user.email}: ${snapshot.val()}`);
          } else {
            console.warn(`No userType found for ${user.email}. Defaulting to 'regular'.`);
            setUserType("regular");
          }
        } catch (error) {
          console.error("Error during authentication check:", error.message);
          setCurrentUser(null);
          setUserType("regular");
        }
      } else {
        console.log("User signed out.");
        // Reset states when user logs out
        setCurrentUser(null);
        setEmailVerified(false);
        setUserType("regular");
      }

      setLoading(false); // Authentication state resolved
    });

    // Cleanup the auth state listener on unmount
    return () => {
      unsubscribe();
    };
  }, []);

  const value = {
    currentUser,
    emailVerified,
    userType,
    isLoggedIn: !!currentUser, // Added isLoggedIn property
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading ? children : <div>Loading...</div>}
    </AuthContext.Provider>
  );
};

// Custom hook to use AuthContext
export const useAuth = () => {
  return useContext(AuthContext);
};

// ---------------------------------------------
// END: components\Auth\AuthContext.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Auth\Login.js
// ---------------------------------------------

import React, { useState } from 'react';
import { signInWithEmailAndPassword } from 'firebase/auth';
import { useNavigate, Link } from 'react-router-dom';
import { auth } from '../../firebase';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      await signInWithEmailAndPassword(auth, email, password);
      setError('');
      navigate('/search');
    } catch (err) {
      setError('Invalid credentials. Please try again.');
    }
  };

  return (
    <div className="max-w-md mx-auto p-5 bg-white shadow-lg rounded-lg">
      <h2 className="text-2xl font-bold mb-4">Login</h2>
      <p className="text-gray-600 mb-4">
        Please login with your email and password. If you don't have an account,{' '}
        <Link to="/register" className="text-blue-500 hover:underline">
          register here
        </Link>.
      </p>
      <form onSubmit={handleLogin} className="space-y-4">
        <div>
          <label className="block text-gray-700 font-medium mb-1">Email:</label>
          <input
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
        </div>
        <div>
          <label className="block text-gray-700 font-medium mb-1">Password:</label>
          <input
            type="password"
            placeholder="Enter your password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
        </div>
        <button
          type="submit"
          className="w-full py-2 px-4 bg-blue-500 text-white font-bold rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400"
        >
          Login
        </button>
      </form>
      {error && <p className="text-red-500 mt-4">{error}</p>}
    </div>
  );
};

export default Login;


// ---------------------------------------------
// END: components\Auth\Login.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Auth\Logout.js
// ---------------------------------------------

import React, { useState } from 'react';
import { signOut } from 'firebase/auth';
import { auth } from '../../firebase';
import { useNavigate } from 'react-router-dom';

const Logout = () => {
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const handleLogout = async () => {
    setIsLoading(true); // Start loading state
    try {
      // Perform sign-out operation
      await signOut(auth);

      // Navigate to the login page after successful logout
      navigate('/login');

      console.log('User successfully logged out.');
    } catch (error) {
      // Handle potential logout errors
      console.error('Error during logout:', error.message);
      alert('Failed to log out. Please try again.');
    } finally {
      // Always reset loading state
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-md bg-white shadow-md rounded-lg p-8">
        <h2 className="text-2xl font-bold text-center mb-6">Are you sure you want to log out?</h2>
        <p className="text-gray-600 text-center mb-6">
          Click the button below to securely log out of your account.
        </p>
        <div className="flex justify-center">
          <button
            onClick={handleLogout}
            disabled={isLoading}
            className={`flex items-center justify-center w-full bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition duration-300 ${
              isLoading ? 'opacity-50 cursor-not-allowed' : ''
            }`}
          >
            {isLoading ? (
              <svg
                className="animate-spin h-5 w-5 mr-2 text-white"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  className="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="4"
                ></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8v8z"
                ></path>
              </svg>
            ) : null}
            {isLoading ? 'Logging Out...' : 'Logout'}
          </button>
        </div>
        <p className="text-sm text-gray-500 mt-4 text-center">
          Note: You will be redirected to the login page after logging out.
        </p>
      </div>
    </div>
  );
};

export default Logout;


// ---------------------------------------------
// END: components\Auth\Logout.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Auth\Register.js
// ---------------------------------------------

import React, { useState } from 'react';
import { createUserWithEmailAndPassword, sendEmailVerification } from 'firebase/auth';
import { ref, get, set } from 'firebase/database';
import { auth, db } from '../../firebase';
import { useNavigate } from 'react-router-dom';

const Register = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [info, setInfo] = useState(''); // Info message for unwhitelisted users
  const navigate = useNavigate();

  const handleRegister = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setInfo('');

    try {
      // Check if the email is in the whitelist
      const whitelistRef = ref(db, `whitelistedEmails/${btoa(email)}`);
      const whitelistSnapshot = await get(whitelistRef);

      if (!whitelistSnapshot.exists()) {
        // Log the unwhitelisted user's request
        const pendingRef = ref(db, `pendingRequests/${btoa(email)}`);
        await set(pendingRef, { email, requestedAt: Date.now() });

        setInfo(
          'Your email is not on the whitelist. A request has been sent to the administrator for approval.'
        );
        setLoading(false);
        return; // Exit the registration process
      }

      // Proceed with registration if email is whitelisted
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const userId = userCredential.user.uid;

      // Store user details in the database
      await set(ref(db, `users/${userId}`), {
        email,
        userType: 'regular',
      });

      // Send email verification
      await sendEmailVerification(auth.currentUser);
      alert('Registration successful! A verification email has been sent. Please verify your email before logging in.');

      // Redirect to the login page
      navigate('/login');
    } catch (error) {
      // Correct string interpolation
      setError(`Registration failed: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-md mx-auto p-5 bg-white shadow-lg rounded-lg">
      <h2 className="text-2xl font-bold mb-4">Register</h2>
      <p className="text-gray-600 mb-4">
        Please enter your email and password to create an account. If your email is not on the whitelist, a request will be sent to the administrator for approval.
      </p>
      <form onSubmit={handleRegister} className="space-y-4">
        {error && <p className="text-red-500">{error}</p>}
        {info && <p className="text-green-500">{info}</p>}
        <div>
          <label className="block text-gray-700 font-medium mb-1">Email:</label>
          <input
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
        </div>
        <div>
          <label className="block text-gray-700 font-medium mb-1">Password:</label>
          <input
            type="password"
            placeholder="Enter your password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
        </div>
        <button
          type="submit"
          disabled={loading}
          className={`w-full py-2 px-4 text-white font-bold rounded focus:outline-none focus:ring-2 ${
            loading ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-500 hover:bg-blue-700 focus:ring-blue-400'
          }`}
        >
          {loading ? 'Registering...' : 'Register'}
        </button>
      </form>
    </div>
  );
};

export default Register;


// ---------------------------------------------
// END: components\Auth\Register.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Collection.js
// ---------------------------------------------

import React, { useState, useEffect, useCallback, useMemo } from "react";
import { Link } from "react-router-dom";
import { getDatabase, ref, onValue } from "firebase/database";

const debounce = (func, delay) => {
  let timeoutId;
  return (...args) => {
    if (timeoutId) clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func(...args), delay);
  };
};

const Collection = () => {
  const [objects, setObjects] = useState([]);
  const [filteredResults, setFilteredResults] = useState([]);
  const [filters, setFilters] = useState({
    object_title: "",
    object_type: "",
    object_id: "",
    title: "",
  });

  useEffect(() => {
    const db = getDatabase();
    const objectsRef = ref(db, "objects");

    onValue(objectsRef, (snapshot) => {
      const data = snapshot.val();
      const results = Object.entries(data || {}).map(([key, value]) => ({
        object_id: key,
        ...value,
      }));
      setObjects(results);
      setFilteredResults(results);
    });
  }, []);

  const debouncedSetFilteredResults = useMemo(
    () =>
      debounce((filtered) => {
        setFilteredResults(filtered);
      }, 300),
    []
  );

  const applyFilters = useCallback(() => {
    const filtered = objects.filter((obj) => {
      const matchesObjectTitle =
        !filters.object_title ||
        obj.object_title?.toLowerCase().includes(filters.object_title.toLowerCase());
      const matchesObjectType =
        !filters.object_type ||
        obj.object_type?.toLowerCase().includes(filters.object_type.toLowerCase());
      const matchesObjectId =
        !filters.object_id ||
        obj.object_id?.toLowerCase().includes(filters.object_id.toLowerCase());
      const matchesTitle =
        !filters.title ||
        obj.title?.toLowerCase().includes(filters.title.toLowerCase());
      return (
        matchesObjectTitle &&
        matchesObjectType &&
        matchesObjectId &&
        matchesTitle
      );
    });

    debouncedSetFilteredResults(filtered);
  }, [objects, filters, debouncedSetFilteredResults]);

  useEffect(() => {
    applyFilters();
  }, [filters, applyFilters]);

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prevFilters) => ({
      ...prevFilters,
      [name]: value,
    }));
  };

  return (
    <div className="flex min-h-screen">
      {/* Left Filter Panel */}
      <aside className="w-1/4 bg-gray-100 p-4 border-r border-gray-300">
        <h2 className="text-xl font-bold mb-4">Filters</h2>
        <input
          type="text"
          name="object_title"
          placeholder="Filter by Object Title"
          value={filters.object_title}
          onChange={handleFilterChange}
          className="w-full p-2 mb-4 border rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
        />
        <input
          type="text"
          name="object_type"
          placeholder="Filter by Object Type"
          value={filters.object_type}
          onChange={handleFilterChange}
          className="w-full p-2 mb-4 border rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
        />
        <input
          type="text"
          name="object_id"
          placeholder="Filter by Object ID"
          value={filters.object_id}
          onChange={handleFilterChange}
          className="w-full p-2 mb-4 border rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
        />
        <input
          type="text"
          name="title"
          placeholder="Filter by Title"
          value={filters.title}
          onChange={handleFilterChange}
          className="w-full p-2 mb-4 border rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
        />
      </aside>

      {/* Right Content Area */}
      <main className="w-3/4 p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredResults.length > 0 ? (
          filteredResults.map((obj, index) => (
            <Link
              key={index}
              to={`/object/${obj.object_id}`}
              className="block border border-gray-300 rounded p-4 bg-white shadow hover:shadow-lg transition"
            >
              <img
                src={obj.thumbnailUrl || "default-thumbnail.jpg"}
                alt={obj.title || "No Title"}
                className="w-full h-48 object-cover rounded mb-4"
              />
              <div>
                {obj.object_title && (
                  <p className="text-lg font-bold mb-1">{obj.object_title}</p>
                )}
                {obj.description && (
                  <p className="text-gray-600 text-sm mb-1">{obj.description}</p>
                )}
                {obj.object_id && (
                  <p className="text-gray-500 text-xs">
                    <strong>ID:</strong> {obj.object_id}
                  </p>
                )}
                {obj.object_type && (
                  <p className="text-gray-500 text-xs">
                    <strong>Type:</strong> {obj.object_type}
                  </p>
                )}
              </div>
            </Link>
          ))
        ) : (
          <p className="text-gray-500">No results found</p>
        )}
      </main>
    </div>
  );
};

export default Collection;


// ---------------------------------------------
// END: components\Collection.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\CreateData.js
// ---------------------------------------------

import React, { useState} from "react";
import { db, storage } from "../firebase"; // Import Firebase Storage
import { ref as dbRef, set } from "firebase/database";
import { ref as storageRef, uploadBytes, getDownloadURL } from "firebase/storage";
import { useAuth } from "./Auth/AuthContext";
import { Collapse } from "react-collapse";
import { objectTypes } from "./constants";

const CreateData = ({ onCancel }) => {
  const { currentUser } = useAuth();
  const [openSections, setOpenSections] = useState({
    general: true,
    productionDetails: false,
    multimedia: false,
    discovery: false,
    physical: false,
    ownershipAndAcquisition: false,
    additional: false,
  });

  const [formData, setFormData] = useState({
    object_title: "",
    object_type: "",
    object_id: "",
    title: "",
    description: "",
    createdByEmail: currentUser ? currentUser.email : "",
    creationDate: new Date().toISOString(),
    modifiedDate: new Date().toISOString(),
    object_images: [],
    object_audio: [],
    production_ethnic_group: "",
    culture_period: "",
    producer_name: "",
    school_style: "",
    production_date: "",
    production_place: "",
    excavator_field_collector: "",
    findspot: "",
    materials: "",
    ware: "",
    technique: "",
    dimensions_h_w_d: "",
    inscriptions: "",
    acquisition_name: "",
    previous_owner: "",
    acquisition_date: "",
    acquisition_notes: "",
    curator_comment: "",
    bibliographic_references: "",
    object_location: "",
    exhibition_history: "",
    condition: "",
    subjects: "",
  });

  const [loading, setLoading] = useState(false);
  const [filteredObjectTypes, setFilteredObjectTypes] = useState(objectTypes);
  const [isTyping, setIsTyping] = useState(false);

  const toggleSection = (section) => {
    setOpenSections((prev) => ({
      ...prev,
      [section]: !prev[section],
    }));
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;

    setIsTyping(true);

    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));

    if (name === "object_type") {
      const filtered = objectTypes.filter((type) =>
        type.toLowerCase().includes(value.toLowerCase())
      );
      setFilteredObjectTypes(filtered);
    }
  };

  const handleBlur = () => {
    setTimeout(() => {
      setIsTyping(false);
      if (!formData.object_type.trim()) {
        setFormData((prevFormData) => ({
          ...prevFormData,
          object_type: "Other",
        }));
      }
      setFilteredObjectTypes([]);
    }, 200);
  };

  const handleFileChange = (e, field) => {
    setFormData({ ...formData, [field]: e.target.files });
  };

  const uploadFiles = async (files, folder) => {
    const urls = [];
    let thumbnailUrl = null;

    for (const file of files) {
      const storagePath = `${folder}/${file.name}`;
      const fileRef = storageRef(storage, storagePath);

      await uploadBytes(fileRef, file);

      const fileURL = await getDownloadURL(fileRef);

      if (!thumbnailUrl) {
        thumbnailUrl = fileURL;
      }

      urls.push(fileURL);
    }

    return { urls, thumbnailUrl };
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (loading) return;

    if (!formData.object_id.trim() || !formData.object_type.trim()) {
      alert("Object ID and Object Type are required.");
      return;
    }

    setLoading(true);

    try {
      const { urls: imagesURLs, thumbnailUrl } = await uploadFiles(formData.object_images, "images");

      const audioURLs = await uploadFiles(formData.object_audio, "audio");

      const updatedFormData = {
        ...formData,
        object_images: imagesURLs,
        object_audio: audioURLs,
        thumbnailUrl: thumbnailUrl || null,
      };

      const recordRef = dbRef(db, `objects/${formData.object_id}`);
      await set(recordRef, updatedFormData);

      alert("Record added successfully!");
      setFormData({
        object_title: "",
        object_type: "Other",
        object_id: "",
        title: "",
        description: "",
        createdByEmail: currentUser ? currentUser.email : "",
        creationDate: new Date().toISOString(),
        modifiedDate: new Date().toISOString(),
        object_images: [],
        object_audio: [],
        production_ethnic_group: "",
        culture_period: "",
        producer_name: "",
        school_style: "",
        production_date: "",
        production_place: "",
        excavator_field_collector: "",
        findspot: "",
        materials: "",
        ware: "",
        technique: "",
        dimensions_h_w_d: "",
        inscriptions: "",
        acquisition_name: "",
        previous_owner: "",
        acquisition_date: "",
        acquisition_notes: "",
        curator_comment: "",
        bibliographic_references: "",
        object_location: "",
        exhibition_history: "",
        condition: "",
        subjects: "",
      });

      if (onCancel) onCancel();
    } catch (error) {
      console.error("Error adding record:", error);
      alert("Failed to add record. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-3xl mx-auto p-6 bg-white shadow-md rounded-md space-y-6">
      <h2 className="text-2xl font-bold">Create New Record</h2>

      <div>
        <button
          type="button"
          onClick={() => toggleSection("general")}
          className="mb-4 bg-gray-200 p-2 rounded hover:bg-gray-300"
        >
          General Information
        </button>
        <Collapse isOpened={openSections.general}>
          <div className="space-y-4">
            <input
              type="text"
              name="object_id"
              placeholder="Object ID (e.g., OBJ-001)"
              value={formData.object_id}
              onChange={handleInputChange}
              required
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="object_title"
              placeholder="Object Title"
              value={formData.object_title}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <div className="relative">
              <input
                type="text"
                name="object_type"
                placeholder="Type to filter object types"
                value={formData.object_type}
                onFocus={() => setFilteredObjectTypes(objectTypes)}
                onChange={handleInputChange}
                onBlur={handleBlur}
                className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              {isTyping && filteredObjectTypes.length > 0 && (
                <ul className="absolute z-10 bg-white border border-gray-300 rounded w-full max-h-40 overflow-auto shadow-lg">
                  {filteredObjectTypes.slice(0, 50).map((type, index) => (
                    <li
                      key={index}
                      onClick={() => {
                        setFormData((prevFormData) => ({
                          ...prevFormData,
                          object_type: type,
                        }));
                        setFilteredObjectTypes([]);
                      }}
                      className="cursor-pointer px-3 py-2 hover:bg-blue-100"
                    >
                      {type}
                    </li>
                  ))}
                </ul>
              )}
            </div>
            <input
              type="text"
              name="title"
              placeholder="Title"
              value={formData.title}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <textarea
              name="description"
              placeholder="Description"
              value={formData.description}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
          </div>
        </Collapse>
      </div>

      <div>
        <button
          type="button"
          onClick={() => toggleSection("productionDetails")}
          className="mb-4 bg-gray-200 p-2 rounded hover:bg-gray-300"
        >
          Production Details
        </button>
        <Collapse isOpened={openSections.productionDetails}>
          <div className="space-y-4">
            <input
              type="text"
              name="production_ethnic_group"
              placeholder="Production Ethnic Group"
              value={formData.production_ethnic_group}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="culture_period"
              placeholder="Culture Period"
              value={formData.culture_period}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="producer_name"
              placeholder="Producer Name"
              value={formData.producer_name}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="school_style"
              placeholder="School Style"
              value={formData.school_style}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="production_date"
              placeholder="Production Date"
              value={formData.production_date}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="production_place"
              placeholder="Production Place"
              value={formData.production_place}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
          </div>
        </Collapse>
      </div>

      <div>
        <button
          type="button"
          onClick={() => toggleSection("discovery")}
          className="mb-4 bg-gray-200 p-2 rounded hover:bg-gray-300"
        >
          Discovery
        </button>
        <Collapse isOpened={openSections.discovery}>
          <div className="space-y-4">
            <input
              type="text"
              name="excavator_field_collector"
              placeholder="Excavator/Field Collector"
              value={formData.excavator_field_collector}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="findspot"
              placeholder="Findspot"
              value={formData.findspot}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
          </div>
        </Collapse>
      </div>

      <div>
        <button
          type="button"
          onClick={() => toggleSection("physical")}
          className="mb-4 bg-gray-200 p-2 rounded hover:bg-gray-300"
        >
          Physical
        </button>
        <Collapse isOpened={openSections.physical}>
          <div className="space-y-4">
            <input
              type="text"
              name="materials"
              placeholder="Materials"
              value={formData.materials}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="ware"
              placeholder="Ware"
              value={formData.ware}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="technique"
              placeholder="Technique"
              value={formData.technique}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="dimensions_h_w_d"
              placeholder="Dimensions (H x W x D)"
              value={formData.dimensions_h_w_d}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="inscriptions"
              placeholder="Inscriptions"
              value={formData.inscriptions}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
          </div>
        </Collapse>
      </div>

      <div>
        <button
          type="button"
          onClick={() => toggleSection("ownershipAndAcquisition")}
          className="mb-4 bg-gray-200 p-2 rounded hover:bg-gray-300"
        >
          Ownership and Acquisition
        </button>
        <Collapse isOpened={openSections.ownershipAndAcquisition}>
          <div className="space-y-4">
            <input
              type="text"
              name="acquisition_name"
              placeholder="Acquisition Name"
              value={formData.acquisition_name}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="previous_owner"
              placeholder="Previous Owner"
              value={formData.previous_owner}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="acquisition_date"
              placeholder="Acquisition Date"
              value={formData.acquisition_date}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="acquisition_notes"
              placeholder="Acquisition Notes"
              value={formData.acquisition_notes}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
          </div>
        </Collapse>
      </div>

      <div>
        <button
          type="button"
          onClick={() => toggleSection("additional")}
          className="mb-4 bg-gray-200 p-2 rounded hover:bg-gray-300"
        >
          Additional
        </button>
        <Collapse isOpened={openSections.additional}>
          <div className="space-y-4">
            <input
              type="text"
              name="curator_comment"
              placeholder="Curator Comment"
              value={formData.curator_comment}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="bibliographic_references"
              placeholder="Bibliographic References"
              value={formData.bibliographic_references}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="object_location"
              placeholder="Object Location"
              value={formData.object_location}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="exhibition_history"
              placeholder="Exhibition History"
              value={formData.exhibition_history}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="condition"
              placeholder="Condition"
              value={formData.condition}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <input
              type="text"
              name="subjects"
              placeholder="Subjects"
              value={formData.subjects}
              onChange={handleInputChange}
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
          </div>
        </Collapse>
      </div>

      <div>
        <button
          type="button"
          onClick={() => toggleSection("multimedia")}
          className="mb-4 bg-gray-200 p-2 rounded hover:bg-gray-300"
        >
          Multimedia
        </button>
        <Collapse isOpened={openSections.multimedia}>
          <div className="space-y-4">
            <div>
              <label className="block text-gray-700 font-medium mb-1">Upload Images:</label>
              <input
                type="file"
                multiple
                accept="image/*"
                onChange={(e) => handleFileChange(e, "object_images")}
                className="w-full p-2 border border-gray-300 rounded"
              />
            </div>
            <div>
              <label className="block text-gray-700 font-medium mb-1">Upload Audio:</label>
              <input
                type="file"
                multiple
                accept="audio/*"
                onChange={(e) => handleFileChange(e, "object_audio")}
                className="w-full p-2 border border-gray-300 rounded"
              />
            </div>
          </div>
        </Collapse>
      </div>

      <div className="flex justify-between">
        <button
          type="button"
          onClick={onCancel}
          className="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={loading}
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        >
          Submit
        </button>
      </div>
    </form>
  );
};

export default CreateData;



// ---------------------------------------------
// END: components\CreateData.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\DeleteData.js
// ---------------------------------------------

import React, { useState } from 'react';
import { ref as storageRef, deleteObject } from "firebase/storage";
import { ref as dbRef, get, remove } from "firebase/database";
import { storage, db } from "../firebase";

function DeleteData({ onDeleteSuccess, onCancel }) {
  const [recordId, setRecordId] = useState("");

  const handleIdChange = (e) => {
    setRecordId(e.target.value);
  };

  const deleteFiles = async (fileURLs) => {
    for (const url of fileURLs) {
      try {
        const fileRef = storageRef(storage, url);
        await deleteObject(fileRef);
      } catch (error) {
        console.error(`Error deleting file: ${url}`, error.message);
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!recordId.trim()) {
      alert("Please enter a valid Record ID.");
      return;
    }

    const recordRef = dbRef(db, `objects/${recordId}`);

    try {
      // Fetch the record to get multimedia file URLs
      const snapshot = await get(recordRef);
      if (!snapshot.exists()) {
        alert("Record not found.");
        return;
      }

      const recordData = snapshot.val();

      // Delete associated files from Firebase Storage
      if (recordData.object_images && recordData.object_images.length > 0) {
        await deleteFiles(recordData.object_images);
      }
      if (recordData.object_audio && recordData.object_audio.length > 0) {
        await deleteFiles(recordData.object_audio);
      }

      // Delete the record from the Realtime Database
      await remove(recordRef);
      alert("Record deleted successfully!");
      setRecordId("");
      if (onDeleteSuccess) onDeleteSuccess(recordId);
    } catch (error) {
      console.error("Error deleting record:", error.message);
      alert("Error deleting record. Please try again.");
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-lg bg-white shadow-md rounded-lg p-8">
        <h2 className="text-2xl font-bold text-center mb-6">Delete Record</h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="recordId" className="block text-sm font-medium text-gray-700 mb-2">
              Record ID
            </label>
            <input
              type="text"
              id="recordId"
              name="recordId"
              value={recordId}
              onChange={handleIdChange}
              placeholder="Enter Record ID"
              required
              className="w-full p-3 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-red-400"
            />
          </div>
          <div className="flex justify-between">
            <button
              type="button"
              onClick={onCancel}
              className="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
            >
              Delete Record
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default DeleteData;


// ---------------------------------------------
// END: components\DeleteData.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\DesktopImageViewer.js
// ---------------------------------------------

import React, { useState } from "react";

const DesktopImageViewer = ({ images }) => {
  const [selectedImage, setSelectedImage] = useState(images[0]);
  const [zoomScale, setZoomScale] = useState(1);

  const resetZoom = () => setZoomScale(1);

  return (
    <div className="flex flex-col bg-gray-50 rounded-lg shadow p-4">
      {/* Central Image */}
      <div className="relative flex justify-center items-center overflow-hidden rounded mb-4">
        {selectedImage ? (
          <img
            src={selectedImage}
            alt="Object"
            className="object-contain max-h-full max-w-full"
            style={{ transform: `scale(${zoomScale})`, transition: "transform 0.3s ease" }}
          />
        ) : (
          <p className="text-gray-500">No image available</p>
        )}
        {/* Zoom Controls */}
        <div className="absolute bottom-4 right-4 flex space-x-2">
          <button
            onClick={() => setZoomScale(Math.min(zoomScale + 0.1, 3))}
            className="zoom-button"
          >
            +
          </button>
          <button
            onClick={() => setZoomScale(Math.max(zoomScale - 0.1, 1))}
            className="zoom-button"
          >
            -
          </button>
          <button onClick={resetZoom} className="zoom-button">
            ⤢
          </button>
        </div>
      </div>
      {/* Thumbnail Bar */}
      <div className="thumbnail-bar flex space-x-4 overflow-x-auto bg-gray-200 p-2 rounded">
        {images &&
          images.map((image, index) => (
            <img
              key={index}
              src={image}
              alt={`Thumbnail ${index + 1}`}
              className={`w-20 h-20 object-cover cursor-pointer rounded border ${
                image === selectedImage ? "border-blue-500" : "border-gray-300"
              }`}
              onClick={() => setSelectedImage(image)}
            />
          ))}
      </div>
    </div>
  );
};

export default DesktopImageViewer;


// ---------------------------------------------
// END: components\DesktopImageViewer.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\DesktopObjectDetails.js
// ---------------------------------------------

const DesktopObjectDetails = ({ data }) => (
    <div className="overflow-y-auto p-6">
      <h2 className="mb-6 text-xl font-bold">Object Details</h2>
      {Object.entries(data || {}).map(([key, value]) => (
        <div key={key} className="mb-4">
          <h3 className="text-sm font-bold capitalize text-gray-700">{key}</h3>
          <p className="text-sm text-gray-600 mt-1">{value}</p>
        </div>
      ))}
    </div>
  );
  export default DesktopObjectDetails;
  

// ---------------------------------------------
// END: components\DesktopObjectDetails.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Header.js
// ---------------------------------------------

import React from "react";
import { Link } from "react-router-dom";
import { useAuth } from "./Auth/AuthContext";

const Header = () => {
  const { currentUser } = useAuth();

  return (
    <header className="bg-gray-800 text-white py-4">
      <div className="container mx-auto flex justify-between items-center">
        <h1 className="text-xl font-bold">Catalog App</h1>
        <nav className="flex space-x-4">
          {/* Public Links */}
          <Link to="/" className="hover:underline text-sm">
            Home
          </Link>
          <Link to="/search" className="hover:underline text-sm">
            Search
          </Link>
          <Link to="/collection" className="hover:underline text-sm">
            Collection
          </Link>

          {/* Authenticated Links */}
          {currentUser && (
            <>
              <Link to="/records" className="hover:underline text-sm">
                Manage Records
              </Link>
              <Link to="/logout" className="hover:underline text-sm">
                Logout
              </Link>
            </>
          )}

          {/* Unauthenticated Links */}
          {!currentUser && (
            <>
              <Link to="/login" className="hover:underline text-sm">
                Login
              </Link>
              <Link to="/register" className="hover:underline text-sm">
                Register
              </Link>
            </>
          )}
        </nav>
      </div>
    </header>
  );
};

export default Header;


// ---------------------------------------------
// END: components\Header.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Home.js
// ---------------------------------------------

import React from "react";
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "./Auth/AuthContext";
import SearchBox from "./SearchBox";

const Home = () => {
  const { isLoggedIn } = useAuth();
  const navigate = useNavigate();

  const handleSearch = (query) => {
    if (query.trim()) {
      navigate(`/results?q=${encodeURIComponent(query)}`); // Redirect to results
    }
  };

  return (
    <div className="text-center py-10 px-5">
      <h1 className="text-4xl font-extrabold mb-5">Welcome to the Catalog</h1>
      <p className="text-lg text-gray-700 mb-8 leading-relaxed max-w-3xl mx-auto">
        Research data on a collection of objects.
      </p>
      {!isLoggedIn ? (
        <div>
          <p className="text-base text-gray-600 mb-5">
            Please login or register to access the features. Use the navigation bar above to proceed.
          </p>
          <div>
            <Link
              to="/login"
              className="mx-4 text-blue-500 hover:underline text-lg"
            >
              Login
            </Link>
            <Link
              to="/register"
              className="mx-4 text-blue-500 hover:underline text-lg"
            >
              Register
            </Link>
          </div>
        </div>
      ) : (
        <SearchBox onSearch={handleSearch} />
      )}
    </div>
  );
};

export default Home;


// ---------------------------------------------
// END: components\Home.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\MobileImageViewer.js
// ---------------------------------------------

import React, { useState } from "react";

const MobileImageViewer = ({ images }) => {
  const [selectedImage, setSelectedImage] = useState(images[0]);
  const [zoomScale, setZoomScale] = useState(1);

  const resetZoom = () => setZoomScale(1);

  return (
    <div className="flex flex-col bg-gray-50 rounded-lg shadow p-4">
      {/* Central Image */}
      <div className="relative flex justify-center items-center overflow-hidden rounded mb-4">
        {selectedImage ? (
          <img
            src={selectedImage}
            alt="Object"
            className="object-contain max-h-full max-w-full"
            style={{ transform: `scale(${zoomScale})`, transition: "transform 0.3s ease" }}
          />
        ) : (
          <p className="text-gray-500">No image available</p>
        )}
        {/* Zoom Controls */}
        <div className="absolute bottom-4 right-4 flex space-x-2">
          <button
            onClick={() => setZoomScale(Math.min(zoomScale + 0.1, 3))}
            className="zoom-button"
          >
            +
          </button>
          <button
            onClick={() => setZoomScale(Math.max(zoomScale - 0.1, 1))}
            className="zoom-button"
          >
            -
          </button>
          <button onClick={resetZoom} className="zoom-button">
            ⤢
          </button>
        </div>
      </div>
      {/* Thumbnail Bar */}
      <div className="thumbnail-bar flex space-x-4 overflow-x-auto bg-gray-200 p-2 rounded">
        {images &&
          images.map((image, index) => (
            <img
              key={index}
              src={image}
              alt={`Thumbnail ${index + 1}`}
              className={`w-16 h-16 object-cover cursor-pointer rounded border ${
                image === selectedImage ? "border-blue-500" : "border-gray-300"
              }`}
              onClick={() => setSelectedImage(image)}
            />
          ))}
      </div>
    </div>
  );
};

export default MobileImageViewer;


// ---------------------------------------------
// END: components\MobileImageViewer.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\MobileObjectDetails.js
// ---------------------------------------------

const MobileObjectDetails = ({ data }) => (
    <div className="overflow-y-auto p-6">
      <h2 className="mb-6 text-xl font-bold">Object Details</h2>
      {Object.entries(data || {}).map(([key, value]) => (
        <div key={key} className="mb-4">
          <h3 className="text-sm font-bold capitalize text-gray-700">{key}</h3>
          <p className="text-sm text-gray-600 mt-1">{value}</p>
        </div>
      ))}
    </div>
  );
  export default MobileObjectDetails;
  

// ---------------------------------------------
// END: components\MobileObjectDetails.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\ObjectDetail.js
// ---------------------------------------------

import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { getDatabase, ref, onValue } from "firebase/database";
import { parseDescription } from "../utils/urlParser";
import useDeviceType from "../hooks/useDeviceType";
import MobileImageViewer from "./MobileImageViewer";
import DesktopImageViewer from "./DesktopImageViewer";

const ObjectDetail = () => {
  const { objectId } = useParams();
  const navigate = useNavigate();
  const isMobile = useDeviceType(); // Detect if the user is on a mobile device
  const [view, setView] = useState(isMobile ? "images" : "data"); // Default to "images" on mobile
  const [objectData, setObjectData] = useState(null);

  // Fetch object data from Firebase
  useEffect(() => {
    const db = getDatabase();
    const objectRef = ref(db, `objects/${objectId}`);

    onValue(objectRef, (snapshot) => {
      if (snapshot.exists()) {
        const data = snapshot.val();
        setObjectData(data);
      } else {
        console.error("Object not found for ID:", objectId);
        setObjectData(null);
      }
    });
  }, [objectId]);

  if (!objectData) {
    return <p className="text-center text-gray-500">Loading...</p>;
  }

  // Fields to exclude from the left vertical panel
  const excludedFields = [
    "createdByEmail",
    "creationDate",
    "modifiedDate",
    "object_images",
    "thumbnailUrl",
  ];

  const orderedFields = [
    "object_type",
    "object_id",
    "description",
    "materials",
    "dimensions_h_w_d",
    "object_location",
    "inscriptions",
    "technique",
    "object_title",
    "curator_comment",
  ];

  // Get other fields alphabetically
  const remainingFields = Object.keys(objectData || {})
    .filter(
      (key) =>
        !orderedFields.includes(key) && // Exclude explicitly ordered fields
        objectData[key] && // Ensure the field has content
        !excludedFields.includes(key) // Exclude fields
    )
    .sort(); // Sort alphabetically

  // Final fields order, filtered to exclude empty values
  const finalFieldsOrder = [...orderedFields, ...remainingFields].filter(
    (key) => objectData[key] && objectData[key].toString().trim() !== ""
  );

  const renderFields = () =>
    finalFieldsOrder.map((key) => (
      <div key={key} className="mb-4">
        <h3 className="text-sm font-bold capitalize text-gray-700">
          {key.replace(/_/g, " ")}:
        </h3>
        <p
          className="text-sm text-gray-600 mt-1"
          dangerouslySetInnerHTML={{
            __html: parseDescription(objectData[key]),
          }}
        ></p>
      </div>
    ));

  return (
    <div className="flex flex-col md:flex-row p-6 max-w-6xl mx-auto gap-6">
      {isMobile ? (
        <>
          {/* Mobile Layout */}
          <div className="tabs flex justify-around bg-bmGreen text-bmWhite p-2 border-b">
            <button
              className={`tab ${view === "data" ? "font-bold underline" : ""}`}
              onClick={() => setView("data")}
            >
              Data
            </button>
            <button
              className={`tab ${view === "images" ? "font-bold underline" : ""}`}
              onClick={() => setView("images")}
            >
              Images
            </button>
          </div>
          {view === "data" && (
            <aside className="relative w-full bg-gray-100 rounded-lg shadow flex flex-col">
              <div
                className="flex-grow overflow-y-auto p-6"
                style={{ maxHeight: "calc(100vh - 60px)" }}
              >
                <h2 className="mb-6 text-xl font-bold">Object Details</h2>
                {renderFields()}
              </div>
              <div
                className="p-4 bg-bmGreen text-bmWhite text-center"
                style={{ height: "60px" }}
              >
                <button
                  onClick={() => navigate(-1)}
                  className="flex items-center justify-center text-sm font-bold"
                >
                  ← Back to Results
                </button>
              </div>
            </aside>
          )}
          {view === "images" && (
            <MobileImageViewer images={objectData.object_images} />
          )}
        </>
      ) : (
        <>
          {/* Desktop Layout */}
          <aside className="relative w-full md:w-1/3 bg-gray-100 rounded-lg shadow flex flex-col">
            <div
              className="flex-grow overflow-y-auto p-6"
              style={{ maxHeight: "calc(100vh - 60px)" }}
            >
              <h2 className="mb-6 text-xl font-bold">Object Details</h2>
              {renderFields()}
            </div>
            <div
              className="p-4 bg-bmGreen text-bmWhite text-center"
              style={{ height: "60px" }}
            >
              <button
                onClick={() => navigate(-1)}
                className="flex items-center justify-center text-sm font-bold"
              >
                ← Back to Results
              </button>
            </div>
          </aside>
          <main className="w-full md:w-2/3 bg-gray-50 rounded-lg shadow flex flex-col">
            <DesktopImageViewer images={objectData.object_images} />
          </main>
        </>
      )}
    </div>
  );
};

export default ObjectDetail;


// ---------------------------------------------
// END: components\ObjectDetail.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\ProtectedRoute.js
// ---------------------------------------------

import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from './Auth/AuthContext';

const ProtectedRoute = ({ children }) => {
  const { currentUser, emailVerified } = useAuth();
  const [loading, setLoading] = React.useState(true);

  React.useEffect(() => {
    setLoading(false); // Assume state stabilizes after mounting
  }, []);

  if (loading) {
    return <div>Loading...</div>; // Add a loading spinner or placeholder
  }

  if (!currentUser) {
    return <Navigate to="/login" />;
  }

  if (!emailVerified) {
    return <Navigate to="/verify-email" />;
  }

  return children;
};

export default ProtectedRoute;


// ---------------------------------------------
// END: components\ProtectedRoute.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\ReadData.js
// ---------------------------------------------

import React, { useEffect, useState } from "react";
import { db } from "../firebase";
import { ref, onValue, query, orderByChild, equalTo, get } from "firebase/database";
import { useAuth } from "./Auth/AuthContext";
import { CSVLink } from "react-csv";

function ReadData({ onSelectRecord, onDelete, onCreate }) {
  const [records, setRecords] = useState([]);
  const [filteredRecords, setFilteredRecords] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const { currentUser, userType } = useAuth();

  useEffect(() => {
    if (!currentUser) return;

    const recordsRef = ref(db, "objects");
    const recordsQuery =
      userType === "admin"
        ? recordsRef
        : query(recordsRef, orderByChild("createdByEmail"), equalTo(currentUser.email));

    const unsubscribe = onValue(recordsQuery, (snapshot) => {
      if (!snapshot.exists()) {
        setRecords([]);
        setFilteredRecords([]);
        return;
      }

      const allRecords = Object.entries(snapshot.val()).map(([object_id, data]) => ({
        object_id,
        ...data,
      }));

      setRecords(allRecords);
      setFilteredRecords(allRecords);
    });

    return () => unsubscribe();
  }, [currentUser, userType]);

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setFilteredRecords(records);
      return;
    }

    const objectIdQuery = query(ref(db, "objects"), orderByChild("object_id"), equalTo(searchQuery));

    try {
      const snapshot = await get(objectIdQuery);
      const results = [];
      if (snapshot.exists()) {
        snapshot.forEach((child) => {
          results.push({ object_id: child.key, ...child.val() });
        });
      }

      setFilteredRecords(results);
    } catch (error) {
      console.error("Error fetching search results:", error);
    }
  };

  const headers = records.length > 0
    ? Object.keys(records[0]).map((key) => ({
        label: key.replace(/_/g, " ").toUpperCase(),
        key: key,
      }))
    : [];

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-3xl bg-white shadow-md rounded-lg p-8">
        <h3 className="text-2xl font-bold mb-4">Your Records</h3>
        <p className="text-gray-600 mb-4">
          You have <strong>{records.length}</strong> records. Use the buttons below to create, review, update, or delete records.
          You can also export the data as a CSV file.
        </p>

        <div className="mb-4 flex space-x-4">
          <input
            type="text"
            placeholder="Search by object ID"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="p-2 border border-gray-300 rounded w-72 focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
          <button onClick={handleSearch} className="p-2 bg-blue-500 text-white rounded hover:bg-blue-700 focus:ring-2 focus:ring-blue-400">
            Search
          </button>
        </div>

        <div className="mb-4">
          <button onClick={onCreate} className="p-2 bg-green-500 text-white rounded hover:bg-green-700 focus:ring-2 focus:ring-green-400">
            Create New Record
          </button>
        </div>

        <CSVLink
          data={records}
          headers={headers}
          filename="objects_records.csv"
          className="p-2 bg-gray-500 text-white rounded mb-4 inline-block hover:bg-gray-700 focus:ring-2 focus:ring-gray-400"
        >
          Export Records to CSV
        </CSVLink>

        {filteredRecords.length === 0 ? (
          <p className="text-gray-500">No records available</p>
        ) : (
          <ul className="space-y-4">
            {filteredRecords.map((record) => (
              <li
                key={record.object_id}
                className="p-4 border border-gray-300 rounded flex flex-col space-y-2"
              >
                {Object.entries(record).map(([key, value]) => {
                  if (key === "thumbnailUrl") {
                    return (
                      <div key={key} className="flex items-center space-x-2">
                        <strong>{key.replace(/_/g, " ").toUpperCase()}:</strong>
                        <img
                          src={value}
                          alt="Thumbnail"
                          className="w-16 h-16 object-cover rounded-md border border-gray-300"
                        />
                      </div>
                    );
                  }

                  if (key === "object_images" && Array.isArray(value)) {
                    return (
                      <div key={key} className="flex flex-col">
                        <strong>{key.replace(/_/g, " ").toUpperCase()}:</strong>
                        <div className="grid grid-cols-2 gap-2 mt-2">
                          {value.map((imageUrl, index) => (
                            <img
                              key={index}
                              src={imageUrl}
                              alt={`Object ${index + 1}`}
                              className="w-16 h-16 object-cover rounded-md border border-gray-300"
                            />
                          ))}
                        </div>
                      </div>
                    );
                  }

                  return (
                    <p key={key} className="text-sm">
                      <strong>{key.replace(/_/g, " ").toUpperCase()}:</strong> {value?.toString() || "N/A"}
                    </p>
                  );
                })}
                <div className="flex space-x-2 mt-2">
                  <button
                    onClick={() => onSelectRecord(record)}
                    className="p-2 bg-yellow-500 text-white rounded hover:bg-yellow-700 focus:ring-2 focus:ring-yellow-400"
                  >
                    Review Record
                  </button>
                  <button
                    onClick={() => onDelete(record)}
                    className="p-2 bg-red-500 text-white rounded hover:bg-red-700 focus:ring-2 focus:ring-red-400"
                  >
                    Delete Record
                  </button>
                </div>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}

export default ReadData;


// ---------------------------------------------
// END: components\ReadData.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\RecordManager.js
// ---------------------------------------------

import React, { useState, useEffect } from "react";
import CreateData from "./CreateData";
import ReadData from "./ReadData";
import UpdateData from "./UpdateData";
import DeleteData from "./DeleteData";
import { db } from "../firebase";
import { ref, onValue } from "firebase/database";

const RecordManager = () => {
  const [records, setRecords] = useState([]); // All records
  const [view, setView] = useState("read"); // Current view: "create", "read", "update", "delete"
  const [selectedRecord, setSelectedRecord] = useState(null); // Record selected for update/delete

  useEffect(() => {
    // Fetch records from Firebase
    const recordsRef = ref(db, "objects");
    const unsubscribe = onValue(recordsRef, (snapshot) => {
      if (snapshot.exists()) {
        const fetchedRecords = Object.entries(snapshot.val()).map(([object_id, data]) => ({
          object_id, // Use object_id as the key
          ...data,
        }));
        setRecords(fetchedRecords);
      } else {
        setRecords([]);
      }
    });

    return () => unsubscribe();
  }, []);

  const handleSelectRecord = (record) => {
    setSelectedRecord(record);
    setView("update");
  };

  const handleDelete = (record) => {
    setSelectedRecord(record);
    setView("delete");
  };

  const handleRecordUpdated = () => {
    setSelectedRecord(null);
    setView("read");
  };

  const handleCreate = () => {
    setView("create"); // Switch to Create mode
  };

  const handleCancel = () => {
    setSelectedRecord(null);
    setView("read");
  };

  return (
    <div className="container mx-auto p-4">
      {view === "create" && <CreateData onCancel={handleCancel} />}
      {view === "read" && (
        <ReadData
          records={records}
          onSelectRecord={handleSelectRecord}
          onDelete={handleDelete}
          onCreate={handleCreate}
        />
      )}
      {view === "update" && selectedRecord && (
        <UpdateData selectedRecord={selectedRecord} onRecordUpdated={handleRecordUpdated} onCancel={handleCancel} />
      )}
      {view === "delete" && selectedRecord && (
        <DeleteData selectedRecord={selectedRecord} onDeleteSuccess={handleRecordUpdated} onCancel={handleCancel} />
      )}
    </div>
  );
};

export default RecordManager;


// ---------------------------------------------
// END: components\RecordManager.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\ResultsPage.js
// ---------------------------------------------

import React, { useState, useEffect, useCallback } from "react";
import { getDatabase, ref, onValue } from "firebase/database";
import { Link } from "react-router-dom";
import { objectTypes } from "./constants"; // Import object types for filtering

const ResultsPage = () => {
  const [objects, setObjects] = useState([]); // All fetched objects
  const [filteredResults, setFilteredResults] = useState([]); // Filtered results
  const [filters, setFilters] = useState({
    object_title: "",
    object_type: "",
    object_id: "",
    title: "",
  }); // Filter criteria

  useEffect(() => {
    const db = getDatabase();
    const objectsRef = ref(db, "objects");

    onValue(objectsRef, (snapshot) => {
      const data = snapshot.val();
      const results = Object.entries(data || {}).map(([key, value]) => ({
        object_id: key, // Use object_id as the key
        ...value,
      }));
      setObjects(results);
      setFilteredResults(results); // Initialize filtered results
    });
  }, []);

  const applyFilters = useCallback(() => {
    setFilteredResults(
      objects.filter((obj) => {
        const matchesObjectTitle =
          !filters.object_title ||
          obj.object_title?.toLowerCase().includes(filters.object_title.toLowerCase());
        const matchesObjectType =
          !filters.object_type || obj.object_type === filters.object_type;
        const matchesObjectId =
          !filters.object_id ||
          obj.object_id?.toLowerCase().includes(filters.object_id.toLowerCase());
        const matchesTitle =
          !filters.title ||
          obj.title?.toLowerCase().includes(filters.title.toLowerCase());
        return matchesObjectTitle && matchesObjectType && matchesObjectId && matchesTitle;
      })
    );
  }, [filters, objects]);

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prevFilters) => ({
      ...prevFilters,
      [name]: value,
    }));
  };

  useEffect(() => {
    applyFilters();
  }, [applyFilters]);

  return (
    <div className="flex flex-col h-screen">
      {/* Top Section for Item Count */}
      <div className="p-4 bg-gray-100 text-left">
        <h2 className="text-lg font-bold">
          Collection search: {filteredResults.length} results
        </h2>
      </div>

      <div className="flex flex-1">
        {/* Left Filter Panel */}
        <aside className="w-1/4 bg-gray-50 p-4 border-r border-gray-300">
          <h2 className="text-xl font-bold mb-4">Filters</h2>
          <input
            type="text"
            name="object_title"
            placeholder="Filter by Object Title"
            value={filters.object_title}
            onChange={handleFilterChange}
            className="w-full p-2 mb-4 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
          <select
            name="object_type"
            value={filters.object_type}
            onChange={handleFilterChange}
            className="w-full p-2 mb-4 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
          >
            <option value="">All Object Types</option>
            {objectTypes.map((type) => (
              <option key={type} value={type}>
                {type}
              </option>
            ))}
          </select>
          <input
            type="text"
            name="object_id"
            placeholder="Filter by Object ID"
            value={filters.object_id}
            onChange={handleFilterChange}
            className="w-full p-2 mb-4 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
          <input
            type="text"
            name="title"
            placeholder="Filter by Title"
            value={filters.title}
            onChange={handleFilterChange}
            className="w-full p-2 mb-4 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
        </aside>

        {/* Right Content Area */}
        <main className="w-3/4 p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 overflow-y-auto">
          {filteredResults.length > 0 ? (
            filteredResults.map((obj, index) => (
              <Link
                key={index}
                to={`/object/${obj.object_id}`} // Navigate to ObjectDetail page
                className="border border-gray-300 rounded p-4 bg-white shadow hover:shadow-lg transition"
              >
                <img
                  src={obj.thumbnailUrl || "default-thumbnail.jpg"}
                  alt={obj.title || "No Title"}
                  className="w-full h-48 object-cover rounded mb-4"
                />
                <div>
                  {obj.object_title && (
                    <p className="text-lg font-bold mb-1">{obj.object_title}</p>
                  )}
                  {obj.description && (
                    <p className="text-gray-600 text-sm mb-1">{obj.description}</p>
                  )}
                  {obj.object_id && (
                    <p className="text-gray-500 text-xs">
                      <strong>ID:</strong> {obj.object_id}
                    </p>
                  )}
                </div>
              </Link>
            ))
          ) : (
            <p className="text-gray-500">No results found</p>
          )}
        </main>
      </div>
    </div>
  );
};

export default ResultsPage;


// ---------------------------------------------
// END: components\ResultsPage.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\SearchBox.js
// ---------------------------------------------

import React, { useState } from "react";
import "./SearchBox.css"; // Optional CSS for styling

const SearchBox = ({ onSearch }) => {
  const [query, setQuery] = useState(""); // State to manage search input

  const handleSearch = () => {
    if (query.trim()) {
      onSearch(query); // Call the parent's search handler
    }
  };

  return (
    <div className="search-box" style={{ marginBottom: "20px", textAlign: "center" }}>
      <input
        type="text"
        placeholder="Search by keyword, place, or object ID"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        style={{
          padding: "10px",
          width: "300px",
          marginRight: "10px",
          border: "1px solid #ccc",
          borderRadius: "4px",
        }}
      />
      <button
        onClick={handleSearch}
        style={{
          padding: "10px 20px",
          backgroundColor: "#007BFF",
          color: "white",
          border: "none",
          borderRadius: "4px",
          cursor: "pointer",
        }}
      >
        Search
      </button>
    </div>
  );
};

export default SearchBox;

// ---------------------------------------------
// END: components\SearchBox.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\SearchPage.js
// ---------------------------------------------

import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

const SearchPage = () => {
  const [query, setQuery] = useState("");
  const navigate = useNavigate();

  const handleSearch = (e) => {
    e.preventDefault();
    if (query.trim()) {
      navigate(`/results?q=${encodeURIComponent(query)}`);
    }
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-50 px-4">
      <h1 className="text-3xl font-bold text-gray-800 mb-6">Search the Catalog</h1>
      <form onSubmit={handleSearch} className="w-full max-w-md">
        <div className="flex items-center border border-gray-300 rounded-lg overflow-hidden shadow-sm">
          <input
            type="text"
            placeholder="Enter search term"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            className="w-full p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
          <button
            type="submit"
            className="bg-blue-500 text-white px-4 py-2 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-400"
          >
            Search
          </button>
        </div>
      </form>
      <p className="text-sm text-gray-500 mt-4">
        Use the search box above to find objects in the catalog.
      </p>
    </div>
  );
};

export default SearchPage;


// ---------------------------------------------
// END: components\SearchPage.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\UpdateData.js
// ---------------------------------------------

import React, { useState, useEffect } from "react";
import { db, storage } from "../firebase";
import { ref, update } from "firebase/database";
import { ref as storageRef, uploadBytes, getDownloadURL, deleteObject } from "firebase/storage";
import { objectTypes } from "./constants";

function UpdateData({ selectedRecord, onRecordUpdated, onCancel }) {
  const [formData, setFormData] = useState({});
  const [newImages, setNewImages] = useState([]);
  const [newAudio, setNewAudio] = useState([]);
  const [imagesToDelete, setImagesToDelete] = useState([]);
  const [filteredObjectTypes, setFilteredObjectTypes] = useState(objectTypes);
  const [isTyping, setIsTyping] = useState(false);

  useEffect(() => {
    if (selectedRecord) {
      setFormData({
        ...selectedRecord,
        object_images: selectedRecord.object_images || [],
        object_audio: selectedRecord.object_audio || [],
        thumbnailUrl: selectedRecord.thumbnailUrl || "",
        modifiedDate: new Date().toISOString(),
        production_ethnic_group: selectedRecord.production_ethnic_group || "",
        culture_period: selectedRecord.culture_period || "",
        producer_name: selectedRecord.producer_name || "",
        school_style: selectedRecord.school_style || "",
        production_date: selectedRecord.production_date || "",
        production_place: selectedRecord.production_place || "",
        excavator_field_collector: selectedRecord.excavator_field_collector || "",
        findspot: selectedRecord.findspot || "",
        materials: selectedRecord.materials || "",
        ware: selectedRecord.ware || "",
        technique: selectedRecord.technique || "",
        dimensions_h_w_d: selectedRecord.dimensions_h_w_d || "",
        inscriptions: selectedRecord.inscriptions || "",
        acquisition_name: selectedRecord.acquisition_name || "",
        previous_owner: selectedRecord.previous_owner || "",
        acquisition_date: selectedRecord.acquisition_date || "",
        acquisition_notes: selectedRecord.acquisition_notes || "",
        curator_comment: selectedRecord.curator_comment || "",
        bibliographic_references: selectedRecord.bibliographic_references || "",
        object_location: selectedRecord.object_location || "",
        exhibition_history: selectedRecord.exhibition_history || "",
        condition: selectedRecord.condition || "",
        subjects: selectedRecord.subjects || "",
        object_type: selectedRecord.object_type || "",
      });
    }
  }, [selectedRecord]);

  const handleObjectTypeChange = (e) => {
    const { value } = e.target;

    setIsTyping(true);

    setFormData((prev) => ({
      ...prev,
      object_type: value,
    }));

    const filtered = objectTypes.filter((type) =>
      type.toLowerCase().includes(value.toLowerCase())
    );
    setFilteredObjectTypes(filtered);
  };

  const handleObjectTypeBlur = () => {
    setTimeout(() => {
      setIsTyping(false);
      if (!formData.object_type.trim()) {
        setFormData((prev) => ({
          ...prev,
          object_type: selectedRecord.object_type,
        }));
      }
      setFilteredObjectTypes([]);
    }, 200);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleFileChange = (e, setFiles) => {
    setFiles(Array.from(e.target.files));
  };

  const handleDeleteImage = (imageUrl) => {
    setImagesToDelete((prev) => [...prev, imageUrl]);
    setFormData((prev) => ({
      ...prev,
      object_images: (prev.object_images || []).filter((url) => url !== imageUrl),
      thumbnailUrl: prev.thumbnailUrl === imageUrl ? null : prev.thumbnailUrl,
    }));
  };

  const uploadFiles = async (files, folder) => {
    const urls = [];
    let thumbnailUrl = null;

    for (const file of files) {
      const storagePath = `${folder}/${file.name}`;
      const fileRef = storageRef(storage, storagePath);
      await uploadBytes(fileRef, file);
      const fileURL = await getDownloadURL(fileRef);

      if (!thumbnailUrl) {
        thumbnailUrl = fileURL;
      }

      urls.push(fileURL);
    }

    return { urls, thumbnailUrl };
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!formData.object_id) {
      alert("Invalid record ID.");
      return;
    }

    const recordRef = ref(db, `objects/${formData.object_id}`);
    const updatedRecord = { ...formData, modifiedDate: new Date().toISOString() };

    try {
      for (const imageUrl of imagesToDelete) {
        const imageRef = storageRef(storage, imageUrl);
        await deleteObject(imageRef);
      }

      if (newImages.length > 0) {
        const { urls: imageUrls, thumbnailUrl } = await uploadFiles(newImages, "images");
        updatedRecord.object_images = [...(formData.object_images || []), ...imageUrls];
        updatedRecord.thumbnailUrl = thumbnailUrl || updatedRecord.thumbnailUrl;
      }

      if (newAudio.length > 0) {
        const audioUrls = await uploadFiles(newAudio, "audio");
        updatedRecord.object_audio = [...(formData.object_audio || []), ...audioUrls];
      }

      await update(recordRef, updatedRecord);
      alert("Record updated successfully!");
      if (onRecordUpdated) onRecordUpdated(updatedRecord);
    } catch (error) {
      console.error("Error updating record:", error.message);
      alert("Failed to update record. Please try again.");
    }
  };

  const renderInputFields = () => (
    <>
      {Object.entries(formData).map(([key, value]) => {
        if (key === "object_type") {
          return (
            <div key={key} className="mb-4 relative">
              <label className="block text-sm font-medium text-gray-700">Object Type</label>
              <input
                type="text"
                name={key}
                value={formData.object_type}
                placeholder="Type to filter object types"
                onChange={handleObjectTypeChange}
                onBlur={handleObjectTypeBlur}
                onFocus={() => setFilteredObjectTypes(objectTypes)}
                className="block w-full mt-1 p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              {isTyping && filteredObjectTypes.length > 0 && (
                <ul className="absolute z-10 bg-white border border-gray-300 rounded w-full max-h-40 overflow-auto shadow-lg">
                  {filteredObjectTypes.slice(0, 50).map((type, index) => (
                    <li
                      key={index}
                      onClick={() => {
                        setFormData((prev) => ({
                          ...prev,
                          object_type: type,
                        }));
                        setFilteredObjectTypes([]);
                      }}
                      className="cursor-pointer px-3 py-2 hover:bg-blue-100"
                    >
                      {type}
                    </li>
                  ))}
                </ul>
              )}
            </div>
          );
        }

        if (key === "object_images") {
          return (
            <div key={key} className="mb-4">
              <label className="block text-sm font-medium text-gray-700">Existing Images</label>
              <div className="grid grid-cols-2 gap-4 mt-2">
                {Array.isArray(value) &&
                  value.map((imageUrl, index) => (
                    <div key={index} className="relative">
                      <img
                        src={imageUrl}
                        alt={`Object ${index + 1}`}
                        className="w-full h-auto rounded-lg shadow border"
                      />
                      <button
                        type="button"
                        onClick={() => handleDeleteImage(imageUrl)}
                        className="absolute top-1 right-1 bg-red-500 text-white text-xs px-2 py-1 rounded"
                      >
                        Remove
                      </button>
                    </div>
                  ))}
              </div>
              <label className="block text-sm font-medium text-gray-700 mt-4">Add New Images</label>
              <input
                type="file"
                multiple
                accept="image/*"
                onChange={(e) => handleFileChange(e, setNewImages)}
                className="block w-full mt-1 p-2 border border-gray-300 rounded"
              />
            </div>
          );
        }

        if (key === "object_audio") {
          return (
            <div key={key} className="mb-4">
              <label className="block text-sm font-medium text-gray-700">Add New Audio</label>
              <input
                type="file"
                multiple
                accept="audio/*"
                onChange={(e) => handleFileChange(e, setNewAudio)}
                className="block w-full mt-1 p-2 border border-gray-300 rounded"
              />
            </div>
          );
        }

        if (key === "thumbnailUrl") {
          return (
            <div key={key} className="mb-4">
              <label className="block text-sm font-medium text-gray-700">Thumbnail</label>
              {value ? (
                <img
                  src={value}
                  alt="Thumbnail"
                  className="w-24 h-24 object-cover rounded-md border border-gray-300 mt-2"
                />
              ) : (
                <div className="w-24 h-24 bg-gray-200 flex items-center justify-center rounded-md mt-2">
                  No Thumbnail
                </div>
              )}
            </div>
          );
        }

        return (
          <div key={key} className="mb-4">
            <label className="block text-sm font-medium text-gray-700">{key.replace(/_/g, " ").toUpperCase()}</label>
            <input
              type="text"
              name={key}
              value={value || ""}
              onChange={handleChange}
              className="block w-full mt-1 p-2 border border-gray-300 rounded"
            />
          </div>
        );
      })}
    </>
  );

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-lg bg-white shadow-md rounded-lg p-8">
        <h2 className="text-2xl font-bold text-center mb-6">Update Record</h2>
        <form onSubmit={handleSubmit} className="space-y-6">
          {renderInputFields()}
          <div className="flex justify-between mt-4">
            <button
              type="button"
              onClick={onCancel}
              className="w-1/2 bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-md mr-2"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="w-1/2 bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-md"
            >
              Update Record
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default UpdateData;

// ---------------------------------------------
// END: components\UpdateData.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\constants.js
// ---------------------------------------------

// src/components/constants.js
export const objectTypes = [
  "Khar-gsil",
  "Abacus",
  "Abayah",
  "Abuna-e",
  "Accessory cup",
  "Accounts-book",
  "Acorn lekythos",
  "Acoustic jar",
  "Acrocup",
  "Acroterion",
  "Acupuncture-needle",
  "Adhesive",
  "Admission-ticket",
  "Adorno",
  "Advertisement",
  "Adze",
  "Adze-hammer",
  "Adze-polisher",
  "Adze-sharpener",
  "Aegis",
  "Aeolipile",
  "Aerophone",
  "Aeroplane",
  "Agricultural equipment",
  "Agricultural tool/implement",
  "Aguayo",
  "Aigrette",
  "Aircraft",
  "Aircraft-chronometer",
  "Aksu",
  "Alabastron",
  "Alam",
  "Alarm clock",
  "Alarm watch",
  "Alarm-mechanism",
  "Albarello",
  "Album",
  "Alcohol equipment",
  "Alembic",
  "Alforja",
  "Alidade",
  "Almain collar",
  "Almanac",
  "Almilla",
  "Alms-bowl",
  "Alms-box",
  "Alphabet",
  "Altar",
  "Altar-card",
  "Altar-cloth",
  "Altar-cross",
  "Altar-dossal",
  "Altar-frontal",
  "Altar-ornament",
  "Altar-piece",
  "Altar-tablet",
  "Altar-vase",
  "Altar-vessel",
  "Altimeter",
  "Altitude dial",
  "Ammonite",
  "Ammunition",
  "Ammunition-belt",
  "Ammunition-case",
  "Ammunition-pouch",
  "Amphora",
  "Amphora-cover",
  "Amphora-stand",
  "Amphorisk",
  "Amphoroid krater",
  "Ampulla",
  "Amritakalasa",
  "Amritapatra",
  "Amulet",
  "Amulet-belt",
  "Amulet-box",
  "Amulet-case",
  "Amulet-frame",
  "Amulet-holder",
  "Amulet-mould",
  "Amulet-ring",
  "Amulet-seal",
  "Amuletic wand",
  "Analemmatic dial",
  "Anatomical votive",
  "Anchor",
  "Angavastrum",
  "Angle-iron",
  "Angon",
  "Animal remains",
  "Animal-head brooch",
  "Animal-head-dress",
  "Animal-label",
  "Ankh",
  "Ankle-guard",
  "Anklet",
  "Anklung",
  "Annular brooch",
  "Anta",
  "Anta-capital",
  "Antefix",
  "Antefix-mould",
  "Anti-magnetic watch",
  "Anvil",
  "Apostle spoon",
  "Apothecary-jar",
  "Apothecary-ladle",
  "Apothecary-vessel",
  "Apothecary-weight",
  "Applicator",
  "Applied brooch",
  "Apron",
  "Apron-tie",
  "Aquamanile",
  "Arcade",
  "Arch",
  "Archer's loose",
  "Archetype",
  "Architectural cone",
  "Architectural drawing",
  "Architectural fitting",
  "Architrave",
  "Arithmetical jewel",
  "Arm-band",
  "Arm-cloth",
  "Arm-dagger",
  "Arm-guard",
  "Arm-ornament",
  "Arm-piece",
  "Arm-press",
  "Arm-ring",
  "Arm-shield",
  "Arm-sling",
  "Armature",
  "Armbrust brooch",
  "Armbrustsprossen brooch",
  "Armillary sphere",
  "Armlet",
  "Armour",
  "Arms equipment",
  "Arms-holder",
  "Arms-rest",
  "Arquebus",
  "Arrow",
  "Arrow-case",
  "Arrow-head",
  "Arrow-head-mould",
  "Arrow-holder",
  "Arrow-rest",
  "Arrow-sheath",
  "Arrow-stand",
  "Arrow-straightener",
  "Arrow-thrower",
  "Art/writing equipment",
  "Art/writing-implement",
  "Artificial hand",
  "Aryballos",
  "Ashtray",
  "Askos",
  "Askos-fitting",
  "Asparagus butter-boat",
  "Asparagus-server",
  "Aspergillum",
  "Astragalus",
  "Astrolabe",
  "Astrolabe-case",
  "Astrolabic clock",
  "Astronomer's clock",
  "Astronomical clock",
  "Astronomical compendium",
  "Astronomical dial",
  "Astronomical disc",
  "Astronomical instrument",
  "Astronomical table",
  "Astronomical watch",
  "Atlas",
  "Atlatl",
  "Attach� case",
  "Audio cassette-player",
  "Audio tape",
  "Audio/visual equipment",
  "Auger",
  "Aulos",
  "Auriscalpium",
  "Autograph-album",
  "Automaton",
  "Automaton clock",
  "Automaton watch",
  "Awayo",
  "Awl",
  "Awl-case",
  "Axe",
  "Axe-adze",
  "Axe-hammer",
  "Axle",
  "Ayaga-pata",
  "Azimuth dial",
  "Baby-carrier",
  "Baby-cover",
  "Baby-feeder",
  "Baby-rattle",
  "Baby-walker",
  "Back-ornament",
  "Back-pack",
  "Back-pad",
  "Back-plate",
  "Back-rest",
  "Back-scratcher",
  "Backed blade",
  "Backed bladelet",
  "Backed knife",
  "Backgammon-board",
  "Backgammon-piece",
  "Backplate",
  "Backrack",
  "Backsword",
  "Bacon-roaster",
  "Badge",
  "Badge-mould",
  "Bag",
  "Bag beaker",
  "Bagpipes",
  "Bail amphora",
  "Bailer",
  "Bait",
  "Baking-cup",
  "Baking-disc",
  "Baking-dish",
  "Baking-pan",
  "Baking-tray",
  "Balance",
  "Balance-case",
  "Balance-weight",
  "Balangandam",
  "Baldric",
  "Bale-mark",
  "Balister-bolt",
  "Ball",
  "Ball-stick",
  "Ball-watch",
  "Balsamarium",
  "Baluster",
  "Baluster jar",
  "Baluster jug",
  "Baluster vase",
  "Balustrade",
  "Band cup",
  "Banda",
  "Bandage",
  "Bandolier",
  "Bangle",
  "Bangle-mould",
  "Banjo",
  "Banker's tally",
  "Banknote",
  "Banner",
  "Banner-stone",
  "Baptismal shell",
  "Barb",
  "Baren",
  "Barge",
  "Bark-beater",
  "Barkcloth",
  "Barkcloth-beater",
  "Barkcloth-stamp",
  "Barometer",
  "Barrel",
  "Barrel beaker",
  "Barrel flask",
  "Barrel jug",
  "Barrow",
  "Barung",
  "Bascinet",
  "Base",
  "Basin",
  "Basin-case",
  "Basin-mould",
  "Basket",
  "Basket-carrier",
  "Basket-cover",
  "Basket-holder",
  "Bat",
  "Bat-trap",
  "Bath",
  "Bath-scoop",
  "Baton",
  "Battery",
  "Battery-plate",
  "Battle-axe",
  "Bayonet",
  "Bayonet-cover",
  "Bead",
  "Bead-grinder",
  "Bead-mould",
  "Bead-net",
  "Beaked brooch",
  "Beaker",
  "Beam",
  "Bean-pot",
  "Beard",
  "Bearded axe",
  "Beater",
  "Beating-board",
  "Beck-iron",
  "Bed",
  "Bed-cover",
  "Bed-mat",
  "Bed-pan",
  "Bed-stand",
  "Bedding",
  "Bedding-cover",
  "Bedsheet",
  "Bedwarmer",
  "Bee-lure",
  "Beehive",
  "Beehive-cover",
  "Beehive-stand",
  "Beer-bottle",
  "Beer-container",
  "Beer-glass",
  "Beer-jug",
  "Beer-mug",
  "Beer-pot",
  "Beer-strainer",
  "Beer-trough",
  "Beer-vessel",
  "Bega",
  "Begging-bowl",
  "Bell",
  "Bell beaker",
  "Bell krater",
  "Bell situla",
  "Bell-holder",
  "Bell-pendant",
  "Bell-pull",
  "Bell-ring",
  "Bell-shrine",
  "Bell-stand",
  "Bellows",
  "Belt",
  "Belt-buckle",
  "Belt-fitting",
  "Belt-pendant",
  "Belt-tie",
  "Bench",
  "Benigirai-e",
  "Berry-comb",
  "Besague",
  "Betel equipment",
  "Betel-basket",
  "Betel-box",
  "Betel-container",
  "Betel-crusher",
  "Betel-cutter",
  "Betel-dish",
  "Betel-mortar",
  "Betel-pestle",
  "Betel-stand",
  "Betel-tray",
  "Bevelled pebble",
  "Bevor",
  "Bezel",
  "Bi",
  "Bib",
  "Biberon",
  "Bicycle",
  "Bidi",
  "Bier",
  "Bifacially worked piece",
  "Bill",
  "Bill of sale",
  "Bill-hook",
  "Bin",
  "Binding",
  "Binoculars-case",
  "Bipolar core",
  "Bird brooch",
  "Bird-bath",
  "Bird-cage",
  "Bird-cage clock",
  "Bird-call",
  "Bird-feeder",
  "Bird-lure",
  "Bird-net",
  "Bird-pot",
  "Bird-scare",
  "Bird-snare",
  "Bird-trap",
  "Bird-trap-weight",
  "Birdstone",
  "Birthday-card",
  "Birthing-stool",
  "Biscuit-cutter",
  "Biscuit-jar",
  "Biscuit-mould",
  "Biscuit-tin",
  "Biseau",
  "Blackjack",
  "Blade",
  "Blade core",
  "Blade-holder",
  "Bladelet",
  "Bladelet core",
  "Blank",
  "Blanket",
  "Bleeding-cup",
  "Blind",
  "Blindman's watch",
  "Blinker",
  "Block",
  "Blockbook",
  "Bloomers",
  "Blouse",
  "Blouse-band",
  "Blow-pipe",
  "Blow-tube",
  "Blueing pan",
  "Blunderbuss",
  "Board",
  "Boaster",
  "Boat",
  "Boat-fender",
  "Boat-fitting",
  "Boat-hook",
  "Boat-pulley",
  "Boat-scraper",
  "Boater",
  "Bobbin",
  "Boccale",
  "Bodice",
  "Bodkin",
  "Bodkin-case",
  "Bodkin-holder",
  "Body-paint",
  "Body-plug",
  "Body-stamp",
  "Boiler",
  "Bolas",
  "Bolas-weight",
  "Bolo tie",
  "Bolsal",
  "Bolster",
  "Bolster-cover",
  "Bolt",
  "Bombilla",
  "Bonang",
  "Bonang-beater",
  "Bonbonni�re",
  "Bone-chisel",
  "Bone-saw",
  "Boning-rod",
  "Bonnet",
  "Bonnet-case",
  "Book",
  "Book of prints",
  "Book watch",
  "Book-case",
  "Book-clasp",
  "Book-cover",
  "Book-decoration",
  "Book-end",
  "Book-illustration",
  "Book-label",
  "Book-mark",
  "Book-mount",
  "Book-rest",
  "Bookbinder's stamp",
  "Booklet",
  "Bookplate",
  "Boomerang",
  "Boot",
  "Borer",
  "Boshanlu",
  "Boss",
  "Bossed penannular brooch",
  "Bottle",
  "Bottle jack",
  "Bottle-cap",
  "Bottle-cover",
  "Bottle-holder",
  "Bottle-mould",
  "Bottle-sealing",
  "Bottle-stamp",
  "Bottle-tripod",
  "Bough-pot",
  "Boundary-marker",
  "Boundary-stone",
  "Bouquet",
  "Bouquetier",
  "Bow",
  "Bow brooch",
  "Bow drill",
  "Bow harp",
  "Bow trap",
  "Bow-case",
  "Bow-rest",
  "Bow-sheath",
  "Bow-string",
  "Bowet",
  "Bowl",
  "Bowl-case",
  "Bowl-cover",
  "Bowl-fitting",
  "Bowl-holder",
  "Bowl-mould",
  "Bowl-stand",
  "Box",
  "Box brooch",
  "Box-fitting",
  "Box-sealing",
  "Box-weight",
  "Brace",
  "Bracelet",
  "Bracket",
  "Bracket clock",
  "Bracteate",
  "Bradawl",
  "Braid",
  "Brail",
  "Branding-iron",
  "Brandy-bowl",
  "Bras-en-l'air watch",
  "Brassiere",
  "Brazier",
  "Brazier-fitting",
  "Bread-basket",
  "Bread-fruit-splitter",
  "Bread-mould",
  "Bread-plate",
  "Bread-punch",
  "Bread-stamp",
  "Breadboard",
  "Breakfast-set",
  "Breast-band",
  "Breast-chain",
  "Breast-cloth",
  "Breast-ornament",
  "Breast-plate",
  "Breech-cloth",
  "Breeches",
  "Brick",
  "Brick-mould",
  "Brick-stamp",
  "Bridal head-dress",
  "Bride-price",
  "Bridle",
  "Bridle-bit",
  "Briefcase",
  "Brigandine",
  "Broadsheet",
  "Broadsword",
  "Brocca",
  "Brooch",
  "Brooch-mould",
  "Broom",
  "Brush",
  "Brush-box",
  "Brush-case",
  "Brush-container",
  "Brush-holder",
  "Brush-pot",
  "Brush-rest",
  "Brush-washer",
  "Buckelurne",
  "Bucket",
  "Buckle",
  "Buckle-fitting",
  "Buckle-mould",
  "Buckler",
  "Bugle",
  "Building/structure",
  "Bulb-vase",
  "Bulla",
  "Bulla-pendant",
  "Bullet",
  "Bullet-case",
  "Bullet-holder",
  "Bullet-mould",
  "Bullet-sling",
  "Bullock-cover",
  "Bullroarer",
  "Bundle-wrap",
  "Buoy",
  "Burette",
  "Burgonet",
  "Burial-chamber",
  "Burial-chest",
  "Burial-cloth",
  "Burial-pot",
  "Burial-tape",
  "Burial-urn",
  "Burin",
  "Burin-scraper",
  "Burkha",
  "Burner",
  "Burning-glass",
  "Burnisher",
  "Burnous",
  "Bust",
  "Butter-boat",
  "Butter-can",
  "Butter-churn",
  "Butter-cooler",
  "Butter-dish",
  "Butter-knife",
  "Butter-pot",
  "Butter-tub",
  "Butter-vessel",
  "Buttock-ornament",
  "Button",
  "Button brooch",
  "Button seal",
  "Button-hole watch",
  "Button-hook",
  "Button-mould",
  "Buzzer",
  "Byobu",
  "Cabasset",
  "Cabinet",
  "Caddy-spoon",
  "Cage",
  "Caique",
  "Caite",
  "Cajete",
  "Cake-mould",
  "Cake-plate",
  "Cake-stamp",
  "Cake-stand",
  "Calculator",
  "Calendar",
  "Calendar clock",
  "Calendar watch",
  "Calendar-case",
  "Calendar-disc",
  "Calendar-ring",
  "Calendar-stick",
  "Calender",
  "Calipers",
  "Call",
  "Calligraphy",
  "Calligraphy-board",
  "Caltrop",
  "Calumet",
  "Calyx-cup",
  "Calyx-krater",
  "Camail",
  "Cambu",
  "Camel-blanket",
  "Camel-bridle",
  "Camel-cover",
  "Camel-harness",
  "Camel-saddle",
  "Camel-trappings",
  "Camel-whip",
  "Cameo",
  "Camera",
  "Camera-strap",
  "Camiseta",
  "Camphor-stick-holder",
  "Can",
  "Candelabrum",
  "Candelero",
  "Candelon",
  "Candle",
  "Candle-box",
  "Candle-bracket",
  "Candle-case",
  "Candle-holder",
  "Candle-mould",
  "Candle-screen",
  "Candlestick",
  "Candlestick-holder",
  "Cannon",
  "Cannon-ball",
  "Cannula",
  "Canoe",
  "Canoe-fitting",
  "Canoe-house",
  "Canoe-ornament",
  "Canoe-pole",
  "Canopic chest",
  "Canopic coffin",
  "Canopic jar",
  "Canopic urn",
  "Canopy",
  "Cantaro",
  "Cap",
  "Cape",
  "Capital",
  "Car-ferry",
  "Carafe",
  "Carbine",
  "Card",
  "Carder",
  "Carding-brush",
  "Carding-comb",
  "Carillon clock",
  "Carpet",
  "Carpet-bowl",
  "Carpet-weight",
  "Carriage",
  "Carriage clock",
  "Carriage-fitting",
  "Carrier",
  "Carrying-basket",
  "Carrying-belt",
  "Carrying-board",
  "Carrying-chair",
  "Carrying-cloth",
  "Carrying-net",
  "Carrying-pole",
  "Carrying-sling",
  "Carrying-strap",
  "Cart",
  "Cart-cover",
  "Cart-fitting",
  "Cartonnage",
  "Cartoon",
  "Cartridge",
  "Cartridge-bag",
  "Cartridge-belt",
  "Cartridge-case",
  "Cartridge-holder",
  "Cartridge-loader",
  "Carved stone",
  "Carver-chair",
  "Carving-fork",
  "Carving-knife",
  "Caryatid",
  "Case",
  "Casket",
  "Casket-fitting",
  "Cassel cup",
  "Cast",
  "Castanet",
  "Casting waste",
  "Casting-jet",
  "Castor",
  "Cat's cradle",
  "Catalogue",
  "Catamaran",
  "Catapult",
  "Catapult-bolt",
  "Catch",
  "Catchpole",
  "Catheter",
  "Cattle-bell",
  "Cattle-fetter",
  "Cattle-trappings",
  "Cattle-whip",
  "Caudle-cup",
  "Cauldron",
  "Cauldron-fitting",
  "Caulking-tool",
  "Cauxicalli",
  "Ceiling",
  "Ceiling-coffer",
  "Ceiling-light",
  "Celery-dish",
  "Celestial globe",
  "Celt",
  "Cenotaph",
  "Censer",
  "Censer-fitting",
  "Censer-stand",
  "Centre-board",
  "Centre-piece",
  "Centre-seconds watch",
  "Centurion's ticket",
  "Ceremonial board",
  "Ceremonial doll",
  "Ceremonial staff",
  "Certificate",
  "Chadar",
  "Chafing-dish",
  "Chain",
  "Chain mail",
  "Chair",
  "Chair-cover",
  "Chaire",
  "Chakla",
  "Chalice",
  "Chalice-cup",
  "Chamber clock",
  "Chamber-pot",
  "Chamberlain's key",
  "Chamfrain",
  "Champagne-cup",
  "Champagne-flute",
  "Champagne-glass",
  "Chandarvo",
  "Chandelier",
  "Chandlery",
  "Changgi-board",
  "Changgi-piece",
  "Changgi-set",
  "Chapbook",
  "Chape",
  "Chaps",
  "Char-pot",
  "Charango",
  "Charcoal-burner",
  "Charger",
  "Chariot",
  "Chariot-fitting",
  "Charm",
  "Charm-box",
  "Charm-bracelet",
  "Charm-case",
  "Charm-holder",
  "Charm-necklace",
  "Chart",
  "Chastity-belt",
  "Chatelaine",
  "Chatelaine-watch",
  "Chatty",
  "Cheek-ornament",
  "Cheek-piece",
  "Cheese-grater",
  "Cheese-knife",
  "Cheese-scoop",
  "Chemise",
  "Cheque",
  "Cheque-book",
  "Cheque-card",
  "Cheroot",
  "Chess-board",
  "Chess-piece",
  "Chess-set",
  "Chest",
  "Chest-fitting",
  "Chest-of-drawers",
  "Chewing-stick",
  "Chicken-coop",
  "Child-bib",
  "Child-carrier",
  "Chiming clock",
  "Chimney-pot",
  "Chin-chain",
  "Chinese market watch",
  "Chisel",
  "Chocolate-box",
  "Chocolate-cup",
  "Chocolate-pot",
  "Choker",
  "Chopper",
  "Chopping tool",
  "Chopping-block",
  "Chopping-board",
  "Chopping-knife",
  "Chopstick",
  "Chopstick-case",
  "Chopstick-rest",
  "Chous",
  "Chrismatory",
  "Christmas-card",
  "Chronograph watch",
  "Chronology",
  "Chronometer",
  "Chronometer clock",
  "Chronometer watch",
  "Chronometer-case",
  "Chronometer-component",
  "Chronometer-key",
  "Chubuq",
  "Chuck",
  "Chumpa",
  "Chun",
  "Chunali",
  "Chunkey-piece",
  "Churinga",
  "Churn",
  "Churning-stick",
  "Chuspa",
  "Chytra",
  "Ciborium",
  "Cicada brooch",
  "Cider-glass",
  "Cider-jug",
  "Cider-mug",
  "Cigar",
  "Cigar-case",
  "Cigar-cutter",
  "Cigar-holder",
  "Cigarette",
  "Cigarette-box",
  "Cigarette-card",
  "Cigarette-case",
  "Cigarette-holder",
  "Cigarette-lighter",
  "Cigarette-packet",
  "Cincho",
  "Cinerary bowl",
  "Cinerary casket",
  "Cinerary chest",
  "Cinerary envelope",
  "Cinerary urn",
  "Cintamani",
  "Cippus",
  "Circlet",
  "Circumcision equipment",
  "Circumcision-knife",
  "Circumcision-plate",
  "Circumcision-scissors",
  "Circumcision-tweezers",
  "Circumferentor",
  "Circus-ticket",
  "Cista",
  "Cista-fitting",
  "Cistern",
  "Clamp",
  "Clapper",
  "Clapping stick",
  "Clarinet",
  "Clasp",
  "Claw beaker",
  "Claymore",
  "Cleat",
  "Cleaver",
  "Clepsydra",
  "Climbing-ring",
  "Climbing-rope",
  "Clinometer",
  "Clip",
  "Cloak",
  "Cloak-fastener",
  "Cloak-pin",
  "Clock",
  "Clock-case",
  "Clock-component",
  "Clock-key",
  "Clock-stand",
  "Clock-watch",
  "Clocking-in clock",
  "Clog",
  "Clog-almanac",
  "Close helmet",
  "Cloth",
  "Cloth-beater",
  "Cloth-measure",
  "Cloth-seal",
  "Clothes-box",
  "Clothes-brush",
  "Clothes-horse",
  "Clothes-rack",
  "Club",
  "Coach watch",
  "Coach-fitting",
  "Coaster",
  "Coat",
  "Coat-dress",
  "Coat-hanger",
  "Coat-of-mail",
  "Coat-peg",
  "Cobbling-equipment",
  "Cockspur",
  "Cocktail-shaker",
  "Coconut-grater",
  "Coconut-scraper",
  "Cod-piece",
  "Codex",
  "Coffee equipment",
  "Coffee-can",
  "Coffee-cooler",
  "Coffee-cup",
  "Coffee-filter",
  "Coffee-grinder",
  "Coffee-jug",
  "Coffee-mill",
  "Coffee-percolator",
  "Coffee-pot",
  "Coffee-pot-burner",
  "Coffee-pot-stand",
  "Coffee-roaster",
  "Coffee-set",
  "Coffee-spoon",
  "Coffee-strainer",
  "Coffee-table",
  "Coffer",
  "Coffin",
  "Coffin-fitting",
  "Coffin-lamp",
  "Coffin-nail",
  "Cog-stone",
  "Cog-wheel",
  "Coiffure",
  "Coin",
  "Coin brooch",
  "Coin pendant",
  "Coin-box",
  "Coin-holder",
  "Coin-mould",
  "Coin-watch",
  "Coin-weight",
  "Coir-beater",
  "Colander",
  "Collage",
  "Collar",
  "Collecting-box",
  "Column",
  "Column krater",
  "Comb",
  "Comb beater",
  "Comb-case",
  "Combination padlock",
  "Combustion clock",
  "Comic book",
  "Commemorative scarab",
  "Commonplace-book",
  "Communications-tube",
  "Communion cup",
  "Communion flagon",
  "Communion tankard",
  "Compass",
  "Compass-dial",
  "Compasses",
  "Comport",
  "Compound microscope",
  "Comtoise clock",
  "Conch",
  "Concussion stick",
  "Condensing-glass",
  "Condiment-bowl",
  "Condiment-dish",
  "Condiment-stand",
  "Cone beaker",
  "Console",
  "Container-fitting",
  "Contraceptive sheath",
  "Cooking-basket",
  "Cooking-bowl",
  "Cooking-implement",
  "Cooking-pan",
  "Cooking-pot",
  "Cooking-stand",
  "Cooking-stone",
  "Cooking-vessel",
  "Cooler",
  "Coping",
  "Copper",
  "Copy",
  "Copy-sheet",
  "Coracle",
  "Corbel",
  "Cord",
  "Cordial-glass",
  "Cordial-pot",
  "Cordophone",
  "Core",
  "Core rejuvenation flake",
  "Corkscrew",
  "Corn-bin",
  "Corn-dolly",
  "Corn-grater",
  "Corn-grinder",
  "Corn-ticket",
  "Cornet",
  "Cornice",
  "Coronet",
  "Corset",
  "Corslet",
  "Corte",
  "Cosmetic",
  "Cosmetic-applicator",
  "Cosmetic-bag",
  "Cosmetic-bottle",
  "Cosmetic-bowl",
  "Cosmetic-box",
  "Cosmetic-box-fitting",
  "Cosmetic-brush",
  "Cosmetic-case",
  "Cosmetic-container",
  "Cosmetic-dish",
  "Cosmetic-flask",
  "Cosmetic-grinder",
  "Cosmetic-jar",
  "Cosmetic-jug",
  "Cosmetic-knife",
  "Cosmetic-mortar",
  "Cosmetic-palette",
  "Cosmetic-palette-cover",
  "Cosmetic-pestle",
  "Cosmetic-pot",
  "Cosmetic-set",
  "Cosmetic-spatula",
  "Cosmetic-spoon",
  "Cosmetic-stand",
  "Cosmetic-stick",
  "Cosmetic-tool/implement",
  "Cosmetic-vessel",
  "Costrel",
  "Costume-fitting",
  "Cot",
  "Cotton-bow",
  "Cotton-gin",
  "Couch",
  "Counter",
  "Counter-box",
  "Counterpane",
  "Counterplate",
  "Counterpoise",
  "Counterpoise-menat",
  "Counterproof",
  "Coup-stick",
  "Couter",
  "Cover",
  "Cover-plate",
  "Covered kantharos",
  "Cow creamer",
  "Cow-bell",
  "Cowroid",
  "Crab-fork",
  "Crab-trap",
  "Cradle",
  "Cradle-cover",
  "Cradle-stand",
  "Cramp",
  "Crampon",
  "Crannequin",
  "Crate",
  "Cravat-pin",
  "Crayfish-trap",
  "Creagra",
  "Cream-boat",
  "Cream-jug",
  "Cream-pot",
  "Creaser",
  "Creel",
  "Crenellation",
  "Cresset",
  "Cresset lamp",
  "Crested piece",
  "Cribbage-board",
  "Cricket-ball",
  "Cricket-bat",
  "Cricket-cage",
  "Crimping-wheel",
  "Crinet",
  "Crinoline",
  "Crochet-needle",
  "Crook",
  "Cross",
  "Cross pendant",
  "Cross-belt",
  "Cross-bow",
  "Cross-bow brooch",
  "Cross-staff",
  "Crotal",
  "Crown",
  "Crozier",
  "Cruche de mossoul",
  "Crucible",
  "Crucifix",
  "Crucifix clock",
  "Crucifix dial",
  "Crucifix pendant",
  "Crucifix watch",
  "Cruciform brooch",
  "Cruet",
  "Cruet-set",
  "Cruet-stand",
  "Crupper",
  "Cruse",
  "Crusher",
  "Crusie",
  "Crutch",
  "Crystal ball",
  "Cuckoo clock",
  "Cudgel",
  "Cuff",
  "Cuff-link",
  "Cuff-link-mould",
  "Cuirass",
  "Cuisse",
  "Culet",
  "Culinary-mould",
  "Cullet",
  "Cummerbund",
  "Cup",
  "Cup nest",
  "Cup-case",
  "Cup-cover",
  "Cup-holder",
  "Cup-kantharos",
  "Cup-skyphos",
  "Cup-stand",
  "Cupboard",
  "Cupel",
  "Cupping-glass",
  "Cupping-horn",
  "Cupping-instrument",
  "Cupping-vessel",
  "Curb",
  "Curfew",
  "Currency-bar",
  "Currency-holder",
  "Currency-mould",
  "Curry-comb",
  "Curse",
  "Cursing-horn",
  "Cursing-stick",
  "Curtain",
  "Curtain-fitting",
  "Curtain-rod",
  "Cushion",
  "Cushion-cover",
  "Cushion-stone",
  "Custard-cup",
  "Cut-out",
  "Cutlass",
  "Cutlass-sheath",
  "Cutlery",
  "Cutlery-case",
  "Cutlery-rest",
  "Cutlery-sharpener",
  "Cutter",
  "Cyathus",
  "Cylcon",
  "Cylinder",
  "Cylinder seal",
  "Cymbal",
  "D-ring",
  "Dabber",
  "Dachibin",
  "Dagger",
  "Dagger-axe",
  "Dagger-sheath",
  "Dagoba",
  "Damaru",
  "Dance equipment",
  "Dance-anklet",
  "Dance-baton",
  "Dance-belt",
  "Dance-bib",
  "Dance-board",
  "Dance-cap",
  "Dance-cape",
  "Dance-club",
  "Dance-costume",
  "Dance-dress",
  "Dance-hat",
  "Dance-head-dress",
  "Dance-knife",
  "Dance-mask",
  "Dance-mat",
  "Dance-ornament",
  "Dance-paddle",
  "Dance-plaque",
  "Dance-rattle",
  "Dance-sash",
  "Dance-shield",
  "Dance-skirt",
  "Dance-spear",
  "Dance-staff",
  "Dance-stick",
  "Dance-sword",
  "Dance-wand",
  "Dao",
  "Dart",
  "Dart-case",
  "Dart-notcher",
  "Dead-eye",
  "Death-mask",
  "Decanter",
  "Decimal-dial watch",
  "Deck watch",
  "Deck-chair",
  "Decorated coconut",
  "Decorated egg",
  "Decorated gourd",
  "Decorated log",
  "Decorated nut",
  "Decorated paper",
  "Decorated seed",
  "Decorated shell",
  "Decoy",
  "Deer-call",
  "Deer-trap",
  "Demi-parure",
  "Demijohn",
  "Dental instrument",
  "Denticulate",
  "Dentil",
  "Dentures",
  "Depilatory",
  "Depth tool",
  "Desk",
  "Dessert-basket",
  "Dessert-dish",
  "Dessert-fork",
  "Dessert-knife",
  "Dessert-plate",
  "Dessert-spoon",
  "Dessert-tray",
  "Dhoti",
  "Dhow",
  "Diadem",
  "Dial",
  "Diaper",
  "Diary",
  "Dibble",
  "Dicast-ticket",
  "Dice",
  "Dice-box",
  "Dice-shaker",
  "Didgeridoo",
  "Die",
  "Differential-dial watch",
  "Digging-scoop",
  "Digging-stick",
  "Digging-stick-weight",
  "Digging-tool/implement",
  "Digital clock",
  "Digital watch",
  "Dildo",
  "Dilly bag",
  "Ding",
  "Dining-chair",
  "Dinner-plate",
  "Dinner-set",
  "Dinos",
  "Dipa-lakshmi",
  "Dipper",
  "Dipper-juglet",
  "Diptych",
  "Diptych print",
  "Diptych-dial",
  "Direction-indicator",
  "Dirk",
  "Disc",
  "Disc brooch",
  "Disc pendant",
  "Disc-dial",
  "Disc-on-bow brooch",
  "Discus",
  "Dish",
  "Dish-cover",
  "Dish-holder",
  "Dish-lamp",
  "Dish-stand",
  "Dish-warmer",
  "Display-board",
  "Display-case",
  "Distaff",
  "Distaff-holder",
  "Dividers",
  "Divination equipment",
  "Divination-artefact",
  "Divination-board",
  "Divination-bone",
  "Divination-bowl",
  "Divination-box",
  "Divination-dice",
  "Divination-figure",
  "Divination-piece",
  "Divination-rubber",
  "Divination-staff",
  "Divination-stone",
  "Divination-tablet",
  "Divination-tray",
  "Do",
  "Docket",
  "Document",
  "Document-case",
  "Document-chest",
  "Dog-bell",
  "Dog-boot",
  "Dog-collar",
  "Dog-harness",
  "Dog-muzzle",
  "Dog-trappings",
  "Doily",
  "Doka",
  "Dolabra",
  "Dolium",
  "Doll",
  "Doll's house",
  "Dome",
  "Dome-slab",
  "Domino",
  "Domino-box",
  "Domino-set",
  "Donkey-bridle",
  "Donkey-harness",
  "Donkey-trappings",
  "Door",
  "Door-brace",
  "Door-fitting",
  "Door-frame",
  "Door-handle",
  "Door-hanging",
  "Door-hinge",
  "Door-jamb",
  "Door-knob",
  "Door-knocker",
  "Door-mat",
  "Door-plate",
  "Door-post",
  "Door-screen",
  "Door-shoe",
  "Door-sill",
  "Door-socket",
  "Door-stop",
  "Dotaku",
  "Dou",
  "Double goblet",
  "Double jar",
  "Double jug",
  "Double key",
  "Double situla",
  "Double standing cup",
  "Double teapot",
  "Double-dial watch",
  "Dough-stamp",
  "Dough-vat",
  "Dowel",
  "Dowry-box",
  "Drain",
  "Drain-cover",
  "Drain-pipe",
  "Draughts-board",
  "Draughts-piece",
  "Draw-bolt",
  "Draw-knife",
  "Draw-plate",
  "Draw-string",
  "Drawing",
  "Drawing book",
  "Drawing instrument",
  "Drawing-board",
  "Drawing-set",
  "Dredger",
  "Dress",
  "Dress-fitting",
  "Dress-hook",
  "Dress-panel",
  "Dress-pin",
  "Dress-stud",
  "Dressing-tool",
  "Drill",
  "Drill-bit",
  "Drill-core",
  "Drill-holder",
  "Drinking-bowl",
  "Drinking-cup",
  "Drinking-glass",
  "Drinking-horn",
  "Drinking-jug",
  "Drinking-pot",
  "Drinking-straw",
  "Drinking-tube",
  "Drinking-vessel",
  "Dripping-bowl",
  "Droop cup",
  "Dropper",
  "Drover-badge",
  "Drug",
  "Drug-bottle",
  "Drug-jar",
  "Drug-pot",
  "Drum",
  "Drum-beater",
  "Drum-brush",
  "Drum-slab",
  "Drum-stand",
  "Drum-stand#",
  "Drum-stick",
  "Dry-point",
  "Drying-frame",
  "Duct",
  "Duho",
  "Dui",
  "Dulcimer",
  "Dumb-repeating watch",
  "Dummy clock",
  "Dummy watch",
  "Dupatta",
  "Dust-cap",
  "Duster",
  "Dutch oven",
  "Dye",
  "Dye-applicator",
  "Dyeing-frame",
  "E-goyomi",
  "E-kamban",
  "Eagle brooch",
  "Ear-cleaner",
  "Ear-drop",
  "Ear-flap",
  "Ear-muff",
  "Ear-ornament",
  "Ear-pendant",
  "Ear-pick",
  "Ear-plug",
  "Ear-reel",
  "Ear-ring",
  "Ear-ring-mould",
  "Ear-scoop",
  "Ear-shaft",
  "Ear-spool",
  "Ear-stud",
  "Ear-weight",
  "Eating-stick",
  "Ebauche",
  "Eel-container",
  "Eel-fork",
  "Eel-trap",
  "Egg-cup",
  "Egg-drainer",
  "Egg-stand",
  "Egoyomi",
  "Eight-day clock",
  "Eight-day watch",
  "Election-plate",
  "Electric clock",
  "Electrotype",
  "Elephant-goad",
  "Emblem",
  "Emblema",
  "Embossing-stamp",
  "Embroidery-frame",
  "Embroidery-kit",
  "Embroidery-knife",
  "Embroidery-needle",
  "Embroidery-sample",
  "Embroidery-tool",
  "End scraper",
  "Enema",
  "Enema-funnel",
  "Engraved stone",
  "Engraving-tool",
  "Enlarger",
  "Enredo",
  "Entr�e-dish",
  "Envelope",
  "Epaulette",
  "Epichysis",
  "Epichysis-krateriskos",
  "Epicranitis",
  "Epinetron",
  "Epistomium",
  "Epitaph jar",
  "Epitaph plaque",
  "Equal-arm brooch",
  "Equation clock",
  "Equation table",
  "Equation watch",
  "Equestrian equipment",
  "Equinoctial dial",
  "Ernaton",
  "Erotic watch",
  "Essence-box",
  "Essence-vase",
  "Etching-tool",
  "Eucharistic cake",
  "Eucharistic reed",
  "Eucharistic spoon",
  "Eulen brooch",
  "Ewer",
  "Executioner's sword",
  "Exercise-club",
  "Exercise-stick",
  "Extractor",
  "Eye cup",
  "Eye idol",
  "Eye-bath",
  "Eye-cover",
  "Eye-glass",
  "Eye-shade",
  "Eye-stone",
  "Fabricator",
  "Face jug",
  "Face-cover",
  "Face-guard",
  "Face-veil",
  "Faggot",
  "Fake",
  "Falchion",
  "Falcon-whistle",
  "Falling-globe clock",
  "Fan",
  "Fan clock",
  "Fan-case",
  "Fan-holder",
  "Fan-painting",
  "Fan-print",
  "Fang ding",
  "Fang yi",
  "Fascine",
  "Fastener",
  "Feather-box",
  "Feather-case",
  "Feather-holder",
  "Feeder",
  "Fence",
  "Fencing-mask",
  "Ferrule",
  "Fetter",
  "Fetter-lock",
  "Fez",
  "Fibula",
  "Fichu-pin",
  "Fiddle",
  "Fiddle-bow",
  "Field flask",
  "Fighting-bracelet",
  "Fighting-claw",
  "Fighting-stick",
  "Figure",
  "Figure-fitting",
  "Figure-head",
  "Figure-mould",
  "Figure-stand",
  "Figurine",
  "File",
  "Filing system",
  "Filter",
  "Finger pot",
  "Finger-bowl",
  "Finger-knife",
  "Finger-nail-guard",
  "Finger-press",
  "Finger-ring",
  "Finger-ring-mould",
  "Finger-stall",
  "Finial",
  "Fire-bar",
  "Fire-basket",
  "Fire-blower",
  "Fire-bowl",
  "Fire-box",
  "Fire-brick",
  "Fire-cover",
  "Fire-devil",
  "Fire-dog",
  "Fire-drill",
  "Fire-fan",
  "Fire-grate",
  "Fire-grid",
  "Fire-holder",
  "Fire-hook",
  "Fire-jar",
  "Fire-lighter",
  "Fire-piston",
  "Fire-plough",
  "Fire-pot",
  "Fire-rake",
  "Fire-saw",
  "Fire-screen",
  "Fire-shovel",
  "Fire-steel",
  "Fire-stick",
  "Fire-stick-case",
  "Fire-stick-container",
  "Fire-stone",
  "Fire-tongs",
  "Firewood",
  "Firework",
  "Fish-arrow",
  "Fish-basket",
  "Fish-bowl",
  "Fish-dish",
  "Fish-drier",
  "Fish-fork",
  "Fish-gorge",
  "Fish-harpoon",
  "Fish-hook",
  "Fish-hook-blank",
  "Fish-hook-case",
  "Fish-knife",
  "Fish-lure",
  "Fish-needle",
  "Fish-plate",
  "Fish-scoop",
  "Fish-serving-fork",
  "Fish-serving-knife",
  "Fish-sieve",
  "Fish-slice",
  "Fish-snare",
  "Fish-spear",
  "Fish-trap",
  "Fish-weir",
  "Fishing equipment",
  "Fishing-bait",
  "Fishing-basket",
  "Fishing-boat",
  "Fishing-goggles",
  "Fishing-kite",
  "Fishing-line",
  "Fishing-line-holder",
  "Fishing-line-weight",
  "Fishing-line-winder",
  "Fishing-net",
  "Fishing-noose",
  "Fishing-raft",
  "Fishing-rod",
  "Fishing-rod-holder",
  "Fishing-stick",
  "Fishing-trimmer",
  "Fitting",
  "Fitting-mould",
  "Five-minute-repeating watch",
  "Fixture/fitting",
  "Flabellum",
  "Flag",
  "Flag-pole",
  "Flageolet",
  "Flagon",
  "Flail",
  "Flake",
  "Flaked flake",
  "Flaker",
  "Flange",
  "Flask",
  "Flax-beater",
  "Flaying-knife",
  "Flea-trap",
  "Fleam",
  "Flenching-tool/implement",
  "Flesh-hook",
  "Flesher",
  "Flint",
  "Float",
  "Float-plug",
  "Floor",
  "Floor-beater",
  "Floor-cover",
  "Florid cruciform brooch",
  "Flower-basket",
  "Flower-holder",
  "Flower-pot",
  "Flower-pot-holder",
  "Flower-pot-stand",
  "Flower-vase",
  "Flue-tile",
  "Flute",
  "Flute glass",
  "Flute-case",
  "Fly-back hands watch",
  "Fly-shooter",
  "Fly-whisk",
  "Fob-ring",
  "Fob-seal",
  "Fob-watch",
  "Folder",
  "Folding fork",
  "Folding knife",
  "Folding spoon",
  "Folding square",
  "Folding stool",
  "Font",
  "Food-basket",
  "Food-box",
  "Food-container",
  "Food-cover",
  "Food-grinder",
  "Food-guard",
  "Food-hook",
  "Food-label",
  "Food-paddle",
  "Food-pounder",
  "Food-safe",
  "Food-scoop",
  "Food-stamp",
  "Food-stirrer",
  "Food-tray",
  "Food-trough",
  "Foot-bath",
  "Foot-guard",
  "Foot-ornament",
  "Foot-rasp",
  "Foot-rest",
  "Foot-scraper",
  "Foot-wear",
  "Football",
  "Footstool-cover",
  "Forceps",
  "Forehead-ornament",
  "Forge",
  "Fork",
  "Fork-case",
  "Form clock",
  "Form watch",
  "Former",
  "Fornication-tally",
  "Forowa",
  "Fossil",
  "Foundation-deposit",
  "Foundation-stone",
  "Fountain",
  "Fountain-jet",
  "Fountain-key",
  "Frame",
  "Francisca",
  "Frieze",
  "Frieze-brick",
  "Frieze-crown",
  "Fringe",
  "Frock",
  "Frog-call",
  "Frog-trap",
  "Frontispiece",
  "Frontlet",
  "Fruit-basket",
  "Fruit-bowl",
  "Fruit-dish",
  "Fruit-knife",
  "Fruit-stand",
  "Frying-pan",
  "Fu",
  "Fuchi",
  "Fuchi-kashira",
  "Fuddling cup",
  "Fuel",
  "Fumigator",
  "Fuming-pot",
  "Funeral-ticket",
  "Funerary bed",
  "Funerary belt",
  "Funerary cone",
  "Funerary equipment",
  "Funerary urn",
  "Funerary wreath",
  "Funnel",
  "Furnace",
  "Furnace-stone",
  "Furnishing",
  "Furniture",
  "Furniture-fitting",
  "Fusee-adjusting rod",
  "Fusee-cutting engine",
  "Futon-cover",
  "Gable",
  "Gadus",
  "Gaff",
  "Gaiter",
  "Gaku",
  "Gallipot",
  "Gambang",
  "Gambang-beater",
  "Game",
  "Game-ball",
  "Game-board",
  "Game-box",
  "Game-counter",
  "Game-counter-tray",
  "Game-piece",
  "Game-stick",
  "Games-cabinet",
  "Gaming-block",
  "Gaming-board",
  "Gaming-charm",
  "Gaming-piece",
  "Gaming-table",
  "Gandourah",
  "Garden-seat",
  "Garden-stool",
  "Garland",
  "Garment",
  "Garter",
  "Gas-cylinder",
  "Gate",
  "Gate-pillar",
  "Gate-post",
  "Gateway",
  "Gathering equipment",
  "Gathering-hook",
  "Gathering-stick",
  "Gathering-tool/implement",
  "Gau",
  "Gauge",
  "Gauntlet",
  "Ge",
  "Gem",
  "Gem-mould",
  "Gemellion",
  "Gender",
  "Gender-beater",
  "Genggong",
  "Genital-clamp",
  "Genital-guard",
  "Ghanta",
  "Gimlet",
  "Gimmel-ring",
  "Gingall",
  "Ginger-jar",
  "Ginning-tool",
  "Girdle",
  "Girdle-fastener",
  "Girdle-hanger",
  "Girth",
  "Girth-strap",
  "Gisarme",
  "Gittern",
  "Gladiator's discharge ticket",
  "Glaive",
  "Glass print",
  "Glass rod",
  "Glass slide",
  "Glass-cooler",
  "Glass-holder",
  "Glaux",
  "Globe",
  "Globe-dial",
  "Glove",
  "Go-board",
  "Go-piece",
  "Goa stone",
  "Goad",
  "Goat-bell",
  "Goblet",
  "Goblet vase",
  "God stick",
  "God symbol",
  "God-house",
  "Goffering-tongs",
  "Goggles",
  "Gola",
  "Gold-weight",
  "Goldsmith's token",
  "Gong",
  "Gong-beater",
  "Gong-stand",
  "Gordion cup",
  "Gorget",
  "Gorytus",
  "Gouge",
  "Gown",
  "Grader",
  "Graffito",
  "Grain-bag",
  "Grain-basket",
  "Grain-kiln",
  "Grain-measure",
  "Grain-sieve",
  "Gramophone record",
  "Granary",
  "Grande-sonnerie clock",
  "Graphometer",
  "Grater",
  "Grater-bowl",
  "Grating",
  "Grattoir",
  "Grave-cover",
  "Grave-marker",
  "Grave-post",
  "Gravestone",
  "Gravy-pot",
  "Grease-pot",
  "Greave",
  "Greeting-card",
  "Grid",
  "Griddle",
  "Gridiron",
  "Grinder",
  "Grinding-wheel",
  "Grindstone",
  "Ground-edge piece",
  "Grubber",
  "Gu",
  "Guang",
  "Guarantee",
  "Guard",
  "Guglet",
  "Gui",
  "Guitar",
  "Gun",
  "Gun-case",
  "Gun-flint",
  "Gun-rest",
  "Gunner's calipers",
  "Gunner's compasses",
  "Gunner's key",
  "Gunner's level",
  "Gunner's quadrant",
  "Gunner's square",
  "Gunnery instrument",
  "Gunpowder",
  "Gunpowder-box",
  "Gunpowder-flask",
  "Gunpowder-horn",
  "Gunpowder-scoop",
  "Gunter quadrant",
  "Gusset",
  "Guttus",
  "Habaki",
  "Habb",
  "Hacha",
  "Hacksilver",
  "Hair-band",
  "Hair-brush",
  "Hair-cord",
  "Hair-cover",
  "Hair-curler",
  "Hair-cutter",
  "Hair-net",
  "Hair-ornament",
  "Hair-pad",
  "Hair-piece",
  "Hair-pin",
  "Hair-pin-cover",
  "Hair-ring",
  "Hair-slide",
  "Hair-tube",
  "Halberd",
  "Half-hour-striking clock",
  "Half-hour-striking watch",
  "Half-hunter watch",
  "Half-quarter-repeating clock",
  "Half-quarter-repeating watch",
  "Half-quarter-striking clock",
  "Half-quarter-striking watch",
  "Halter",
  "Hammer",
  "Hammer-cloth-plaque",
  "Hammerstone",
  "Hammock",
  "Hana-ire",
  "Hanap",
  "Hand-adze",
  "Hand-barrow",
  "Hand-bell",
  "Hand-grenade",
  "Hand-guard",
  "Hand-lamp",
  "Hand-mortar",
  "Hand-pin",
  "Hand-screen",
  "Hand-towel",
  "Hand-warmer",
  "Handaxe",
  "Handaxe manufacturing flake",
  "Handbag",
  "Handcuff",
  "Handkerchief",
  "Handkerchief-case",
  "Handle",
  "Handscroll",
  "Hanger",
  "Hanger sword",
  "Hanging",
  "Hanging basket",
  "Hanging bowl",
  "Hanging clock",
  "Hanging flower-vase",
  "Hanging lamp",
  "Hanging scroll",
  "Haniwa",
  "Hanukah lamp",
  "Harmonium",
  "Harness",
  "Harness-fitting",
  "Harp",
  "Harpago",
  "Harpoon",
  "Harpoon-dart",
  "Harpoon-float",
  "Harpoon-gaff",
  "Harpoon-gun",
  "Harpoon-line",
  "Harpoon-line-rest",
  "Harpoon-rest",
  "Harpoon-thrower",
  "Harrow",
  "Harrow-rest",
  "Harvest jug",
  "Hashira",
  "Hashish-pipe",
  "Hasp",
  "Hat",
  "Hat-badge",
  "Hat-band",
  "Hat-cover",
  "Hat-ornament",
  "Hat-pin",
  "Hat-stand",
  "Hatchet",
  "Hauberk",
  "Hawk-bell",
  "Hawk-belt",
  "He",
  "Head-band",
  "Head-cloth",
  "Head-cover",
  "Head-dress",
  "Head-dress-ornament",
  "Head-flattener",
  "Head-gear",
  "Head-guard",
  "Head-net",
  "Head-ornament",
  "Head-pad",
  "Head-piece",
  "Head-rest",
  "Head-ring",
  "Head-rope",
  "Head-scratcher",
  "Head-stick",
  "Head-tie",
  "Head-veil",
  "Headphones",
  "Headscarf",
  "Headstall",
  "Healing-device",
  "Healing-plate",
  "Heart-amulet",
  "Heart-scarab",
  "Hearth",
  "Hearth-fan",
  "Heater",
  "Helicopter",
  "Helmet",
  "Hemp-pipe",
  "Herm",
  "Hermetic watch",
  "Hexatych print",
  "Hieroglyph-mould",
  "Hilt",
  "Hinge",
  "Hip mask",
  "Hippo-sandal",
  "Hobble",
  "Hobby-horse",
  "Hod",
  "Hodometer",
  "Hoe",
  "Holdall",
  "Holder",
  "Holster",
  "Holy water-box",
  "Holy water-pot",
  "Holy water-sprinkler",
  "Holy water-vase",
  "Holy water-vessel",
  "Honey-pot",
  "Honey-spoon",
  "Hongbao",
  "Hood",
  "Hook",
  "Hookah",
  "Hookah-case",
  "Hoop",
  "Horary quadrant",
  "Horizontal dial",
  "Horn-book",
  "Horological equipment",
  "Horological instrument",
  "Horological tool/implement",
  "Hors d'oeuvre-dish",
  "Horse brooch",
  "Horse-and-rider brooch",
  "Horse-armour",
  "Horse-bell",
  "Horse-blanket",
  "Horse-brass",
  "Horse-bridle",
  "Horse-collar",
  "Horse-cover",
  "Horse-harness",
  "Horse-shoe",
  "Horse-trappings",
  "Horse-whip",
  "Hot-plate",
  "Hour-striking clock",
  "Hour-striking watch",
  "House",
  "House-board",
  "House-ornament",
  "House-post",
  "Hsun-ok",
  "Hu",
  "Hub",
  "Huipil",
  "Human remains",
  "Humming-top",
  "Hunter watch",
  "Hunting equipment",
  "Hunting-calendar",
  "Hunting-horn",
  "Hunting-net",
  "Hunting-noose",
  "Hurdling-tool/implement",
  "Hurricane-lamp",
  "Husker",
  "Hydraulic equipment",
  "Hydria",
  "Hydrometer",
  "Hygrometer",
  "Hymn-book",
  "Hypocaust-tile",
  "Hypocephalus",
  "Ice-breaker",
  "Ice-chisel",
  "Ice-hook",
  "Ice-pail",
  "Ice-pick",
  "Ice-saw",
  "Ice-scoop",
  "Ice-scratcher",
  "Icon",
  "Icon-pendant",
  "Ideograph",
  "Illustrated book",
  "Imitation",
  "Impression",
  "Inau",
  "Incantation bowl",
  "Incensario",
  "Incense",
  "Incense equipment",
  "Incense-altar",
  "Incense-boat",
  "Incense-bowl",
  "Incense-box",
  "Incense-burner",
  "Incense-burner-stand",
  "Incense-container",
  "Incense-holder",
  "Incense-jar",
  "Incense-shovel",
  "Incense-spoon",
  "Incense-stand",
  "Incense-tongs",
  "Incense-tool/implement",
  "Incense-vase",
  "Incense-vessel",
  "Incision-plate",
  "Inclined-plane clock",
  "Inclining dial",
  "Independent centre-seconds watch",
  "Ingot",
  "Ingot droplet",
  "Ink",
  "Ink-bottle",
  "Ink-box",
  "Ink-case",
  "Ink-container",
  "Ink-pad",
  "Ink-paste-box",
  "Ink-pot",
  "Ink-screen",
  "Ink-spoon",
  "Ink-stand",
  "Ink-stone",
  "Ink-stone-box",
  "Ink-well",
  "Inking-chronograph watch",
  "Inlay",
  "Inn-sign",
  "Inro",
  "Insect-cage",
  "Insect-repellent",
  "Instrument-box",
  "Instrument-case",
  "Intaglio",
  "Invalid mug",
  "Invitation",
  "Iron-stand",
  "Irrigation equipment",
  "Jacket",
  "Jacot tool",
  "Jam-jar",
  "Jam-pot",
  "Jam-spoon",
  "Jambiyya",
  "Jambiyya-sheath",
  "Japanese clock",
  "Japanese watch",
  "Jar",
  "Jar-cover",
  "Jar-label",
  "Jar-sealing",
  "Jar-stand",
  "Jardiniere",
  "Jarlet",
  "Javelin",
  "Jazeran",
  "Jellaba",
  "Jellabia",
  "Jelly-glass",
  "Jerkin",
  "Jess",
  "Jester's staff",
  "Jetton",
  "Jew's harp",
  "Jew's harp-case",
  "Jewel-gauge",
  "Jewellery",
  "Jewellery-box",
  "Jewellery-case",
  "Jewellery-fitting",
  "Jewellery-making equipment",
  "Jewellery-mould",
  "Jia",
  "Jibbeh",
  "Jingaza",
  "Jingle",
  "Jitte",
  "Jiuling-set",
  "Jiuling-stick",
  "Jiuling-stick-container",
  "Joss-stick",
  "Joss-stick-holder",
  "Ju monji yari",
  "Jue",
  "Jug",
  "Juglet",
  "Jump-hour watch",
  "Jumper",
  "Jumping-weight",
  "Junk",
  "Junket-dish",
  "Juror's ticket",
  "Kabin",
  "Kabuto",
  "Kachina-doll",
  "Kaftan",
  "Kahili",
  "Kain",
  "Kakemono",
  "Kakemono-e",
  "Kalaga",
  "Kalasa",
  "Kalat-tray",
  "Kalathos",
  "Kaleidoscope",
  "Kalpis",
  "Kamandalu",
  "Kanamono",
  "Kandila",
  "Kantha",
  "Kantharoid calyx-krater",
  "Kantharoid cup",
  "Kantharoid-krater",
  "Kantharos",
  "Kapala",
  "Kapkap",
  "Kardiophylax",
  "Kaross",
  "Karttrika",
  "Karussel watch",
  "Kashira",
  "Kashkul",
  "Kataguchi",
  "Katana",
  "Katar",
  "Katar-sheath",
  "Kava-bowl",
  "Kava-cup",
  "Kava-ladle",
  "Kava-strainer",
  "Kayak",
  "Kecer",
  "Kecer-beater",
  "Kedang",
  "Kempul",
  "Kendi",
  "Kendung",
  "Kenong",
  "Kenong-beater",
  "Kensui",
  "Kerchief",
  "Kernos",
  "Kero",
  "Kete",
  "Ketipung",
  "Kettle",
  "Kettle-burner",
  "Kettle-hanger",
  "Kettle-stand",
  "Kettledrum",
  "Key",
  "Key-finger-ring",
  "Key-hanger",
  "Key-ring",
  "Kha-btags",
  "Khanjar",
  "Khatvanga",
  "Khora",
  "Khyber",
  "Khyber-sheath",
  "Kilij",
  "Kilim",
  "Kiln",
  "Kiln debris",
  "Kiln-furniture",
  "Kiln-furniture-mould",
  "Kiln-spacer",
  "Kilt",
  "Kimono",
  "King-list",
  "Kite",
  "Knapping fragment",
  "Knapsack",
  "Knee-guard",
  "Knee-rest",
  "Knee-ring",
  "Knife",
  "Knife-case",
  "Knife-dagger",
  "Knife-holder",
  "Knife-rest",
  "Knife-scraper",
  "Knife-sharpener",
  "Knife-sheath",
  "Knife-spoon",
  "Knight jug",
  "Knitting-needle",
  "Knitting-pin",
  "Knitting-sheath",
  "Knob",
  "Knobkerrie",
  "Knout",
  "Knuckle-bone",
  "Knuckle-duster",
  "Ko",
  "Kodogu",
  "Kogai",
  "Kogatana",
  "Kohl",
  "Kohl-bottle",
  "Kohl-box",
  "Kohl-container",
  "Kohl-jar",
  "Kohl-pot",
  "Kohl-scoop",
  "Kohl-stick",
  "Kohl-tube",
  "Kojiri",
  "Kokyu",
  "Komast cup",
  "Kora",
  "Koran-bag",
  "Koran-board",
  "Koran-case",
  "Koran-rest",
  "Koro",
  "Kosher seal",
  "Koshirae",
  "Kothon",
  "Koto",
  "Kotsuzumi",
  "Kotyle",
  "Kozuka",
  "Krater",
  "Kris",
  "Kris-sheath",
  "Krukowski microburin",
  "Kuchang",
  "Kuduo",
  "Kukri",
  "Kullah",
  "Kundika",
  "Kurikata",
  "Kursi",
  "Kushan-sprinkler-jar",
  "Kuttrolf",
  "Kyathos",
  "Kylix",
  "Kyusu",
  "Label",
  "Lace equipment",
  "Lace-pillow",
  "Lace-pin",
  "Lace-spindle",
  "Lace-stand",
  "Lace-tag",
  "Lacing-ring",
  "Lacrosse-stick",
  "Ladder",
  "Ladle",
  "Lagena",
  "Lagynos",
  "Lahangu",
  "Lamp",
  "Lamp-bracket",
  "Lamp-filler",
  "Lamp-holder",
  "Lamp-hook",
  "Lamp-mould",
  "Lamp-ornament",
  "Lamp-stand",
  "Lance",
  "Lancet",
  "Land vehicle",
  "Landing-net",
  "Lantern",
  "Lantern clock",
  "Lantern slide",
  "Lanx",
  "Lanyard",
  "Lappet",
  "Lariat",
  "Larnax",
  "Lasso",
  "Last",
  "Latch",
  "Latch-key",
  "Latchet",
  "Lathe",
  "Lathi",
  "Latrine",
  "Laver",
  "Law-wheel",
  "Lazy-tongs",
  "Lead",
  "Leaflet",
  "Leather-knife",
  "Leather-stamp",
  "Leban cup",
  "Lebes",
  "Lebes gamikos",
  "Leg-band",
  "Leg-cloth",
  "Leg-ornament",
  "Leg-piece",
  "Leg-plate",
  "Leg-ring",
  "Legging",
  "Leglet",
  "Lei",
  "Lekane",
  "Lekanis",
  "Lekythos",
  "Lemon-squeezer",
  "Lenos",
  "Lens",
  "Lepaste",
  "Letter",
  "Letter-case",
  "Letter-holder",
  "Letter-rack",
  "Letterhead",
  "Levallois core",
  "Levallois flake",
  "Level",
  "Lever",
  "Li",
  "Li ding",
  "Lian",
  "Libation equipment",
  "Libation-bowl",
  "Libation-cup",
  "Libation-jug",
  "Libation-ladle",
  "Libation-stand",
  "Libation-table",
  "Libation-tank",
  "Libation-vase",
  "Libation-vessel",
  "Lid",
  "Ligula",
  "Lime equipment",
  "Lime-bottle",
  "Lime-box",
  "Lime-container",
  "Lime-flask",
  "Lime-pestle",
  "Lime-pot",
  "Lime-pounder",
  "Lime-spatula",
  "Lime-spoon",
  "Lime-vessel",
  "Linch-pin",
  "Line",
  "Linga",
  "Linstock",
  "Lintel",
  "Lip cup",
  "Lip-ornament",
  "Lip-pin",
  "Lip-plate",
  "Lip-plug",
  "Lip-ring",
  "Lipstick",
  "Liqueur-glass",
  "Litter",
  "Liubo-piece",
  "Livery-pot",
  "Load-carrier",
  "Load-rest",
  "Lobster-pot",
  "Lock",
  "Locket",
  "Locket-case",
  "Loin-band",
  "Loin-cloth",
  "Loin-strap",
  "Loin-string",
  "Lon-gyi",
  "Long-case clock",
  "Long-duration clock",
  "Long-duration watch",
  "Loom",
  "Loom-weight",
  "Loop",
  "Lopas",
  "Lorry",
  "Lota",
  "Lottery ticket",
  "Loutrophoros",
  "Louver",
  "Love stick",
  "Love-token",
  "Lozenge-shaped brooch",
  "Lug",
  "Lunar clock",
  "Lunar watch",
  "Lunch-box",
  "Luncheon-plate",
  "Lungi",
  "Lure",
  "Lustre",
  "Lute",
  "Lydion",
  "Lyre",
  "Mace",
  "Macehead",
  "Machete",
  "Machete-sheath",
  "Machine-gun",
  "Magatama",
  "Magazine",
  "Magic bowl",
  "Magic square",
  "Magical brick",
  "Magical disc",
  "Magical medallion",
  "Magical mirror",
  "Magnetic dial",
  "Magnifying-glass",
  "Mahjong-set",
  "Maika-piece",
  "Mail-armour",
  "Mainspring-winder",
  "Makhala",
  "Makimono",
  "Malacate",
  "Mallet",
  "Man-trap",
  "Manacle",
  "Mancala-board",
  "Mancala-piece",
  "Mandala",
  "Mandau",
  "Mandir",
  "Mandolin",
  "Mandrel",
  "Mangling-board",
  "Mani stone",
  "Manicure-set",
  "Manilla",
  "Manioc-grater",
  "Manioc-sifter",
  "Manioc-squeezer",
  "Mano",
  "Manta",
  "Mantel",
  "Mantel clock",
  "Mantelpiece-candlestick",
  "Mantilla",
  "Mantle",
  "Manuscript",
  "Manuscript-folder",
  "Map",
  "Maraca",
  "Marble",
  "Marimba",
  "Marimba-beater",
  "Marine chronometer",
  "Marker",
  "Market weight",
  "Marking-tool",
  "Marlinspike",
  "Marriage equipment",
  "Marrow-spoon",
  "Marsupial-trap",
  "Martingale",
  "Mascara-pouch",
  "Masher",
  "Mask",
  "Mask-mould",
  "Masonic watch",
  "Masquerade-costume",
  "Mass-bell",
  "Mastoid cup",
  "Mastos",
  "Mat",
  "Mat-roller",
  "Matape",
  "Match",
  "Match-box",
  "Match-box-holder",
  "Match-extinguisher",
  "Mathematical instrument",
  "Matrix",
  "Mattock",
  "Mattress",
  "Mattress-cover",
  "Mat�-strainer",
  "Maul",
  "Mazer bowl",
  "Mazer cup",
  "Mead-glass",
  "Measure",
  "Measuring-cup",
  "Measuring-glass",
  "Measuring-rod",
  "Measuring-vessel",
  "Meat-dish",
  "Meat-fork",
  "Meat-hook",
  "Meat-jar",
  "Meat-knife",
  "Meat-plate",
  "Mechanical dial",
  "Medal",
  "Medal engraving",
  "Medal-mould",
  "Medallion",
  "Medallion-mould",
  "Medical instrument",
  "Medical/medicine equipment",
  "Medicine",
  "Medicine-bag",
  "Medicine-bottle",
  "Medicine-box",
  "Medicine-horn",
  "Medley",
  "Megaphone",
  "Mei ping",
  "Membership-card",
  "Membership-ticket",
  "Memento mori",
  "Memorial board",
  "Memorial post",
  "Memorial tablet",
  "Memory board",
  "Menat",
  "Menpo",
  "Menu",
  "Menu-holder",
  "Menuki",
  "Merchant's mark",
  "Merlon",
  "Message",
  "Message disc",
  "Message stick",
  "Metallophone",
  "Metate",
  "Meteorite",
  "Mether",
  "Metope",
  "Metronome",
  "Metronome-watch",
  "Mezuzah",
  "Microburin",
  "Microdenticulate",
  "Microlith",
  "Microphone",
  "Microscope-slide",
  "Milagro",
  "Milk-bottle",
  "Milk-bowl",
  "Milk-container",
  "Milk-cup",
  "Milk-jug",
  "Milk-pail",
  "Milk-pot",
  "Milk-vessel",
  "Milking-can",
  "Milking-jug",
  "Milking-pail",
  "Milking-pot",
  "Mill",
  "Millstone",
  "Miniature",
  "Minute-repeating watch",
  "Mirror",
  "Mirror-case",
  "Mirror-frame",
  "Mirror-stand",
  "Missile",
  "Mitra",
  "Mitre-pendant",
  "Mitten",
  "Mixer",
  "Mixing-basin",
  "Mizusashi",
  "Moccasin",
  "Model",
  "Model building/structure",
  "Model group",
  "Model-fitting",
  "Modelling-tool/implement",
  "Modern cartoon",
  "Mola",
  "Molar flask",
  "Molcajete",
  "Money-belt",
  "Money-box",
  "Monkey-scare",
  "Monkey-trap",
  "Monstrance",
  "Monstrance clock",
  "Month-going clock",
  "Month-going watch",
  "Monument",
  "Monumental brass",
  "Monumental cross",
  "Monumental inscription",
  "Monumental stone",
  "Moon-flask",
  "Moondial",
  "Moose-call",
  "Mop",
  "Morion",
  "Morral",
  "Morse",
  "Mortar",
  "Mortar-spreader",
  "Mortar-stand",
  "Mortarium",
  "Mortuary cross",
  "Mortuary sword",
  "Mosaic",
  "Mosque-lamp",
  "Motor bicycle",
  "Motor bus",
  "Motor car",
  "Motor truck",
  "Mould",
  "Moulding",
  "Mount",
  "Mourning-locket",
  "Mourning-ring",
  "Mouse-trap",
  "Moustache-stick",
  "Mouth-organ",
  "Mouth-organ-case",
  "Mouth-piece",
  "Muff",
  "Muffin-dish",
  "Mug",
  "Mukluk",
  "Mule-blanket",
  "Mule-harness",
  "Mule-trappings",
  "Multi-time watch",
  "Multiple vase",
  "Mummy",
  "Mummy-board",
  "Mummy-brace",
  "Mummy-button",
  "Mummy-case",
  "Mummy-cloth",
  "Mummy-cover",
  "Mummy-label",
  "Mummy-mask",
  "Mummy-packing",
  "Mummy-portrait",
  "Mummy-wrapping",
  "Muneate",
  "Mural quadrant",
  "Mushroom stone",
  "Music equipment",
  "Music-book",
  "Music-cover",
  "Musical beater",
  "Musical bow",
  "Musical box",
  "Musical clock",
  "Musical horn",
  "Musical instrument",
  "Musical instrument-bow",
  "Musical instrument-case",
  "Musical pipe",
  "Musical rasp",
  "Musical rocket",
  "Musical scratcher",
  "Musical seal",
  "Musical watch",
  "Musket",
  "Musket-ball",
  "Mustard-pot",
  "Mustard-shaker",
  "Mustard-spoon",
  "Muzzle",
  "Mystery clock",
  "Naginata",
  "Naginata-sheath",
  "Nail",
  "Nail-cleaner",
  "Nail-cutter",
  "Nail-file",
  "Nail-lifter",
  "Naiskos",
  "Name-bead",
  "Name-bead-mould",
  "Name-dial watch",
  "Naos",
  "Napier bones",
  "Napkin",
  "Napkin-ring",
  "Nargileh",
  "Natron-bag",
  "Nature print",
  "Naukratic figure",
  "Neck-amphora",
  "Neck-band",
  "Neck-cord",
  "Neck-cover",
  "Neck-ornament",
  "Neck-piece",
  "Neck-rest",
  "Neck-ring",
  "Neck-tie",
  "Neckerchief",
  "Necklace",
  "Necklet",
  "Needle",
  "Needle-box",
  "Needle-case",
  "Needle-holder",
  "Needle-weight",
  "Needlework equipment",
  "Nef",
  "Nest",
  "Nestoris",
  "Net",
  "Net-float",
  "Net-gauge",
  "Net-sinker",
  "Net-weight",
  "Netbag",
  "Netsuke",
  "Netting-needle",
  "Netting-shuttle",
  "New year-card",
  "New year-flask",
  "New year-print",
  "Newspaper",
  "Niche",
  "Nicotine-flask",
  "Niello plate",
  "Niello print",
  "Night clock",
  "Night-light",
  "Nocturnal",
  "Noose",
  "Nose-bag",
  "Nose-band",
  "Nose-cleaner",
  "Nose-clip",
  "Nose-ornament",
  "Nose-pin",
  "Nose-plug",
  "Nose-ring",
  "Nose-stud",
  "Notch",
  "Notched bladelet",
  "Notebook",
  "Notice-board",
  "Novelty clock",
  "Novelty watch",
  "Nozzle",
  "Numerical table",
  "Nut",
  "Nut-cracker",
  "Nut-cutter",
  "Nutmeg-grater",
  "Nutmeg-rasp",
  "N�cessaire",
  "Oar",
  "Obelisk",
  "Obi",
  "Oboe",
  "Ocarina",
  "Oculist's stamp",
  "Offering",
  "Offering equipment",
  "Offering-basket",
  "Offering-bowl",
  "Offering-box",
  "Offering-cup",
  "Offering-dish",
  "Offering-jar",
  "Offering-plate",
  "Offering-stand",
  "Offering-table",
  "Offering-tank",
  "Offering-tray",
  "Offering-tray-holder",
  "Offering-vase",
  "Offering-vessel",
  "Offertory",
  "Offset",
  "Ognion watch",
  "Oil clock",
  "Oil-bottle",
  "Oil-can",
  "Oil-container",
  "Oil-dish",
  "Oil-flask",
  "Oil-funnel",
  "Oil-jar",
  "Oil-jug",
  "Oil-lamp",
  "Oil-press",
  "Oil-vessel",
  "Oilskin",
  "Oinochoe",
  "Ointment",
  "Ointment-pot",
  "Ointment-spoon",
  "Ojime",
  "Okimono",
  "Oliphant",
  "Olive-jar",
  "Olla",
  "Olpe",
  "Omphalos",
  "Openwork brooch",
  "Opium equipment",
  "Opium-box",
  "Opium-jug",
  "Opium-pipe",
  "Opium-pipe-cleaner",
  "Opium-spoon",
  "Optical instrument",
  "Oracle-bone",
  "Oracle-set",
  "Oracle-shell",
  "Orange-tub",
  "Organ",
  "Organ clock",
  "Ornament",
  "Ornament print",
  "Ornament-mould",
  "Oscillum",
  "Osmund",
  "Ossuary",
  "Ostracon",
  "Otsu-e",
  "Oval brooch",
  "Oven",
  "Overall",
  "Overcoat",
  "Overdress",
  "Overgarment",
  "Overgown",
  "Overskirt",
  "Overtrousers",
  "Owl brooch",
  "Owl jug",
  "Ox-cover",
  "Ox-shoe",
  "Ox-trappings",
  "Paccha",
  "Pachedi",
  "Pack",
  "Pack-saddle",
  "Pad",
  "Paddle",
  "Paddle doll",
  "Padlock",
  "Paduk-board",
  "Paduka",
  "Paijiu",
  "Pail",
  "Paint",
  "Paint-box",
  "Paint-brush",
  "Paint-grinder",
  "Paint-mixer",
  "Paint-pot",
  "Paint-roller",
  "Paint-stone",
  "Paint-tin",
  "Painting",
  "Palanquin",
  "Palette",
  "Palimpsest",
  "Pall",
  "Pall-mall-ball",
  "Pall-mall-stick",
  "Palm cup",
  "Palstave",
  "Pamphlet",
  "Pan",
  "Pan (ritual)",
  "Pan-pipes",
  "Panathenaic amphora",
  "Pancheon",
  "Pandan",
  "Panel",
  "Panji",
  "Panji-holder",
  "Pannier",
  "Pantaloons",
  "Paper-knife",
  "Paper-sheet",
  "Paper-weight",
  "Paper-weight clock",
  "Papercut",
  "Paperwork",
  "Papoose-carrier",
  "Papyrus",
  "Papyrus-binding",
  "Papyrus-burnisher",
  "Papyrus-sealing",
  "Parabaik",
  "Parang",
  "Parang-sheath",
  "Parasol",
  "Parchment",
  "Parchment-clip",
  "Parfleche",
  "Parka",
  "Parry-shield",
  "Partizan",
  "Parure",
  "Passport",
  "Passport-holder",
  "Paste print",
  "Pastille-burner",
  "Pastry-cutter",
  "Pastry-wheel",
  "Pata",
  "Patch",
  "Patch-box",
  "Patella",
  "Paten",
  "Patera",
  "Patta",
  "Pattern",
  "Pattern-board",
  "Pattern-book",
  "Pattern-sheet",
  "Pattypan",
  "Pau",
  "Pauldron",
  "Pavement",
  "Pavise",
  "Pax",
  "Pa�ca-p�tra",
  "Pectoral",
  "Pectoral cross",
  "Pedestal",
  "Pedestal beaker",
  "Pedestal vase",
  "Pediment",
  "Pedometer",
  "Pedometer watch",
  "Peeler",
  "Peerman",
  "Peg",
  "Peg-board",
  "Pegall",
  "Pelike",
  "Pellet",
  "Pellet bow",
  "Pelt-stretcher",
  "Pen",
  "Pen-box",
  "Pen-case",
  "Pen-cutter",
  "Pen-holder",
  "Pen-tray",
  "Penannular brooch",
  "Penannular ear-ring",
  "Pencil",
  "Pencil-case",
  "Pencil-holder",
  "Pencil-rest",
  "Pendant",
  "Pendant-case",
  "Pendant-mould",
  "Pendulum watch",
  "Penis-ornament",
  "Penis-ring",
  "Penis-sheath",
  "Penitential chain",
  "Penjing",
  "Penknife",
  "Pennant",
  "Pentatych print",
  "Pepper-mill",
  "Pepper-pot",
  "Perch",
  "Percussion board",
  "Perforator",
  "Perfume",
  "Perfume-bottle",
  "Perfume-flask",
  "Perfume-holder",
  "Perfume-jar",
  "Perfume-pot",
  "Perfume-spray",
  "Perfume-sprinkler",
  "Perfume-vase",
  "Permit",
  "Perpetual calendar",
  "Perraje",
  "Personal accessory",
  "Perspective view",
  "Pestle",
  "Petite-sonnerie clock",
  "Petral",
  "Petroglyph",
  "Petticoat",
  "Phakometer",
  "Phalera",
  "Phial",
  "Phiale",
  "Phiale mesomphalos",
  "Photograph",
  "Photograph-album",
  "Phrenological chart",
  "Phrenological skull",
  "Phur-bu",
  "Phylactery",
  "Phylactery-pouch",
  "Piano-candlestick",
  "Pichwai",
  "Pick",
  "Pick-axe",
  "Pick-hammer",
  "Picket",
  "Pickle-dish",
  "Pickle-fork",
  "Pickle-tray",
  "Picnic-box",
  "Picnic-set",
  "Picture",
  "Picture-frame",
  "Pie-dish",
  "Pier",
  "Piercer",
  "Pig-rope",
  "Pig-trap",
  "Pigment",
  "Pigment-container",
  "Pigtail",
  "Pike",
  "Pilaster",
  "Pilaster-capital",
  "Pile",
  "Pilgrim-badge",
  "Pilgrim-bell",
  "Pilgrim-bottle",
  "Pilgrim-flask",
  "Pilgrim-token",
  "Pill",
  "Pill-box",
  "Pill-slab",
  "Pillar",
  "Pillar clock",
  "Pillar dial",
  "Pillow",
  "Pillow-case",
  "Pillow-cover",
  "Pin",
  "Pin beater",
  "Pin cushion",
  "Pin-case",
  "Pin-holder",
  "Pin-sharpener",
  "Pinax",
  "Pincer-headed brooch",
  "Pincers",
  "Pintle",
  "Pipe",
  "Pipkin",
  "Pirn",
  "Pistol",
  "Piston",
  "Pitcher",
  "Pitcher-mould",
  "Pitchfork",
  "Pithos",
  "Pivot",
  "Pizhi",
  "Pi�ce esquill�e",
  "Place-mat",
  "Plait",
  "Plaiting-stick",
  "Plan",
  "Plane",
  "Planisphere",
  "Plank",
  "Plant-pot",
  "Plaque",
  "Plaque-mould",
  "Plaquette",
  "Plaster-smoother",
  "Plastron",
  "Plate",
  "Plate brooch",
  "Plate clock",
  "Plate-case",
  "Plate-holder",
  "Plateau",
  "Platter",
  "Play-bill",
  "Playing-card",
  "Playing-card-box",
  "Playing-card-case",
  "Playing-card-holder",
  "Pleating-tool/implement",
  "Plectrum",
  "Plemochoe",
  "Pliers",
  "Plinth",
  "Plough",
  "Plug",
  "Plumb-bob",
  "Plume",
  "Plume-case",
  "Plume-holder",
  "Plunge basket",
  "Plunger",
  "Pocket",
  "Pocket chronometer",
  "Pocket-altimeter",
  "Pocket-belt",
  "Pocket-book",
  "Pocket-comb",
  "Poculum",
  "Podanipter",
  "Poi-ball",
  "Poignard",
  "Point",
  "Pointer",
  "Pointing bone",
  "Pointing stick",
  "Poising tool",
  "Poison",
  "Pojagi",
  "Poker",
  "Pole",
  "Pole-arm",
  "Pole-axe",
  "Pole-cover",
  "Poleyn",
  "Polisher",
  "Polissoir",
  "Polo-ball",
  "Polo-stick",
  "Polos",
  "Polycandelon",
  "Polyhedral dial",
  "Polyptych",
  "Polyptych print",
  "Pomander",
  "Pommel",
  "Ponchito",
  "Poncho",
  "Pop-gun",
  "Pope joan board",
  "Popular print",
  "Porringer",
  "Port-glass",
  "Portfolio",
  "Portrait bust",
  "Portrait head",
  "Posset-cup",
  "Posset-pot",
  "Post",
  "Postage-stamp",
  "Postcard",
  "Poster",
  "Posy ring",
  "Pot",
  "Pot helmet",
  "Pot-boiler",
  "Pot-carrier",
  "Pot-cover",
  "Pot-hanger",
  "Pot-holder",
  "Pot-hook",
  "Pot-pourri-vase",
  "Pot-stand",
  "Potter's stamp",
  "Potter's wheel",
  "Pottery-making equipment",
  "Pou",
  "Pouch",
  "Pouch bottle",
  "Pouch-fitting",
  "Poulter's token",
  "Pounce-pot",
  "Pounder",
  "Pourer",
  "Powder",
  "Powder-box",
  "Prawn-basket",
  "Prawn-trap",
  "Prayer-bead",
  "Prayer-block",
  "Prayer-board",
  "Prayer-book",
  "Prayer-book-case",
  "Prayer-book-cover",
  "Prayer-box",
  "Prayer-cap",
  "Prayer-carpet",
  "Prayer-cloth",
  "Prayer-flag",
  "Prayer-mat",
  "Prayer-scarf",
  "Prayer-scroll",
  "Prayer-shawl",
  "Prayer-stick",
  "Prayer-stone",
  "Prayer-tablet",
  "Prayer-wheel",
  "Preacher's plate",
  "Presentation-box",
  "Preserve-dish",
  "Press",
  "Prick-spur",
  "Pricker",
  "Pricket",
  "Primer",
  "Priming-flask",
  "Priming-horn",
  "Print",
  "Print study",
  "Printing equipment",
  "Printing-block",
  "Printing-board",
  "Printing-frame",
  "Printing-matrix",
  "Printing-pattern",
  "Printing-plate",
  "Printing-stamp",
  "Prism",
  "Probe",
  "Processional cross",
  "Prochoos",
  "Proclamation",
  "Proefericulum",
  "Programme",
  "Projectile",
  "Projectile point",
  "Prong",
  "Proof",
  "Prospectus",
  "Prototype",
  "Protractor",
  "Pruning-hook",
  "Pruning-knife",
  "Pseudo-coin",
  "Pseudo-coin brooch",
  "Pseudo-coin pendant",
  "Pseudo-penannular brooch",
  "Psykter",
  "Psykter-amphora",
  "Pubic-cover",
  "Pubic-ornament",
  "Pudding-dish",
  "Pudding-knife",
  "Pudding-plate",
  "Pudding-spoon",
  "Pugilistic ring",
  "Pull-wind watch",
  "Pulley",
  "Pumice-stone",
  "Pump",
  "Pump drill",
  "Punch",
  "Punch-bowl",
  "Punch-chisel",
  "Punch-kettle",
  "Punch-ladle",
  "Punch-lifter",
  "Punch-pot",
  "Punch-set",
  "Punt-pole",
  "Puppet",
  "Puritan watch",
  "Purse",
  "Puttee",
  "Puzzle",
  "Puzzle-cup",
  "Puzzle-jug",
  "Puzzle-picture",
  "Puzzle-pot",
  "Puzzle-ring",
  "Puzzle-tyg",
  "Pyjamas",
  "Pyramid-casing",
  "Pyramidion",
  "Pyriform jar",
  "Pyx",
  "Pyxis",
  "P�gau",
  "Qadus",
  "Qalamdan",
  "Qaly�n",
  "Qilich",
  "Quadrant",
  "Quaich",
  "Quarrel",
  "Quarter-chiming clock",
  "Quarter-repeating clock",
  "Quarter-repeating watch",
  "Quarter-striking clock",
  "Quarter-striking watch",
  "Quatrefoil",
  "Quatrefoil brooch",
  "Quern",
  "Quill pen",
  "Quilt",
  "Quilt-cover",
  "Quipu",
  "Quirt",
  "Quiver",
  "Quiver-stand",
  "Quizzing-glass",
  "Qumqum",
  "Quoit",
  "Quoit brooch",
  "Rabob",
  "Racecourse-ticket",
  "Rack",
  "Rack clock",
  "Radiate-headed brooch",
  "Radio",
  "Radio-case",
  "Radio-cassette-player",
  "Radio-watch",
  "Raft",
  "Rag doll",
  "Railing",
  "Rain-cape",
  "Rain-guard",
  "Rain-hat",
  "Raincoat",
  "Rainwater-spout",
  "Rake",
  "Ramdao",
  "Ramp",
  "Ramrod",
  "Rangel",
  "Rapier",
  "Rasp",
  "Rat-trap",
  "Ratha",
  "Rattle",
  "Rattle-staff",
  "Razor",
  "Razor-case",
  "Razor-knife",
  "Reamer",
  "Reaper",
  "Reaping-hook",
  "Rebab",
  "Rebab-bow",
  "Rebab-stand",
  "Rebec",
  "Rebec-bow",
  "Rebozo",
  "Receipt",
  "Recorder",
  "Rectal speculum",
  "Rectilinear dial",
  "Reed pen",
  "Reed-shaper",
  "Reel",
  "Reeler",
  "Reeling-frame",
  "Reflector",
  "Refracting telescope",
  "Refreshment-ticket",
  "Regulator",
  "Rein",
  "Rein-holder",
  "Reindeer-bridle",
  "Reindeer-call",
  "Rejuvenating-device",
  "Relic",
  "Relic-box",
  "Relic-cloth",
  "Relief",
  "Religious/ritual vessel",
  "Reliquary",
  "Reliquary-box",
  "Reliquary-case",
  "Reliquary-cross",
  "Relish-tray",
  "Reneti",
  "Repeating clock",
  "Repeating watch",
  "Repeating-mechanism",
  "Replica",
  "Reproduction",
  "Rest",
  "Retort",
  "Retouched blade",
  "Retouched flake",
  "Retouched piece",
  "Retoucher",
  "Revetment",
  "Revetment plaque",
  "Rhyton",
  "Ribbon",
  "Rice-bin",
  "Rice-bowl",
  "Rice-paddle",
  "Rickshaw",
  "Rickshaw-panel",
  "Ridge-pole",
  "Ridge-tile",
  "Riding-boot",
  "Riding-crop",
  "Rifle",
  "Rifle-case",
  "Rim-clip",
  "Rim-mount",
  "Ring",
  "Ring brooch",
  "Ring-dial",
  "Ring-gold",
  "Ring-money",
  "Ring-stand",
  "Ring-stone",
  "Ring-watch",
  "Ringed pin",
  "Ritual flail",
  "Ritual jade",
  "Rivet",
  "Roach",
  "Roach-spreader",
  "Robe",
  "Rocker",
  "Rocket",
  "Rod",
  "Rodillera",
  "Roller",
  "Roller-stamp",
  "Rolling-ball clock",
  "Rolling-board",
  "Rolling-pin",
  "Roof",
  "Roof-brick",
  "Roof-finial",
  "Roof-ornament",
  "Roof-prop",
  "Roof-shingle",
  "Roof-tile",
  "Rope",
  "Rope ladder",
  "Rosary",
  "Rosette brooch",
  "Rosette-mould",
  "Rosewater-dish",
  "Rosewater-flask",
  "Rosewater-sprinkler",
  "Rotary watch",
  "Rouge",
  "Roughout",
  "Roulette",
  "Roundel",
  "Rove",
  "Rowel-spur",
  "Rubber",
  "Rubbing",
  "Rucksack",
  "Ruff",
  "Rug",
  "Rui-chhen bardar-ru",
  "Rule",
  "Rum-decanter",
  "Rumal",
  "Rummer",
  "Rupu",
  "Rush-light-holder",
  "Ruyi",
  "S-brooch",
  "Sabaton",
  "Sabot",
  "Sabre",
  "Sabre-sheath",
  "Sachet",
  "Sack",
  "Sacred bundle",
  "Sacrificial knife",
  "Sacrificial offering",
  "Sacrificial strainer",
  "Saddle",
  "Saddle-bag",
  "Saddle-blanket",
  "Saddle-cloth",
  "Saddle-cover",
  "Saddle-cushion",
  "Saddle-steel",
  "Sade",
  "Safety-pin",
  "Safety-pin brooch",
  "Sagemono",
  "Saggar",
  "Sago-pounder",
  "Sail",
  "Sake-bottle",
  "Sake-bowl",
  "Sake-carrier",
  "Sake-cup",
  "Salad-dish",
  "Salad-plate",
  "Sallet",
  "Salt",
  "Salt-bag",
  "Salt-cellar",
  "Salt-container",
  "Salt-jar",
  "Salt-shaker",
  "Salver",
  "Samayac",
  "Sambal-jar",
  "Samisen",
  "Sampan",
  "Sample core",
  "Sampler",
  "Sanctuary-lamp",
  "Sand-glass",
  "Sand-holder",
  "Sand-sprinkler",
  "Sandal",
  "Sandpaper",
  "Sansa",
  "Sanzu fu",
  "Sara",
  "Sarcophagus",
  "Sari",
  "Saron",
  "Saron-beater",
  "Sarong",
  "Sash",
  "Satchel",
  "Satirical print",
  "Sauce-boat",
  "Saucepan",
  "Saucer",
  "Saucer brooch",
  "Saucer lamp",
  "Saucer-dish",
  "Saw",
  "Sax",
  "Sax-sheath",
  "Scalpel",
  "Scaphe-dial",
  "Scapular",
  "Scarab",
  "Scarab-mould",
  "Scaraboid",
  "Scaraboid-mould",
  "Scare",
  "Scare-devil",
  "Scarecrow",
  "Scarf",
  "Scarf-pin",
  "Scarificator",
  "Scenery",
  "Scent-fountain",
  "Sceptre",
  "Schnabel brooch",
  "Schnapps-glass",
  "Scientific instrument",
  "Scimitar",
  "Scissors",
  "Scissors-case",
  "Scold's bridle",
  "Sconce",
  "Scoop",
  "Scourer",
  "Scourge",
  "Scouring-brush",
  "Scraper",
  "Scratcher",
  "Screen",
  "Screw",
  "Screw-cutter",
  "Screw-polisher",
  "Screwdriver",
  "Scribal instrument-case",
  "Scribal palette",
  "Scrimshaw",
  "Scroll",
  "Scroll-case",
  "Scroll-cover",
  "Scroll-stand",
  "Scroll-weight",
  "Scrubber",
  "Scrubbing-brush",
  "Scythe",
  "Seal",
  "Seal-box",
  "Seal-case",
  "Seal-drag",
  "Seal-hook",
  "Seal-impression",
  "Seal-indicator",
  "Seal-lock",
  "Seal-matrix",
  "Seal-pendant",
  "Seal-red-box",
  "Seal-ring",
  "Sealing",
  "Sealing-tongs",
  "Sealstone",
  "Seam-creaser",
  "Seam-smoother",
  "Seat",
  "Seat-cover",
  "Seax",
  "Seax-sheath",
  "Sector",
  "Sedan-chair clock",
  "Sedan-chair watch",
  "Seed-grinder",
  "Self-winding watch",
  "Semi-cylindrical brooch",
  "Seppa",
  "Sequin",
  "Serape",
  "Serial",
  "Sermon-timer",
  "Servilleta",
  "Serving-fork",
  "Serving-spoon",
  "Set square",
  "Sewing-box",
  "Sewing-kit",
  "Sex-aid",
  "Sextant",
  "Sgra-snyan",
  "Shabti",
  "Shabti-box",
  "Shabti-mould",
  "Shackle",
  "Shadow puppet",
  "Shadow-box",
  "Shaft",
  "Shampoo",
  "Shamsa",
  "Shamshir",
  "Shank",
  "Shanmudra",
  "Shaping-board",
  "Shark-rattle",
  "Sharpener",
  "Shaving-bowl",
  "Shawl",
  "Shawl-pin",
  "Shawm",
  "Shears",
  "Sheath",
  "Sheath-cover",
  "Sheep-bell",
  "Sheep-shears",
  "Shelf",
  "Shelf clock",
  "Shell-purse",
  "Shelter",
  "Sherbet-cup",
  "Sherbet-glass",
  "Sherry-glass",
  "Shield",
  "Shield-ornament",
  "Shield-strengthener",
  "Shift",
  "Shikishi",
  "Shin-guard",
  "Shini-e",
  "Ship",
  "Shirazaya",
  "Shirt",
  "Shirt-dress",
  "Shirt-front",
  "Sho",
  "Shoe",
  "Shoe-brush",
  "Shoe-buckle",
  "Shoe-cover",
  "Shoe-horn",
  "Shooting-stick",
  "Shophar",
  "Shopping-basket",
  "Short sword",
  "Short sword-sheath",
  "Shorts",
  "Shot",
  "Shoulder-bag",
  "Shoulder-boss urn",
  "Shoulder-clasp",
  "Shoulder-cloth",
  "Shoulder-garment",
  "Shoulder-piece",
  "Shovel",
  "Show-card",
  "Shredder",
  "Shrimp-trap",
  "Shrine",
  "Shrine-case",
  "Shrine-cloth",
  "Shrine-vase",
  "Shroud",
  "Shroud-weight",
  "Shunga",
  "Shuttle",
  "Shuttle-case",
  "Shuttlecock",
  "Siana cup",
  "Sickle",
  "Sickle-holder",
  "Sidereal clock",
  "Sieve",
  "Sieve-holder",
  "Sifter",
  "Sign-board",
  "Signet-ring",
  "Silhouette",
  "Silp'ae",
  "Sima",
  "Simpulum",
  "Sinew-twister",
  "Singlestick",
  "Sinical quadrant",
  "Sinker",
  "Siphon",
  "Sistrum",
  "Sitar",
  "Siter",
  "Situla",
  "Situla-fitting",
  "Situla-stand",
  "Skate",
  "Skein-winder",
  "Skeiner",
  "Skeleton clock",
  "Skeletonised watch",
  "Sketch-book",
  "Skeuomorph",
  "Skewer",
  "Ski",
  "Ski-stick",
  "Skidoo",
  "Skillet",
  "Skimmer",
  "Skirt",
  "Skull watch",
  "Skull-cap",
  "Skull-cup",
  "Skull-rack",
  "Skyphoid bowl",
  "Skyphoid cup",
  "Skyphos",
  "Slab",
  "Slag",
  "Slat",
  "Sledge",
  "Sledge-hammer",
  "Sleeping-bag",
  "Sleeping-mat",
  "Sleeve",
  "Sleeve-weight",
  "Slenthem",
  "Slenthem-beater",
  "Slicer",
  "Slide rule",
  "Sling",
  "Sling-shot",
  "Slip",
  "Slipper",
  "Slit-drum",
  "Slop-basin",
  "Small-long brooch",
  "Smock",
  "Smoking equipment",
  "Smoking-pipe",
  "Smoking-pipe-bag",
  "Smoking-pipe-box",
  "Smoking-pipe-case",
  "Smoking-pipe-cleaner",
  "Smoking-pipe-cover",
  "Smoking-pipe-holder",
  "Smoking-pipe-pin",
  "Smoking-pipe-scraper",
  "Smoking-pipe-spoon",
  "Smoking-pipe-stopper",
  "Smoking-pipe-tamper",
  "Smoother",
  "Smoothing iron",
  "Snaffle",
  "Snail-pick",
  "Snake-stick",
  "Snake-trap",
  "Snare",
  "Snarling iron",
  "Snow-goggles",
  "Snow-knife",
  "Snow-mobile",
  "Snow-scraper",
  "Snow-shoe",
  "Snow-shovel",
  "Snow-spade",
  "Snow-spectacles",
  "Snuff",
  "Snuff equipment",
  "Snuff-applicator",
  "Snuff-bag",
  "Snuff-bottle",
  "Snuff-box",
  "Snuff-container",
  "Snuff-flask",
  "Snuff-funnel",
  "Snuff-grater",
  "Snuff-grinder",
  "Snuff-inhaler",
  "Snuff-jar",
  "Snuff-ladle",
  "Snuff-mortar",
  "Snuff-pestle",
  "Snuff-rasp",
  "Snuff-saucer",
  "Snuff-spoon",
  "Snuff-tray",
  "Snuff-vessel",
  "Snuffer",
  "Snuffer-stand",
  "Soap",
  "Soap-carrier",
  "Soba-cup",
  "Sock",
  "Socket",
  "Sode",
  "Solar-sidereal watch",
  "Songsheet",
  "Soul-catcher",
  "Soup-bowl",
  "Soup-container",
  "Soup-cup",
  "Soup-ladle",
  "Soup-plate",
  "Soup-spoon",
  "Soup-tureen",
  "Souscription watch",
  "Souvenir",
  "Sower",
  "Spacer",
  "Spacer-bar",
  "Spacer-bead",
  "Spacer-plate",
  "Spade",
  "Spall",
  "Spandrel",
  "Spatha",
  "Spatula",
  "Speaking clock",
  "Spear",
  "Spear-guard",
  "Spear-gun",
  "Spear-head",
  "Spear-rest",
  "Spear-straightener",
  "Spear-thrower",
  "Spectacle idol",
  "Spectacles",
  "Spectacles-case",
  "Spice-box",
  "Spice-jar",
  "Spike",
  "Spill",
  "Spill-vase",
  "Spindle",
  "Spindle-whorl",
  "Spinning equipment",
  "Spinning-frame",
  "Spinning-strap",
  "Spinning-tool/implement",
  "Spinning-top",
  "Spinning-wheel",
  "Spirit-catcher",
  "Spirit-lamp",
  "Spit",
  "Spittoon",
  "Split-seconds chronograph",
  "Splitter",
  "Spokeshave",
  "Sponge",
  "Sponge finger stone",
  "Spontoon",
  "Spool",
  "Spoon",
  "Spoon-case",
  "Spoon-holder",
  "Spoon-mould",
  "Spoon-rack",
  "Spoon-tray",
  "Spoon-warmer",
  "Spout",
  "Spray",
  "Spring",
  "Spring balance",
  "Spring-driven clock",
  "Spring-reel",
  "Sprinkler",
  "Sprossen brooch",
  "Spud",
  "Spur",
  "Spur-guard",
  "Spy-glass",
  "Square",
  "Square-headed brooch",
  "Squat jar",
  "Squat lekythos",
  "Squeezer",
  "Squid-lure",
  "Squirrel-trap",
  "Squirt-ring",
  "Sruva",
  "Stackfreed clock",
  "Stackfreed watch",
  "Staff",
  "Staff god",
  "Stair",
  "Stair-riser",
  "Stake",
  "Stalactite",
  "Stalagmite",
  "Stall-plate",
  "Stamnos",
  "Stamp",
  "Stamp-cylinder seal",
  "Stamp-ring",
  "Stamp-seal",
  "Stamping tube",
  "Stand",
  "Stand clock",
  "Stand-fitting",
  "Standard",
  "Standard-holder",
  "Standing cup",
  "Standing stone",
  "Stangenglas",
  "Staple",
  "Star wheel",
  "Statue",
  "Statuette",
  "Stave",
  "Stays",
  "Steamer",
  "Steaming-basket",
  "Steelyard",
  "Steelyard-case",
  "Steelyard-weight",
  "Steeple-cup",
  "Stela",
  "Stela-stand",
  "Stele",
  "Stem cup",
  "Stemless cup",
  "Stemmed beaker",
  "Stemmed dish",
  "Stencil",
  "Step",
  "Step-ladder",
  "Stick",
  "Sticker",
  "Stiletto",
  "Still",
  "Stilt",
  "Stirrer",
  "Stirrup",
  "Stirrup cup",
  "Stirrup jar",
  "Stirrup jug",
  "Stockade",
  "Stocking",
  "Stocks",
  "Stole",
  "Stomacher",
  "Stone-chisel",
  "Stool",
  "Stop-watch",
  "Stopcock",
  "Stopper",
  "Storage-bag",
  "Storage-basket",
  "Storage-jar",
  "Storage-vessel",
  "Store-house",
  "Story-knife",
  "Storyboard",
  "Stoup",
  "Stove",
  "Stove-tile",
  "Straight-edge",
  "Straightener",
  "Strainer",
  "Strap",
  "Strap-fitting",
  "Strap-fitting-blank",
  "Straw-press",
  "Straw-splitter",
  "Streamer",
  "Stretcher",
  "Strigil",
  "Strigil-ring",
  "Strike-a-light",
  "Striking clock",
  "Striking watch",
  "String",
  "String-winder",
  "Stripper",
  "Strong-box",
  "Strop",
  "Stud",
  "Stump-cover",
  "Stupa",
  "Stupa-finial",
  "Stylus",
  "Stylus-case",
  "Sugar-basin",
  "Sugar-bowl",
  "Sugar-box",
  "Sugar-jar",
  "Sugar-shaker",
  "Sugar-tongs",
  "Sugoroku",
  "Suit",
  "Suiteki",
  "Suling-stand",
  "Sulphur print",
  "Sumpitan",
  "Sun-and-moon watch",
  "Sun-hat",
  "Sun-screen",
  "Sundial",
  "Sundial watch",
  "Sunrise/sunset watch",
  "Sunshade",
  "Supporting-arm brooch",
  "Surahi",
  "Surcoat",
  "Surf-board",
  "Surgical equipment",
  "Surgical instrument",
  "Surgical instrument-case",
  "Surgical knife",
  "Surimono",
  "Surnoi",
  "Survey instrument",
  "Survey-protractor",
  "Survey-set",
  "Suspension-buckle",
  "Suspension-element",
  "Suspension-loop",
  "Suspension-mount",
  "Suspension-plate",
  "Suspension-ring",
  "Sutra",
  "Sutra-holder",
  "Sutra-stand",
  "Sutra-tray",
  "Suyari",
  "Swab",
  "Swaddling-cloth",
  "Swagger-stick",
  "Swastika brooch",
  "Swatter",
  "Sweet-dish",
  "Sweetmeat-box",
  "Sweetmeat-dish",
  "Sweetmeat-glass",
  "Sweetmeat-mould",
  "Sweetmeat-stand",
  "Sweetmeat-tongs",
  "Sweetmeat-tray",
  "Swift",
  "Switch",
  "Swivel",
  "Swizzle-stick",
  "Sword",
  "Sword clock",
  "Sword-belt",
  "Sword-case",
  "Sword-fitting",
  "Sword-guard-box",
  "Sword-harness",
  "Sword-rack",
  "Sword-rest",
  "Sword-sheath",
  "Sword-stick",
  "Syllabub-glass",
  "Symbol stone",
  "Syringe",
  "Syrup-pot",
  "Tabernacle",
  "Tabernacle clock",
  "Table",
  "Table clock",
  "Table-cloth",
  "Table-knife",
  "Table-lamp",
  "Table-mat",
  "Table-spoon",
  "Tablet",
  "Tablet-case",
  "Tabouret",
  "Tabua",
  "Tachi",
  "Tachymeter",
  "Tag",
  "Tail-piece",
  "Talam",
  "Talisman",
  "Tally",
  "Tambourine",
  "Tambourine-beater",
  "Tamper",
  "Tang",
  "Tankard",
  "Tanto",
  "Tap",
  "Tape",
  "Taper",
  "Taper-holder",
  "Tapestry",
  "Tapestry-needle",
  "Tapping-implement",
  "Tare",
  "Target",
  "Tarot card",
  "Tassel",
  "Tasset",
  "Tasting-cup",
  "Tattooing equipment",
  "Tattooing-instrument",
  "Tattooing-mallet",
  "Tattooing-needle",
  "Tattooing-set",
  "Tattooing-stamp",
  "Tazon",
  "Tazza",
  "Tazza-stand",
  "Tea equipment",
  "Tea-bowl",
  "Tea-box",
  "Tea-caddy",
  "Tea-churn",
  "Tea-cosy",
  "Tea-cup",
  "Tea-funnel",
  "Tea-infuser",
  "Tea-jar",
  "Tea-jar-container",
  "Tea-jug",
  "Tea-ladle",
  "Tea-mill",
  "Tea-packet",
  "Tea-plate",
  "Tea-scoop",
  "Tea-screen",
  "Tea-set",
  "Tea-shovel",
  "Tea-spatula",
  "Tea-spoon",
  "Tea-strainer",
  "Tea-tray",
  "Tea-urn",
  "Tea-whisk",
  "Tea-whisk-container",
  "Teapot",
  "Teapot-stand",
  "Teetotum",
  "Telephone",
  "Telescope",
  "Television",
  "Tellurium",
  "Template",
  "Temple",
  "Temple-bell",
  "Temple-finial",
  "Temple-hanging",
  "Temple-key",
  "Temple-relief",
  "Temple-vase",
  "Temporal-ring",
  "Ten-minute-repeating watch",
  "Tenaculum",
  "Tent",
  "Tent-cloth",
  "Tent-hanging",
  "Tent-peg",
  "Tent-pole",
  "Tepee",
  "Terminal",
  "Terrestrial globe",
  "Terret",
  "Tessera",
  "Tether",
  "Tetraptych",
  "Textile crafts",
  "Thaila",
  "Thang'ka",
  "Thatching-needle",
  "Thatching-tool/implement",
  "Theatre-costume",
  "Theatre-ticket",
  "Theodolite",
  "Thermometer",
  "Thesis engraving",
  "Thimble",
  "Thimble-holder",
  "Thirty-hour clock",
  "Thirty-hour watch",
  "Thistle brooch",
  "Thong",
  "Thong-smoother",
  "Thread",
  "Thread-puller",
  "Thread-winder",
  "Threader",
  "Thresher",
  "Threshing-bat",
  "Threshing-board",
  "Threshing-fork",
  "Threshing-stick",
  "Threshing-tray",
  "Throne",
  "Throne-cover",
  "Throwing-axe",
  "Throwing-club",
  "Throwing-knife",
  "Throwing-spear",
  "Throwing-stick",
  "Throwing-stone",
  "Throwing-weapon",
  "Thumb pot",
  "Thumb-guard",
  "Thumb-ring",
  "Thumb-screw",
  "Thurible",
  "Thymiaterion",
  "Tiara",
  "Ticket",
  "Ticket-clock",
  "Tie",
  "Tie-pin",
  "Tiffin-set",
  "Tiger's claw",
  "Tikal",
  "Tiki",
  "Tile",
  "Tile-mould",
  "Tile-stamp",
  "Time-beater",
  "Timepiece",
  "Timer",
  "Tinder",
  "Tinder-box",
  "Tine",
  "Tintinabulum",
  "Tippet",
  "Tipstaff",
  "Tiputa",
  "Tiqa-stick",
  "Title-page",
  "Toast-rack",
  "Toaster",
  "Toastmaster's glass",
  "Tobacco",
  "Tobacco equipment",
  "Tobacco-bag",
  "Tobacco-basket",
  "Tobacco-box",
  "Tobacco-case",
  "Tobacco-container",
  "Tobacco-flask",
  "Tobacco-grinder",
  "Tobacco-holder",
  "Tobacco-jar",
  "Tobacco-pipe",
  "Tobacco-pipe-case",
  "Tobacco-pipe-pin",
  "Tobacco-pipe-scraper",
  "Tobacco-pipe-spoon",
  "Tobacco-pipe-stopper",
  "Tobacco-pot",
  "Tobacco-pot-case",
  "Tobacco-pouch",
  "Tobacco-press",
  "Tobe",
  "Toboggan",
  "Toby jug",
  "Tocoyal",
  "Toe-ring",
  "Toggle",
  "Toilet-bottle",
  "Toilet-box",
  "Toilet-case",
  "Toilet-chest",
  "Toilet-pot",
  "Toilet-set",
  "Toilet-spoon",
  "Toilet-tool/implement",
  "Toilet-vessel",
  "Token",
  "Token-matrix",
  "Token-mould",
  "Tomahawk",
  "Tomahawk pipe",
  "Tomb",
  "Tomb-painting",
  "Tomb-relief",
  "Tombstone",
  "Tondo",
  "Tongs",
  "Tonkotsu",
  "Tool-bag",
  "Tool-basket",
  "Tool-box",
  "Tool-mould",
  "Tool/implement",
  "Tool/implement-case",
  "Tool/implement-holder",
  "Tooth-brush",
  "Tooth-pick",
  "Tooth-stick",
  "Top-hat",
  "Tope",
  "Tope-mould",
  "Topknot",
  "Topo",
  "Toran",
  "Torc",
  "Torch",
  "Torch-holder",
  "Torma",
  "Torquetum",
  "Torture-chair",
  "Torture-instrument",
  "Totem-pole",
  "Touchstone",
  "Tourbillon watch",
  "Tournette",
  "Towel",
  "Toy",
  "Toy theatre",
  "Tract",
  "Traction-hook",
  "Trade-card",
  "Trade-token",
  "Train",
  "Tranchet axe",
  "Tranchet axe flake",
  "Transparency",
  "Transport equipment",
  "Transport-ticket",
  "Trap",
  "Trappings",
  "Travelling clock",
  "Tray",
  "Tray-cover",
  "Treadle",
  "Treaty",
  "Trefoil brooch",
  "Trencher",
  "Trestle",
  "Trial-piece",
  "Tricycle",
  "Trident",
  "Tripod",
  "Tripod stand",
  "Tripod-bowl",
  "Tripod-lebes",
  "Tripod-nail",
  "Tripod-pitcher",
  "Triptych",
  "Triptych print",
  "Trisula",
  "Trivet",
  "Trophy",
  "Trough",
  "Trousers",
  "Trousseau",
  "Trowel",
  "Trozella",
  "Trueing-tool",
  "Trumpet",
  "Trumpet-case",
  "Truncated blade",
  "Truncated bladelet",
  "Truncheon",
  "Trunk",
  "Tsuba",
  "Tsuta",
  "Tub",
  "Tube",
  "Tughraa",
  "Tukada",
  "Tula",
  "Tulipi�re",
  "Tulpo",
  "Tulwar",
  "Tumbler",
  "Tump-line",
  "Tunic",
  "Tuning-fork watch",
  "Turban",
  "Turban cloth",
  "Turban-hook",
  "Turban-ornament",
  "Tureen",
  "Tureen-stand",
  "Turkish-market clock",
  "Turkish-market watch",
  "Turns",
  "Turret clock",
  "Tutulus brooch",
  "Tuyere",
  "Tweezers",
  "Twine",
  "Twister",
  "Tyg",
  "Tympanum",
  "Typewriter",
  "Tyre",
  "Tzute",
  "Ukelele",
  "Uki-e",
  "Ulu",
  "Umbrella",
  "Umbrella-case",
  "Umiak",
  "Uncu",
  "Underbelt",
  "Underdress",
  "Undergarment",
  "Underjacket",
  "Underpants",
  "Undershirt",
  "Underskirt",
  "Unguent-bottle",
  "Unguent-flask",
  "Unguent-jar",
  "Unguent-pot",
  "Unguent-spoon",
  "Unguent-vase",
  "Unguentarium",
  "Uniform",
  "Uprighting tool",
  "Urinal",
  "Urine-pipe",
  "Urn",
  "Utilised stone",
  "Utility cloth",
  "Vacuum-flask",
  "Vajra",
  "Valance",
  "Valentine-card",
  "Valve",
  "Vambrace",
  "Varnish",
  "Vase",
  "Vase-fitting",
  "Vase-label",
  "Vase-stand",
  "Vat",
  "Vaulting-tube",
  "Vegetable-dish",
  "Vegetal remains",
  "Vehicle",
  "Vehicle-fitting",
  "Veil",
  "Ventilator-screen",
  "Verge pallet adjuster",
  "Vertical dial",
  "Vervel",
  "Vesica",
  "Vesica-mould",
  "Vessel",
  "Vessel-carrier",
  "Vessel-case",
  "Vessel-cover",
  "Vessel-fitting",
  "Vessel-holder",
  "Vessel-mould",
  "Vessel-stamp",
  "Vessel-stand",
  "Vest",
  "Vestment",
  "Vice",
  "Video cassette",
  "Video cassette-recorder",
  "Vinaigrette",
  "Vinegar-bottle",
  "Viol",
  "Violin",
  "Violin-bow",
  "Visiting-card",
  "Visor",
  "Vodka-bottle",
  "Voice-disguiser",
  "Volute amphora",
  "Volute krater",
  "Volvelle",
  "Voting-slate",
  "Votive figure",
  "Votive flask",
  "Votive offering",
  "Votive plaque",
  "Votive tank",
  "Voussoir",
  "Wadding",
  "Wafer-stamp",
  "Wafering-tongs",
  "Wager-cup",
  "Wagon",
  "Wagon-fitting",
  "Waist-band",
  "Waist-clasp",
  "Waist-cloth",
  "Waist-mat",
  "Waist-ornament",
  "Waist-ring",
  "Waist-string",
  "Waist-tie",
  "Waistcoat",
  "Waiter",
  "Wakizashi",
  "Wakizashi-sheath",
  "Walking-stick",
  "Walking-stick watch",
  "Wall",
  "Wall clock",
  "Wall flower-vase",
  "Wall-bracket",
  "Wall-cover",
  "Wall-hanging",
  "Wall-lamp",
  "Wall-medallion",
  "Wall-nail",
  "Wall-ornament",
  "Wall-painting",
  "Wall-panel",
  "Wall-plaque",
  "Wall-pocket",
  "Wall-scroll",
  "Wallet",
  "Wallpaper",
  "Wampum",
  "Wand",
  "Wandering-hour watch",
  "War-hammer",
  "Warming-pan",
  "Warping-frame",
  "Warping-post",
  "Warrant",
  "Warri-board",
  "Washer",
  "Washing-bowl",
  "Wassail-bowl",
  "Waste-paper-basket",
  "Waster",
  "Watch",
  "Watch movement holder",
  "Watch-adaptor",
  "Watch-case",
  "Watch-case-opener",
  "Watch-chain",
  "Watch-component",
  "Watch-cover",
  "Watch-holder",
  "Watch-key",
  "Watch-paper",
  "Watch-stand",
  "Watch-timing-machine",
  "Water clock",
  "Water-bag",
  "Water-barrel",
  "Water-basin",
  "Water-bottle",
  "Water-bottle-stand",
  "Water-bowl",
  "Water-bucket",
  "Water-carrier",
  "Water-container",
  "Water-cooler",
  "Water-dropper",
  "Water-ewer",
  "Water-filter",
  "Water-flask",
  "Water-hoist",
  "Water-jar",
  "Water-jar-stand",
  "Water-jug",
  "Water-pipe",
  "Water-pot",
  "Water-pourer",
  "Water-pump",
  "Water-scoop",
  "Water-spout-mould",
  "Water-spray",
  "Water-sprinkler",
  "Water-storage-vessel",
  "Water-strainer",
  "Water-supply-pipe",
  "Water-tap",
  "Water-vessel",
  "Water-wheel",
  "Watering-pot",
  "Wax-holder",
  "Waywiser",
  "Weapon",
  "Weapon-mould",
  "Weaving equipment",
  "Weaving-batten",
  "Weaving-frame",
  "Weaving-peg",
  "Weaving-pick",
  "Weaving-stick",
  "Weaving-strap",
  "Weaving-tablet",
  "Webbing",
  "Wedding-chest",
  "Wedding-cup",
  "Wedding-dress",
  "Wedding-fork",
  "Wedding-knife",
  "Wedding-ring",
  "Wedding-veil",
  "Wedge",
  "Weight",
  "Weight-box",
  "Weight-driven clock",
  "Weight-mould",
  "Weight-tray",
  "Weiqi-board",
  "Weiqi-piece",
  "Weiqi-pot",
  "Weiqi-set",
  "Well",
  "Well-head",
  "Well-winder",
  "Wheel",
  "Wheel trap",
  "Wheel-barometer",
  "Wheel-barrow",
  "Wheel-cutter",
  "Whetstone",
  "Whip",
  "Whip-sling",
  "Whisk",
  "Whisk-holder",
  "Whisky-decanter",
  "Whistle",
  "Whistle-case",
  "Whistle-cleaner",
  "Whistle-mould",
  "Wick",
  "Wick-holder",
  "Wick-puller",
  "Wick-trimmer",
  "Wig",
  "Wig-box",
  "Wig-curler",
  "Wig-pin",
  "Wig-stand",
  "Wind-vane",
  "Winder",
  "Winding-frame",
  "Winding-rack",
  "Windlass",
  "Window",
  "Window-frame",
  "Window-glass",
  "Window-grille",
  "Window-pane",
  "Window-sill",
  "Window-spacer",
  "Window-ventilator",
  "Wine-bottle",
  "Wine-cooler",
  "Wine-cup",
  "Wine-cup-holder",
  "Wine-ewer",
  "Wine-funnel",
  "Wine-glass",
  "Wine-heater",
  "Wine-jar",
  "Wine-jug",
  "Wine-kettle",
  "Wine-ladle",
  "Wine-pot",
  "Wine-pot-holder",
  "Wine-pourer",
  "Wine-strainer",
  "Wine-tasting-cup",
  "Wine-vessel",
  "Wineskin",
  "Winnower",
  "Winnowing-basket",
  "Winnowing-fan",
  "Winnowing-fork",
  "Winnowing-tray",
  "Wire",
  "Witch-ball",
  "Wooden watch",
  "Wool-weight",
  "Work-basket",
  "Work-box",
  "Work-shirt",
  "Worked ochre",
  "World-time clock",
  "World-time watch",
  "Wound-plug",
  "Wound-trimmer",
  "Wrap",
  "Wrapping",
  "Wrapping-paper",
  "Wreath",
  "Wrench",
  "Wrist-band",
  "Wrist-chronograph",
  "Wrist-clasp",
  "Wrist-guard",
  "Wrist-knife",
  "Wrist-ornament",
  "Wrist-rest",
  "Wrist-watch",
  "Writing sheet",
  "Writing-board",
  "Writing-book",
  "Writing-book-cover",
  "Writing-box",
  "Writing-brush",
  "Writing-case",
  "Writing-pad",
  "Writing-paper",
  "Writing-set",
  "Writing-set-stand",
  "Writing-slope",
  "Writing-stick",
  "Writing-tablet",
  "Xian",
  "Xuanji",
  "Xylophone",
  "Xylophone-beater",
  "Yam stick",
  "Yantra",
  "Yaobao",
  "Yard-of-ale-glass",
  "Yari-sheath",
  "Yarn",
  "Yarn-winder",
  "Yashmak",
  "Yataghan",
  "Year-going clock",
  "Yi",
  "Yo-yo",
  "Yoke",
  "Yoni",
  "You",
  "Yunomi",
  "Yurt",
  "Yut-set",
  "Zarf",
  "Zavenuza",
  "Zha dou",
  "Zhi",
  "Zhong",
  "Zither",
  "Zong",
  "Zoomorphic brooch",
  "Zun",
  "Other", // Add more as needed
];

// ---------------------------------------------
// END: components\constants.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\exportRecordsToCSV.js
// ---------------------------------------------

import { ref, get } from "firebase/database";
import { db } from "../firebase";
import { useAuth } from "./Auth/AuthContext"; // Use AuthContext for authentication and verification
import "./exportRecordsToCSV.css";

function exportRecordsToCSV() {
  const { currentUser, emailVerified } = useAuth(); // Access current user and email verification status

  // Check user authentication and email verification
  if (!currentUser) {
    alert("You must be logged in to export records.");
    return;
  }

  if (!emailVerified) {
    alert("You must verify your email before exporting records.");
    return;
  }

  // Reference to the "objects" node
  const recordsRef = ref(db, `objects`);

  get(recordsRef)
    .then((snapshot) => {
      if (snapshot.exists()) {
        const records = snapshot.val();
        const recordsArray = Object.entries(records).map(([object_id, data]) => {
          const { object_images = [], object_audio = [], ...rest } = data;
          return {
            object_id, // Use object_id as the key
            ...rest,
            object_images: object_images.join("; "), // Combine image URLs into a single string
            object_audio: object_audio.join("; "), // Combine audio URLs into a single string
          };
        });
        const csvContent = convertToCSV(recordsArray);
        downloadCSV(csvContent, "object_records.csv");
      } else {
        alert("No records available to export.");
      }
    })
    .catch((error) => {
      console.error("Error fetching records:", error.message);
      alert("Failed to fetch records. Please try again.");
    });
}

// Convert JSON data to CSV format
function convertToCSV(data) {
  if (!data.length) return "";

  // Dynamically fetch all headers from the first record
  const headers = Object.keys(data[0]).join(",");

  // Map each record to a CSV row
  const rows = data.map((record) =>
    Object.values(record)
      .map((value) => {
        // Convert arrays to strings and escape quotes
        if (Array.isArray(value)) {
          return `"${value.join("; ").replace(/"/g, '""')}"`;
        }
        return `"${String(value).replace(/"/g, '""')}"`; // Escape quotes in values
      })
      .join(",")
  );

  return [headers, ...rows].join("\n");
}

// Download the generated CSV file
function downloadCSV(csvContent, fileName) {
  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  const link = document.createElement("a");
  const url = URL.createObjectURL(blob);
  link.setAttribute("href", url);
  link.setAttribute("download", fileName);
  link.style.visibility = "hidden";
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export default exportRecordsToCSV;

/* exportRecordsToCSV.css */
.download-button {
  background-color: #007bff;
  color: white;
  font-weight: bold;
  padding: 10px 20px;
  border-radius: 5px;
  border: none;
  cursor: pointer;
}

.download-button:hover {
  background-color: #0056b3;
}


// ---------------------------------------------
// END: components\exportRecordsToCSV.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: firebase.js
// ---------------------------------------------

import { initializeApp } from "firebase/app";
import {
  getDatabase,
  ref,
  query,
  orderByKey,
  get,
  limitToFirst,
} from "firebase/database"; // Import query functions
import { getAnalytics } from "firebase/analytics"; // Optional, for analytics
import {
  getAuth,
  setPersistence,
  browserSessionPersistence,
} from "firebase/auth"; // For authentication
import {
  getStorage,
  ref as storageRef,
  uploadBytes,
  getDownloadURL,
} from "firebase/storage"; // For Storage
import { enableLogging } from "firebase/database";

// Firebase configuration
const firebaseConfig = {
  apiKey: process.env.REACT_APP_API_KEY,
  authDomain: process.env.REACT_APP_AUTHDOMAIN,
  databaseURL: process.env.REACT_APP_DATABASEURL,
  projectId: process.env.REACT_APP_PROJECTID,
  storageBucket: process.env.REACT_APP_STORAGEBUCKET,
  messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,
  appId: process.env.REACT_APP_APPID,
  measurementId: process.env.REACT_APP_MEASUREMENTID,
};

// Initialize Firebase App
const app = initializeApp(firebaseConfig);

// Realtime Database instance
export const db = getDatabase(app); // For Realtime Database

// Firebase Storage instance
export const storage = getStorage(app); // For File Storage

// Optional: Initialize Firebase Analytics
if (firebaseConfig.measurementId) {
  getAnalytics(app);
}

// Authentication instance
export const auth = getAuth(app);

// Set session persistence
setPersistence(auth, browserSessionPersistence)
  .then(() => {
    console.log("Session persistence set to browser session only");
  })
  .catch((error) => {
    console.error("Error setting session persistence:", error);
  });

// Fetch all objects data
export const fetchAllObjects = async () => {
  try {
    const objectsRef = ref(db, "objects");
    const snapshot = await get(objectsRef); // Fetch all data at the "objects" node
    if (snapshot.exists()) {
      return snapshot.val(); // Return all objects
    } else {
      console.warn("No objects data found");
      return {};
    }
  } catch (error) {
    console.error("Error fetching objects data:", error.message);
    throw error;
  }
};

// Example: Fetch limited objects data
export const fetchLimitedObjects = async (limit = 10) => {
  try {
    const objectsRef = ref(db, "objects");
    const limitedQuery = query(objectsRef, orderByKey(), limitToFirst(limit));
    const snapshot = await get(limitedQuery);
    return snapshot.val() || {};
  } catch (error) {
    console.error("Error fetching limited objects data:", error.message);
    throw error;
  }
};

// Example: Fetch object by key
export const fetchObjectByKey = async (key) => {
  try {
    const objectRef = ref(db, `objects/${key}`);
    const snapshot = await get(objectRef);
    return snapshot.val() || null;
  } catch (error) {
    console.error("Error fetching object by key:", error.message);
    throw error;
  }
};

// Upload file to Firebase Storage
export const uploadFile = async (file, folder = "uploads") => {
  try {
    const fileRef = storageRef(storage, `${folder}/${file.name}`);
    await uploadBytes(fileRef, file);
    const downloadURL = await getDownloadURL(fileRef);
    console.log(`File uploaded successfully: ${downloadURL}`);
    return downloadURL;
  } catch (error) {
    console.error("Error uploading file:", error.message);
    throw error;
  }
};

// Fetch file download URL from Firebase Storage
export const fetchFileURL = async (path) => {
  try {
    const fileRef = storageRef(storage, path);
    const downloadURL = await getDownloadURL(fileRef);
    console.log(`File URL fetched: ${downloadURL}`);
    return downloadURL;
  } catch (error) {
    console.error("Error fetching file URL:", error.message);
    throw error;
  }
};

// Enable logging for Firebase
enableLogging(true);


// ---------------------------------------------
// END: firebase.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: hooks\useDeviceType.js
// ---------------------------------------------

import { useState, useEffect } from 'react';

function useDeviceType() {
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const updateDeviceType = () => {
      setIsMobile(window.innerWidth < 768); // Adjust breakpoint as needed
    };

    updateDeviceType(); // Run on initial render
    window.addEventListener('resize', updateDeviceType);

    return () => window.removeEventListener('resize', updateDeviceType);
  }, []);

  return isMobile;
}

export default useDeviceType;


// ---------------------------------------------
// END: hooks\useDeviceType.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: index.js
// ---------------------------------------------

import React from "react";
import ReactDOM from "react-dom/client"; // Use createRoot API for React 18+
import { BrowserRouter } from "react-router-dom";
import "./index.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { AuthProvider } from "./components/Auth/AuthContext"; // Import AuthProvider

// Create root and render the application
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <AuthProvider>
      <BrowserRouter
        future={{
          v7_startTransition: true, // Opt into React startTransition behavior for state updates
          v7_relativeSplatPath: true, // Enable new relative route resolution within Splat routes
        }}
      >
        <App />
      </BrowserRouter>
    </AuthProvider>
  </React.StrictMode>
);

// Optional: Log performance metrics
reportWebVitals();


// ---------------------------------------------
// END: index.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: reportWebVitals.js
// ---------------------------------------------

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


// ---------------------------------------------
// END: reportWebVitals.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: setupTests.js
// ---------------------------------------------

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


// ---------------------------------------------
// END: setupTests.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: utils\fetchData.js
// ---------------------------------------------

// src/utils/fetchData.js
import { ref, get } from "firebase/database";
import { db } from "../firebase";

export const fetchData = async () => {
  const dbRef = ref(db, "objects");

  try {
    // Fetch all records from the "objects" node
    const snapshot = await get(dbRef);
    if (snapshot.exists()) {
      return Object.values(snapshot.val()); // Convert the snapshot to an array of objects
    } else {
      return []; // Return an empty array if no data exists
    }
  } catch (error) {
    console.error("Error fetching data:", error);
    throw error;
  }
};


// ---------------------------------------------
// END: utils\fetchData.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: utils\urlParser.js
// ---------------------------------------------

// src/utils/urlParser.js

/**
 * Truncates a URL to a maximum length for display purposes.
 * @param {string} url - The URL to truncate.
 * @param {number} maxLength - The maximum length of the displayed URL.
 * @returns {string} - The truncated URL.
 */
export const truncateUrl = (url, maxLength = 30) => {
  if (url.length <= maxLength) return url;
  return `${url.substring(0, maxLength)}...`;
};

/**
 * Parses a string containing URLs or Markdown-style links into HTML links.
 * Supports plain URLs and Markdown-style `[Text](URL)` links.
 * @param {string} description - The input string to parse.
 * @returns {string} - The string with URLs converted to HTML links.
 */
export const parseDescription = (description) => {
  if (typeof description !== "string") {
    description = String(description).trim(); // Ensure input is a string
  }

  // Regex for Markdown-style links: [Text](URL)
  const markdownLinkRegex = /\[([^\]]+)\]\((https?:\/\/[^\s)]+)\)/g;

  // Regex for plain URLs (not wrapped in Markdown-style links)
  const urlRegex = /(?<!["'>])\bhttps?:\/\/[^\s<>()]+\b/g;

  // Replace Markdown-style links with inline HTML links
  let parsedDescription = description.replace(markdownLinkRegex, (match, text, url) => {
    return `<a href="${url}" target="_blank" rel="noopener noreferrer" class="inline-link">${text}</a>`;
  });

  // Replace plain URLs with truncated inline HTML links
  parsedDescription = parsedDescription.replace(urlRegex, (url) => {
    return `<a href="${url}" target="_blank" rel="noopener noreferrer" class="inline-link">${truncateUrl(url)}</a>`;
  });

  // Replace newline characters with <br> tags for proper text formatting
  return parsedDescription.replace(/\n/g, "<br>");
};


// ---------------------------------------------
// END: utils\urlParser.js
// ---------------------------------------------

// =============================================
// End of merged file
// =============================================
