// =============================================
// Merged JS File
// This file is automatically generated by merge_js_files.py
// Do not edit this file directly. Update source files instead.
// This file merges the following JavaScript files:
// - App.js
// - App.test.js
// - components\Auth\AuthContext.js
// - components\Auth\Login.js
// - components\Auth\Logout.js
// - components\Auth\Register.js
// - components\Collection.js
// - components\CreateData.js
// - components\DeleteData.js
// - components\Header.js
// - components\Home.js
// - components\ObjectDetail.js
// - components\ProtectedRoute.js
// - components\ReadData.js
// - components\RecordManager.js
// - components\ResultsPage.js
// - components\SearchBox.js
// - components\SearchPage.js
// - components\UpdateData.js
// - components\constants.js
// - components\exportRecordsToCSV.js
// - firebase.js
// - index.js
// - reportWebVitals.js
// - setupTests.js
// - utils\fetchData.js
// =============================================



// ---------------------------------------------
// BEGIN: App.js
// ---------------------------------------------

import React from "react";
import "./App.css";
import { Routes, Route } from "react-router-dom";
import Header from "./components/Header"; // Import Header Component
import Login from "./components/Auth/Login"; // Import Login Component
import Register from "./components/Auth/Register"; // Import Register Component
import Logout from "./components/Auth/Logout"; // Import Logout Component
import ProtectedRoute from "./components/ProtectedRoute"; // Import ProtectedRoute
import Home from "./components/Home"; // Import Home Component
import RecordManager from "./components/RecordManager"; // Import RecordManager
import SearchPage from "./components/SearchPage"; // Import SearchPage Component
import Collection from "./components/Collection"; // Import Collection Component
import ObjectDetail from "./components/ObjectDetail"; // Import ObjectDetail Component
import CreatePage from "./components/CreateData"; // Import the CreatePage component
import ResultsPage from "./components/ResultsPage"; // Import ResultsPage Component

function App() {
  return (
    <div className="App">
      <Header />
      <main>
        <Routes>
          {/* Landing page */}
          <Route path="/" element={<Home />} />

          {/* Public routes */}
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />

          {/* Search page */}
          <Route path="/search" element={<SearchPage />} />

          {/* Results page */}
          <Route path="/results" element={<ResultsPage />} />

          <Route path="/object/:objectId" element={<ObjectDetail />} />

          {/* Collection page */}
          <Route path="/collection" element={<Collection />} />

          {/* Object detail page */}
          <Route path="/object/:objectId" element={<ObjectDetail />} />

          {/* Protected routes */}
          <Route
            path="/records"
            element={
              <ProtectedRoute>
                <RecordManager />
              </ProtectedRoute>
            }
          />
          <Route
            path="/create"
            element={
              <ProtectedRoute>
                <CreatePage />
              </ProtectedRoute>
            }
          />
          <Route
            path="/logout"
            element={
              <ProtectedRoute>
                <Logout />
              </ProtectedRoute>
            }
          />
        </Routes>
      </main>
    </div>
  );
}

export default App;


// ---------------------------------------------
// END: App.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: App.test.js
// ---------------------------------------------

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


// ---------------------------------------------
// END: App.test.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Auth\AuthContext.js
// ---------------------------------------------

import React, { createContext, useContext, useEffect, useState } from "react";
import { onAuthStateChanged, getAuth } from "firebase/auth";
import { ref, get } from "firebase/database";
import { db } from "../../firebase"; // Adjust the path to your firebase.js

// Create the AuthContext
const AuthContext = createContext();

// AuthProvider component to wrap the app
export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [emailVerified, setEmailVerified] = useState(false);
  const [userType, setUserType] = useState("regular");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const auth = getAuth();

    // Subscribe to auth state changes
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        setCurrentUser(user);
        setEmailVerified(user.emailVerified);

        try {
          // Fetch the userType from the Realtime Database
          const userRef = ref(db, `users/${user.uid}/userType`);
          const snapshot = await get(userRef);

          if (snapshot.exists()) {
            setUserType(snapshot.val());
          } else {
            console.warn("No userType found for this user; defaulting to regular.");
            setUserType("regular"); // Default to 'regular' if no userType exists
          }
        } catch (error) {
          console.error("Error fetching userType:", error.message);
          setUserType("regular"); // Fallback to 'regular' on error
        }
      } else {
        // Reset states when user logs out
        setCurrentUser(null);
        setEmailVerified(false);
        setUserType("regular");
      }

      setLoading(false); // Authentication state resolved
    });

    // Cleanup the auth state listener on unmount
    return () => {
      unsubscribe();
    };
  }, []);

  const value = {
    currentUser,
    emailVerified,
    userType,
    isLoggedIn: !!currentUser, // Added isLoggedIn property
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading ? children : <div>Loading...</div>}
    </AuthContext.Provider>
  );
};

// Custom hook to use AuthContext
export const useAuth = () => {
  return useContext(AuthContext);
};


// ---------------------------------------------
// END: components\Auth\AuthContext.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Auth\Login.js
// ---------------------------------------------

import React, { useState } from 'react';
import { signInWithEmailAndPassword } from 'firebase/auth';
import { useNavigate, Link } from 'react-router-dom'; // Import Link
import { auth } from '../../firebase';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate(); // Use navigate for routing

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      await signInWithEmailAndPassword(auth, email, password);
      setError('');
      navigate('/search'); // Navigate to the protected route
    } catch (err) {
      setError('Invalid credentials. Please try again.');
    }
  };

  return (
    <div style={{ maxWidth: '400px', margin: 'auto', padding: '20px' }}>
      <h2>Login</h2>
      <p>
        Please login with your email and password. If you don't have an account,{' '}
        <Link to="/register">register here</Link>.
      </p>
      <form onSubmit={handleLogin}>
        <div style={{ marginBottom: '15px' }}>
          <label>Email:</label>
          <input
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            style={{
              width: '100%',
              padding: '10px',
              margin: '5px 0',
              border: '1px solid #ccc',
              borderRadius: '5px',
            }}
          />
        </div>
        <div style={{ marginBottom: '15px' }}>
          <label>Password:</label>
          <input
            type="password"
            placeholder="Enter your password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            style={{
              width: '100%',
              padding: '10px',
              margin: '5px 0',
              border: '1px solid #ccc',
              borderRadius: '5px',
            }}
          />
        </div>
        <button
          type="submit"
          style={{
            padding: '10px 20px',
            backgroundColor: '#007BFF',
            color: '#fff',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
          }}
        >
          Login
        </button>
      </form>
      {error && <p style={{ color: 'red', marginTop: '10px' }}>{error}</p>}
    </div>
  );
};

export default Login;


// ---------------------------------------------
// END: components\Auth\Login.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Auth\Logout.js
// ---------------------------------------------

import React, { useState } from 'react';
import { signOut } from 'firebase/auth';
import { auth } from '../../firebase';
import { useNavigate } from 'react-router-dom';

const Logout = () => {
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const handleLogout = async () => {
    setIsLoading(true); // Start loading state
    try {
      // Perform sign-out operation
      await signOut(auth);

      // Navigate to the login page after successful logout
      navigate('/login');

      console.log('User successfully logged out.');
    } catch (error) {
      // Handle potential logout errors
      console.error('Error during logout:', error.message);
      alert('Failed to log out. Please try again.');
    } finally {
      // Always reset loading state
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-md bg-white shadow-md rounded-lg p-8">
        <h2 className="text-2xl font-bold text-center mb-6">Are you sure you want to log out?</h2>
        <p className="text-gray-600 text-center mb-6">
          Click the button below to securely log out of your account.
        </p>
        <div className="flex justify-center">
          <button
            onClick={handleLogout}
            disabled={isLoading}
            className={`flex items-center justify-center w-full bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded ${
              isLoading ? 'opacity-50 cursor-not-allowed' : ''
            }`}
          >
            {isLoading ? (
              <svg
                className="animate-spin h-5 w-5 mr-2 text-white"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  className="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="4"
                ></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8v8z"
                ></path>
              </svg>
            ) : null}
            {isLoading ? 'Logging Out...' : 'Logout'}
          </button>
        </div>
        <p className="text-sm text-gray-500 mt-4 text-center">
          Note: You will be redirected to the login page after logging out.
        </p>
      </div>
    </div>
  );
};

export default Logout;


// ---------------------------------------------
// END: components\Auth\Logout.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Auth\Register.js
// ---------------------------------------------

import React, { useState } from 'react';
import { createUserWithEmailAndPassword, sendEmailVerification } from 'firebase/auth';
import { ref, set } from 'firebase/database';
import { auth, db } from '../../firebase'; // Import Firebase authentication and database
import { useNavigate } from 'react-router-dom'; // Import navigation hook

function Register() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const navigate = useNavigate(); // Initialize navigation hook

  const handleRegister = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      // Create the user in Firebase Authentication
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const userId = userCredential.user.uid;

      // Save user details in the Firebase Realtime Database with default userType 'regular'
      await set(ref(db, `users/${userId}`), {
        email,
        userType: 'regular', // Default user type
      });

      // Send email verification
      await sendEmailVerification(auth.currentUser);
      alert(
        'Registration successful! A verification email has been sent. Please verify your email before logging in.'
      );

      // Redirect to login page
      navigate('/login');
    } catch (error) {
      console.error('Error during registration:', error);
      setError('Registration failed: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ maxWidth: '400px', margin: 'auto', padding: '20px' }}>
      <h2>Register</h2>
      <p>
        Please enter your email and password to create an account. After
        registering, you’ll receive a verification email. Make sure to verify your
        email before logging in.
      </p>
      <form onSubmit={handleRegister}>
        {error && (
          <p style={{ color: 'red', marginBottom: '10px' }}>{error}</p>
        )}
        <div style={{ marginBottom: '15px' }}>
          <label>Email:</label>
          <input
            type="email"
            placeholder="Enter your email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
            style={{
              width: '100%',
              padding: '10px',
              margin: '5px 0',
              border: '1px solid #ccc',
              borderRadius: '5px',
            }}
          />
        </div>
        <div style={{ marginBottom: '15px' }}>
          <label>Password:</label>
          <input
            type="password"
            placeholder="Enter your password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
            style={{
              width: '100%',
              padding: '10px',
              margin: '5px 0',
              border: '1px solid #ccc',
              borderRadius: '5px',
            }}
          />
        </div>
        <button
          type="submit"
          disabled={loading}
          style={{
            padding: '10px 20px',
            backgroundColor: '#007BFF',
            color: '#fff',
            border: 'none',
            borderRadius: '5px',
            cursor: loading ? 'not-allowed' : 'pointer',
          }}
        >
          {loading ? 'Registering...' : 'Register'}
        </button>
      </form>
    </div>
  );
}

export default Register;


// ---------------------------------------------
// END: components\Auth\Register.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Collection.js
// ---------------------------------------------

import React, { useState, useEffect, useCallback } from "react";
import { Link } from "react-router-dom";
import { getDatabase, ref, onValue } from "firebase/database";
import { objectTypes } from "./constants"; // Import the constants file

const Collection = () => {
  const [objects, setObjects] = useState([]); // All fetched objects
  const [filteredResults, setFilteredResults] = useState([]); // Filtered results
  const [filters, setFilters] = useState({
    object_title: "",
    object_type: "",
    object_id: "",
    title: "",
  }); // Filter criteria

  useEffect(() => {
    const db = getDatabase();
    const objectsRef = ref(db, "objects");

    onValue(objectsRef, (snapshot) => {
      const data = snapshot.val();

      // Load all objects into the state, using object_id as the key
      const results = Object.entries(data || {}).map(([key, value]) => ({
        object_id: key,
        ...value,
      }));
      setObjects(results);
      setFilteredResults(results); // Initialize filtered results
    });
  }, []);

  const applyFilters = useCallback(() => {
    // Dynamically filter results based on all filter criteria
    setFilteredResults(
      objects.filter((obj) => {
        const matchesObjectTitle =
          !filters.object_title ||
          obj.object_title?.toLowerCase().includes(filters.object_title.toLowerCase());
        const matchesObjectType =
          !filters.object_type || obj.object_type === filters.object_type;
        const matchesObjectId =
          !filters.object_id ||
          obj.object_id?.toLowerCase().includes(filters.object_id.toLowerCase());
        const matchesTitle =
          !filters.title ||
          obj.title?.toLowerCase().includes(filters.title.toLowerCase());
        return matchesObjectTitle && matchesObjectType && matchesObjectId && matchesTitle;
      })
    );
  }, [filters, objects]);

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prevFilters) => ({
      ...prevFilters,
      [name]: value,
    }));
  };

  // Reapply filters whenever `filters` or `objects` change
  useEffect(() => {
    applyFilters();
  }, [applyFilters]);

  return (
    <div style={{ display: "flex", height: "100vh" }}>
      {/* Left Filter Panel */}
      <aside
        style={{
          width: "25%",
          backgroundColor: "#f8f9fa",
          padding: "20px",
          borderRight: "1px solid #ddd",
        }}
      >
        <h2 style={{ fontSize: "1.5rem", marginBottom: "20px" }}>Filters</h2>
        <input
          type="text"
          name="object_title"
          placeholder="Filter by Object Title"
          value={filters.object_title}
          onChange={handleFilterChange}
          style={{
            padding: "10px",
            width: "100%",
            marginBottom: "20px",
            border: "1px solid #ccc",
            borderRadius: "8px",
          }}
        />
        <select
          name="object_type"
          value={filters.object_type}
          onChange={handleFilterChange}
          style={{
            padding: "10px",
            width: "100%",
            marginBottom: "20px",
            border: "1px solid #ccc",
            borderRadius: "8px",
          }}
        >
          <option value="">All Object Types</option>
          {objectTypes.map((type) => (
            <option key={type} value={type}>
              {type}
            </option>
          ))}
        </select>
        <input
          type="text"
          name="object_id"
          placeholder="Filter by Object ID"
          value={filters.object_id}
          onChange={handleFilterChange}
          style={{
            padding: "10px",
            width: "100%",
            marginBottom: "20px",
            border: "1px solid #ccc",
            borderRadius: "8px",
          }}
        />
        <input
          type="text"
          name="title"
          placeholder="Filter by Title"
          value={filters.title}
          onChange={handleFilterChange}
          style={{
            padding: "10px",
            width: "100%",
            marginBottom: "20px",
            border: "1px solid #ccc",
            borderRadius: "8px",
          }}
        />
      </aside>

      {/* Right Content Area */}
      <main
        style={{
          width: "75%",
          padding: "20px",
          display: "grid",
          gridTemplateColumns: "repeat(auto-fit, minmax(300px, 1fr))",
          gap: "20px",
          overflowY: "auto",
        }}
      >
        {filteredResults.length > 0 ? (
          filteredResults.map((obj, index) => (
            <Link
              key={index}
              to={`/object/${obj.object_id}`}
              style={{
                border: "1px solid #ddd",
                borderRadius: "8px",
                padding: "15px",
                backgroundColor: "#fff",
                textAlign: "center",
                textDecoration: "none",
                color: "inherit",
              }}
            >
              <img
                src={obj.thumbnailUrl || "default-thumbnail.jpg"}
                alt={obj.title || "No Title"}
                style={{
                  width: "100%",
                  height: "200px",
                  objectFit: "cover",
                  marginBottom: "10px",
                }}
              />
              <div style={{ textAlign: "left", margin: "10px 0" }}>
                {obj.object_title && (
                  <p style={{ fontSize: "1rem", fontWeight: "bold", margin: "0 0 5px 0" }}>
                    {obj.object_title}
                  </p>
                )}
                {obj.description && (
                  <p style={{ fontSize: "0.9rem", margin: "0 0 5px 0", color: "#666" }}>
                    {obj.description}
                  </p>
                )}
                {obj.object_id && (
                  <p style={{ fontSize: "0.9rem", margin: "0 0 5px 0", color: "#999" }}>
                    <strong>ID:</strong> {obj.object_id}
                  </p>
                )}
                {obj.object_type && (
                  <p style={{ fontSize: "0.9rem", margin: "0 0 5px 0", color: "#999" }}>
                    <strong>Type:</strong> {obj.object_type}
                  </p>
                )}
              </div>
            </Link>
          ))
        ) : (
          <p>No results found</p>
        )}
      </main>
    </div>
  );
};

export default Collection;


// ---------------------------------------------
// END: components\Collection.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\CreateData.js
// ---------------------------------------------

import React, { useState } from "react";
import { db, storage } from "../firebase"; // Import Firebase Storage
import { ref as dbRef, set } from "firebase/database";
import { ref as storageRef, uploadBytes, getDownloadURL } from "firebase/storage";
import { useAuth } from "./Auth/AuthContext";
import { Collapse } from "react-collapse";
import { objectTypes } from "./constants";

const CreateData = ({ onCancel }) => {
  const { currentUser } = useAuth();
  const [openSections, setOpenSections] = useState({ general: true, multimedia: false });
  const [formData, setFormData] = useState({
    object_title: "",
    object_type: "",
    object_id: "",
    title: "",
    description: "",
    createdByEmail: currentUser ? currentUser.email : "",
    creationDate: new Date().toISOString(),
    modifiedDate: new Date().toISOString(),
    object_images: [],
    object_audio: [],
  });

  const [loading, setLoading] = useState(false);

  const toggleSection = (section) => {
    setOpenSections((prev) => ({
      ...prev,
      [section]: !prev[section],
    }));
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleFileChange = (e, field) => {
    setFormData({ ...formData, [field]: e.target.files });
  };

  const uploadFiles = async (files, folder) => {
    const urls = [];
    let thumbnailUrl = null;

    for (const file of files) {
      const storagePath = `${folder}/${file.name}`;
      const fileRef = storageRef(storage, storagePath);

      // Upload the file
      await uploadBytes(fileRef, file);

      // Get the file's download URL
      const fileURL = await getDownloadURL(fileRef);

      // Set the first file's URL as the thumbnail
      if (!thumbnailUrl) {
        thumbnailUrl = fileURL;
      }

      // Add the URL to the list of uploaded file URLs
      urls.push(fileURL);
    }

    return { urls, thumbnailUrl };
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (loading) return;

    if (!formData.object_id.trim() || !formData.object_type.trim()) {
      alert("Object ID and Object Type are required.");
      return;
    }

    setLoading(true);

    try {
      // Upload images and generate their URLs and a thumbnail URL
      const { urls: imagesURLs, thumbnailUrl } = await uploadFiles(formData.object_images, "images");

      // Upload audio files
      const audioURLs = await uploadFiles(formData.object_audio, "audio");

      // Prepare the updated form data
      const updatedFormData = {
        ...formData,
        object_images: imagesURLs,
        object_audio: audioURLs,
        thumbnailUrl: thumbnailUrl || null, // Add the thumbnail URL to the record
      };

      // Push the record to Firebase
      const recordRef = dbRef(db, `objects/${formData.object_id}`);
      await set(recordRef, updatedFormData);

      alert("Record added successfully!");
      setFormData({
        object_title: "",
        object_type: "",
        object_id: "",
        title: "",
        description: "",
        createdByEmail: currentUser ? currentUser.email : "",
        creationDate: new Date().toISOString(),
        modifiedDate: new Date().toISOString(),
        object_images: [],
        object_audio: [],
      });

      // Navigate back to RecordManager
      if (onCancel) onCancel();
    } catch (error) {
      console.error("Error adding record:", error);
      alert("Failed to add record. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-3xl mx-auto p-4 bg-white shadow-md rounded-md">
      <h2 className="text-2xl font-bold mb-4">Create New Record</h2>
      <div>
        <button type="button" onClick={() => toggleSection("general")} className="mb-2 bg-gray-200 p-2 rounded">
          General Information
        </button>
        <Collapse isOpened={openSections.general}>
          <div>
            <input
              type="text"
              name="object_id"
              placeholder="Object ID (e.g., OBJ-001)"
              value={formData.object_id}
              onChange={handleInputChange}
              required
              className="block w-full mb-2 p-2 border rounded"
            />
            <input
              type="text"
              name="object_title"
              placeholder="Object Title"
              value={formData.object_title}
              onChange={handleInputChange}
              className="block w-full mb-2 p-2 border rounded"
            />
            <select
              name="object_type"
              value={formData.object_type}
              onChange={handleInputChange}
              required
              className="block w-full mb-2 p-2 border rounded"
            >
              <option value="">Select Object Type</option>
              {objectTypes.map((type) => (
                <option key={type} value={type}>
                  {type}
                </option>
              ))}
            </select>
            <input
              type="text"
              name="title"
              placeholder="Title"
              value={formData.title}
              onChange={handleInputChange}
              className="block w-full mb-2 p-2 border rounded"
            />
            <textarea
              name="description"
              placeholder="Description"
              value={formData.description}
              onChange={handleInputChange}
              className="block w-full mb-2 p-2 border rounded"
            />
          </div>
        </Collapse>
      </div>

      <div>
        <button type="button" onClick={() => toggleSection("multimedia")} className="mb-2 bg-gray-200 p-2 rounded">
          Multimedia
        </button>
        <Collapse isOpened={openSections.multimedia}>
          <div>
            <label>Upload Images:</label>
            <input
              type="file"
              multiple
              accept="image/*"
              onChange={(e) => handleFileChange(e, "object_images")}
              className="block w-full mb-2"
            />
            <label>Upload Audio:</label>
            <input
              type="file"
              multiple
              accept="audio/*"
              onChange={(e) => handleFileChange(e, "object_audio")}
              className="block w-full mb-2"
            />
          </div>
        </Collapse>
      </div>

      <div className="flex justify-between mt-4">
        <button
          type="button"
          onClick={onCancel}
          className="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={loading}
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        >
          Submit
        </button>
      </div>
    </form>
  );
};

export default CreateData;


// ---------------------------------------------
// END: components\CreateData.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\DeleteData.js
// ---------------------------------------------

import React, { useState } from 'react'; // Ensure useState is imported here
import { ref as storageRef, deleteObject } from "firebase/storage";
import { ref as dbRef, get, remove } from "firebase/database";

// Import Firebase configuration
import { storage, db } from "../firebase"; // Ensure these are exported in firebase.js

function DeleteData({ onDeleteSuccess, onCancel }) {
  const [recordId, setRecordId] = useState("");

  const handleIdChange = (e) => {
    setRecordId(e.target.value);
  };

  const deleteFiles = async (fileURLs) => {
    for (const url of fileURLs) {
      try {
        const fileRef = storageRef(storage, url);
        await deleteObject(fileRef);
      } catch (error) {
        console.error(`Error deleting file: ${url}`, error.message);
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!recordId.trim()) {
      alert("Please enter a valid Record ID.");
      return;
    }

    const recordRef = dbRef(db, `objects/${recordId}`);

    try {
      // Fetch the record to get multimedia file URLs
      const snapshot = await get(recordRef);
      if (!snapshot.exists()) {
        alert("Record not found.");
        return;
      }

      const recordData = snapshot.val();

      // Delete associated files from Firebase Storage
      if (recordData.object_images && recordData.object_images.length > 0) {
        await deleteFiles(recordData.object_images);
      }
      if (recordData.object_audio && recordData.object_audio.length > 0) {
        await deleteFiles(recordData.object_audio);
      }

      // Delete the record from the Realtime Database
      await remove(recordRef);
      alert("Record deleted successfully!");
      setRecordId(""); // Reset the input field
      if (onDeleteSuccess) onDeleteSuccess(recordId); // Notify parent about the deletion
    } catch (error) {
      console.error("Error deleting record:", error.message);
      alert("Error deleting record. Please try again.");
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-lg bg-white shadow-md rounded-lg p-8">
        <h2 className="text-2xl font-bold text-center mb-6">Delete Record</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="recordId" className="block text-sm font-medium text-gray-700">
              Record ID
            </label>
            <input
              type="text"
              id="recordId"
              name="recordId"
              value={recordId}
              onChange={handleIdChange}
              placeholder="Enter Record ID"
              required
              className="block w-full mt-1 p-2 border rounded-md"
            />
          </div>
          <div className="flex justify-between mt-4">
            <button
              type="button"
              onClick={onCancel} // Call cancel function
              className="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-md mr-2"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-md"
            >
              Delete Record
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default DeleteData;


// ---------------------------------------------
// END: components\DeleteData.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Header.js
// ---------------------------------------------

import React from "react";
import { Link } from "react-router-dom";
import { useAuth } from "./Auth/AuthContext";

const Header = () => {
  const { currentUser } = useAuth();

  return (
    <header className="bg-gray-800 text-white p-4">
      <div className="container mx-auto flex justify-between items-center">
        <h1 className="text-lg font-bold">Catalog App</h1>
        <nav className="flex space-x-4">
          {/* Public Links */}
          <Link to="/" className="hover:underline">
            Home
          </Link>
          <Link to="/search" className="hover:underline">
            Search
          </Link>
          <Link to="/collection" className="hover:underline">
            Collection
          </Link>

          {/* Authenticated Links */}
          {currentUser && (
            <>
              <Link to="/records" className="hover:underline">
                Manage Records
              </Link>
              <Link to="/logout" className="hover:underline">
                Logout
              </Link>
            </>
          )}

          {/* Unauthenticated Links */}
          {!currentUser && (
            <>
              <Link to="/login" className="hover:underline">
                Login
              </Link>
              <Link to="/register" className="hover:underline">
                Register
              </Link>
            </>
          )}
        </nav>
      </div>
    </header>
  );
};

export default Header;


// ---------------------------------------------
// END: components\Header.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\Home.js
// ---------------------------------------------

import React from "react";
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "./Auth/AuthContext";
import SearchBox from "./SearchBox";

const Home = () => {
  const { isLoggedIn } = useAuth();
  const navigate = useNavigate();

  const handleSearch = (query) => {
    if (query.trim()) {
      navigate(`/results?q=${encodeURIComponent(query)}`); // Redirect to results
    }
  };

  return (
    <div style={{ textAlign: "center", padding: "40px 20px" }}>
      <h1 style={{ fontSize: "2.5rem", marginBottom: "20px" }}>Welcome to the Catalog</h1>
      <p
        style={{
          fontSize: "1.2rem",
          marginBottom: "30px",
          lineHeight: "1.6",
          maxWidth: "800px",
          margin: "0 auto",
        }}
      >
        Research data on a collection of objects.
      </p>
      {!isLoggedIn ? (
        <div>
          <p style={{ fontSize: "1rem", marginBottom: "20px" }}>
            Please login or register to access the features. Use the navigation bar above to proceed.
          </p>
          <div>
            <Link
              to="/login"
              style={{
                margin: "0 15px",
                color: "#007BFF",
                textDecoration: "none",
                fontSize: "1.2rem",
              }}
            >
              Login
            </Link>
            <Link
              to="/register"
              style={{
                margin: "0 15px",
                color: "#007BFF",
                textDecoration: "none",
                fontSize: "1.2rem",
              }}
            >
              Register
            </Link>
          </div>
        </div>
      ) : (
        <SearchBox onSearch={handleSearch} />
      )}
    </div>
  );
};

export default Home;


// ---------------------------------------------
// END: components\Home.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\ObjectDetail.js
// ---------------------------------------------

import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { getDatabase, ref, onValue } from "firebase/database";

const ObjectDetail = () => {
  const { objectId } = useParams(); // Extract objectId from the URL
  const [objectData, setObjectData] = useState(null);

  useEffect(() => {
    const db = getDatabase();
    const objectRef = ref(db, `objects/${objectId}`); // Directly reference object by object_id

    onValue(objectRef, (snapshot) => {
      if (snapshot.exists()) {
        setObjectData(snapshot.val());
      } else {
        console.error("Object not found for ID:", objectId);
        setObjectData(null);
      }
    });
  }, [objectId]);

  if (!objectData) {
    return <p>Loading...</p>;
  }

  const filteredFields = Object.entries(objectData || {}).filter(
    ([key, value]) => value && value !== ""
  );

  return (
    <div
      className="object-detail"
      style={{
        display: "flex",
        flexDirection: "row",
        padding: "20px",
        maxWidth: "1200px",
        margin: "0 auto",
        gap: "20px",
      }}
    >
      {/* Sidebar for Object Details */}
      <aside
        style={{
          width: "30%",
          backgroundColor: "#f8f9fa",
          padding: "20px",
          borderRadius: "8px",
          boxShadow: "0 2px 5px rgba(0,0,0,0.1)",
        }}
      >
        <h2 style={{ marginBottom: "20px", fontSize: "1.5rem", fontWeight: "bold" }}>
          Object Details
        </h2>
        {filteredFields.map(([key, value]) => (
          <div key={key} style={{ marginBottom: "15px" }}>
            <h3 style={{ fontSize: "1rem", fontWeight: "bold", textTransform: "capitalize" }}>
              {key.replace(/_/g, " ")}:
            </h3>
            <p style={{ fontSize: "0.9rem", margin: "5px 0" }}>{value}</p>
          </div>
        ))}
      </aside>

      {/* Main Content Area */}
      <main
        style={{
          width: "70%",
          padding: "20px",
          borderRadius: "8px",
          boxShadow: "0 2px 5px rgba(0,0,0,0.1)",
          textAlign: "center",
        }}
      >
        {objectData.object_images && objectData.object_images.length > 0 ? (
          <img
            src={objectData.object_images[0]}
            alt={objectData.title || "Object Image"}
            style={{
              width: "100%",
              maxHeight: "400px",
              objectFit: "contain",
              marginBottom: "20px",
            }}
          />
        ) : (
          <p>No image available</p>
        )}
        <h2
          style={{
            fontSize: "1.8rem",
            fontWeight: "bold",
            marginTop: "10px",
          }}
        >
          {objectData.title || "Untitled"}
        </h2>
        <p
          style={{
            fontSize: "1rem",
            color: "#666",
            marginTop: "10px",
          }}
        >
          {objectData.description || "No description provided."}
        </p>
      </main>
    </div>
  );
};

export default ObjectDetail;


// ---------------------------------------------
// END: components\ObjectDetail.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\ProtectedRoute.js
// ---------------------------------------------

import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from './Auth/AuthContext';

const ProtectedRoute = ({ children }) => {
  const { currentUser, emailVerified } = useAuth();
  const [loading, setLoading] = React.useState(true);

  React.useEffect(() => {
    setLoading(false); // Assume state stabilizes after mounting
  }, []);

  if (loading) {
    return <div>Loading...</div>; // Add a loading spinner or placeholder
  }

  if (!currentUser) {
    return <Navigate to="/login" />;
  }

  if (!emailVerified) {
    return <Navigate to="/verify-email" />;
  }

  return children;
};

export default ProtectedRoute;


// ---------------------------------------------
// END: components\ProtectedRoute.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\ReadData.js
// ---------------------------------------------

import React, { useEffect, useState } from "react";
import { db } from "../firebase";
import { ref, onValue, query, orderByChild, equalTo, get } from "firebase/database";
import { useAuth } from "./Auth/AuthContext";
import { CSVLink } from "react-csv";

function ReadData({ onSelectRecord, onDelete, onCreate }) {
  const [records, setRecords] = useState([]); // State to hold all records from Firebase
  const [filteredRecords, setFilteredRecords] = useState([]); // State to hold search results
  const [searchQuery, setSearchQuery] = useState(""); // State to manage the search input
  const { currentUser, userType } = useAuth(); // Authentication context

  // Fetch records from Firebase Realtime Database
  useEffect(() => {
    if (!currentUser) return;

    // Reference to "objects" node in the database
    const recordsRef = ref(db, "objects");

    // Query for admin users or filtering by createdByEmail for non-admins
    const recordsQuery =
      userType === "admin"
        ? recordsRef
        : query(recordsRef, orderByChild("createdByEmail"), equalTo(currentUser.email));

    // Subscribe to database changes
    const unsubscribe = onValue(recordsQuery, (snapshot) => {
      if (!snapshot.exists()) {
        setRecords([]); // No records found
        setFilteredRecords([]);
        return;
      }

      // Map the records to an array with the object_id as the key
      const allRecords = Object.entries(snapshot.val()).map(([object_id, data]) => ({
        object_id, // Use object_id as the key
        ...data,
      }));

      setRecords(allRecords); // Update state with fetched records
      setFilteredRecords(allRecords); // Initially show all records
    });

    return () => unsubscribe(); // Cleanup subscription on unmount
  }, [currentUser, userType]);

  // Handle search functionality
  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setFilteredRecords(records); // Show all records if search query is empty
      return;
    }

    // Query records by object_id
    const objectIdQuery = query(ref(db, "objects"), orderByChild("object_id"), equalTo(searchQuery));

    try {
      const snapshot = await get(objectIdQuery);

      // Process search results
      const results = [];
      if (snapshot.exists()) {
        snapshot.forEach((child) => {
          results.push({ object_id: child.key, ...child.val() });
        });
      }

      setFilteredRecords(results); // Update state with filtered records
    } catch (error) {
      console.error("Error fetching search results:", error);
    }
  };

  // Dynamically create CSV headers
  const headers = records.length > 0
    ? Object.keys(records[0]).map((key) => ({
        label: key.replace(/_/g, " ").toUpperCase(),
        key: key,
      }))
    : [];

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-3xl bg-white shadow-md rounded-lg p-8">
        {/* Header Section */}
        <h3 className="text-2xl font-bold mb-4">Your Records</h3>
        <p className="text-gray-600 mb-4">
          You have <strong>{records.length}</strong> records. Use the buttons below to create, review, update, or delete records.
          You can also export the data as a CSV file.
        </p>

        {/* Search Section */}
        <div className="mb-4">
          <input
            type="text"
            placeholder="Search by object ID"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="p-2 border rounded w-72"
          />
          <button onClick={handleSearch} className="ml-4 p-2 bg-blue-500 text-white rounded">
            Search
          </button>
        </div>

        {/* Create New Record Button */}
        <div className="mb-4">
          <button onClick={onCreate} className="p-2 bg-green-500 text-white rounded">
            Create New Record
          </button>
        </div>

        {/* CSV Export Button */}
        <CSVLink
          data={records}
          headers={headers}
          filename="objects_records.csv"
          className="p-2 bg-gray-500 text-white rounded mb-4 inline-block"
        >
          Export Records to CSV
        </CSVLink>

        {/* Records Listing */}
        {filteredRecords.length === 0 ? (
          <p className="text-gray-500">No records available</p>
        ) : (
          <ul className="space-y-4">
            {filteredRecords.map((record) => (
              <li
                key={record.object_id}
                className="p-4 border border-gray-300 rounded flex flex-col space-y-2"
              >
                {Object.entries(record).map(([key, value]) => {
                  if (key === "thumbnailUrl") {
                    return (
                      <div key={key}>
                        <strong>{key.replace(/_/g, " ").toUpperCase()}:</strong>
                        <img
                          src={value}
                          alt="Thumbnail"
                          className="w-16 h-16 object-cover rounded-md border border-gray-300 mt-2"
                        />
                      </div>
                    );
                  }

                  if (key === "object_images" && Array.isArray(value)) {
                    return (
                      <div key={key}>
                        <strong>{key.replace(/_/g, " ").toUpperCase()}:</strong>
                        <div className="grid grid-cols-2 gap-2 mt-2">
                          {value.map((imageUrl, index) => (
                            <img
                              key={index}
                              src={imageUrl}
                              alt={`Object ${index + 1}`}
                              className="w-16 h-16 object-cover rounded-md border border-gray-300"
                            />
                          ))}
                        </div>
                      </div>
                    );
                  }

                  return (
                    <p key={key}>
                      <strong>{key.replace(/_/g, " ").toUpperCase()}:</strong> {value?.toString() || "N/A"}
                    </p>
                  );
                })}
                <div className="flex space-x-2">
                  <button
                    onClick={() => onSelectRecord(record)}
                    className="p-2 bg-yellow-500 text-white rounded"
                  >
                    Review Record
                  </button>
                  <button
                    onClick={() => onDelete(record)}
                    className="p-2 bg-red-500 text-white rounded"
                  >
                    Delete Record
                  </button>
                </div>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}

export default ReadData;


// ---------------------------------------------
// END: components\ReadData.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\RecordManager.js
// ---------------------------------------------

import React, { useState, useEffect } from "react";
import CreateData from "./CreateData";
import ReadData from "./ReadData";
import UpdateData from "./UpdateData";
import DeleteData from "./DeleteData";
import { db } from "../firebase";
import { ref, onValue } from "firebase/database";

const RecordManager = () => {
  const [records, setRecords] = useState([]); // All records
  const [view, setView] = useState("read"); // Current view: "create", "read", "update", "delete"
  const [selectedRecord, setSelectedRecord] = useState(null); // Record selected for update/delete

  useEffect(() => {
    // Fetch records from Firebase
    const recordsRef = ref(db, "objects");
    const unsubscribe = onValue(recordsRef, (snapshot) => {
      if (snapshot.exists()) {
        const fetchedRecords = Object.entries(snapshot.val()).map(([object_id, data]) => ({
          object_id, // Use object_id as the key
          ...data,
        }));
        setRecords(fetchedRecords);
      } else {
        setRecords([]);
      }
    });

    return () => unsubscribe();
  }, []);

  const handleSelectRecord = (record) => {
    setSelectedRecord(record);
    setView("update");
  };

  const handleDelete = (record) => {
    setSelectedRecord(record);
    setView("delete");
  };

  const handleRecordUpdated = () => {
    setSelectedRecord(null);
    setView("read");
  };

  const handleCreate = () => {
    setView("create"); // Switch to Create mode
  };

  const handleCancel = () => {
    setSelectedRecord(null);
    setView("read");
  };

  return (
    <div className="container mx-auto p-4">
      {view === "create" && <CreateData onCancel={handleCancel} />}
      {view === "read" && (
        <ReadData
          records={records}
          onSelectRecord={handleSelectRecord}
          onDelete={handleDelete}
          onCreate={handleCreate}
        />
      )}
      {view === "update" && selectedRecord && (
        <UpdateData selectedRecord={selectedRecord} onRecordUpdated={handleRecordUpdated} onCancel={handleCancel} />
      )}
      {view === "delete" && selectedRecord && (
        <DeleteData selectedRecord={selectedRecord} onDeleteSuccess={handleRecordUpdated} onCancel={handleCancel} />
      )}
    </div>
  );
};

export default RecordManager;


// ---------------------------------------------
// END: components\RecordManager.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\ResultsPage.js
// ---------------------------------------------

import React, { useState, useEffect, useCallback } from "react";
import { getDatabase, ref, onValue } from "firebase/database";
import { Link } from "react-router-dom";
import { objectTypes } from "./constants"; // Import object types for filtering

const ResultsPage = () => {
  const [objects, setObjects] = useState([]); // All fetched objects
  const [filteredResults, setFilteredResults] = useState([]); // Filtered results
  const [filters, setFilters] = useState({
    object_title: "",
    object_type: "",
    object_id: "",
    title: "",
  }); // Filter criteria

  useEffect(() => {
    const db = getDatabase();
    const objectsRef = ref(db, "objects");

    onValue(objectsRef, (snapshot) => {
      const data = snapshot.val();
      const results = Object.entries(data || {}).map(([key, value]) => ({
        object_id: key, // Use object_id as the key
        ...value,
      }));
      setObjects(results);
      setFilteredResults(results); // Initialize filtered results
    });
  }, []);

  const applyFilters = useCallback(() => {
    setFilteredResults(
      objects.filter((obj) => {
        const matchesObjectTitle =
          !filters.object_title ||
          obj.object_title?.toLowerCase().includes(filters.object_title.toLowerCase());
        const matchesObjectType =
          !filters.object_type || obj.object_type === filters.object_type;
        const matchesObjectId =
          !filters.object_id ||
          obj.object_id?.toLowerCase().includes(filters.object_id.toLowerCase());
        const matchesTitle =
          !filters.title ||
          obj.title?.toLowerCase().includes(filters.title.toLowerCase());
        return matchesObjectTitle && matchesObjectType && matchesObjectId && matchesTitle;
      })
    );
  }, [filters, objects]);

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prevFilters) => ({
      ...prevFilters,
      [name]: value,
    }));
  };

  useEffect(() => {
    applyFilters();
  }, [applyFilters]);

  return (
    <div style={{ display: "flex", flexDirection: "column", height: "100vh" }}>
      {/* Top Section for Item Count */}
      <div style={{ padding: "10px", backgroundColor: "#f4f4f4", textAlign: "left" }}>
        <h2 style={{ margin: 0 }}>
          Collection search: {filteredResults.length} results
        </h2>
      </div>

      <div style={{ display: "flex", height: "calc(100% - 50px)" }}>
        {/* Left Filter Panel */}
        <aside
          style={{
            width: "25%",
            backgroundColor: "#f8f9fa",
            padding: "20px",
            borderRight: "1px solid #ddd",
          }}
        >
          <h2 style={{ fontSize: "1.5rem", marginBottom: "20px" }}>Filters</h2>
          <input
            type="text"
            name="object_title"
            placeholder="Filter by Object Title"
            value={filters.object_title}
            onChange={handleFilterChange}
            style={{
              padding: "10px",
              width: "100%",
              marginBottom: "20px",
              border: "1px solid #ccc",
              borderRadius: "8px",
            }}
          />
          <select
            name="object_type"
            value={filters.object_type}
            onChange={handleFilterChange}
            style={{
              padding: "10px",
              width: "100%",
              marginBottom: "20px",
              border: "1px solid #ccc",
              borderRadius: "8px",
            }}
          >
            <option value="">All Object Types</option>
            {objectTypes.map((type) => (
              <option key={type} value={type}>
                {type}
              </option>
            ))}
          </select>
          <input
            type="text"
            name="object_id"
            placeholder="Filter by Object ID"
            value={filters.object_id}
            onChange={handleFilterChange}
            style={{
              padding: "10px",
              width: "100%",
              marginBottom: "20px",
              border: "1px solid #ccc",
              borderRadius: "8px",
            }}
          />
          <input
            type="text"
            name="title"
            placeholder="Filter by Title"
            value={filters.title}
            onChange={handleFilterChange}
            style={{
              padding: "10px",
              width: "100%",
              marginBottom: "20px",
              border: "1px solid #ccc",
              borderRadius: "8px",
            }}
          />
        </aside>

        {/* Right Content Area */}
        <main
          style={{
            width: "75%",
            padding: "20px",
            display: "grid",
            gridTemplateColumns: "repeat(3, 1fr)", // Maximum of 3 objects per row
            gap: "20px",
            overflowY: "auto",
          }}
        >
          {filteredResults.length > 0 ? (
            filteredResults.map((obj, index) => (
              <Link
                key={index}
                to={`/object/${obj.object_id}`} // Navigate to ObjectDetail page
                style={{
                  border: "1px solid #ddd",
                  borderRadius: "8px",
                  padding: "15px",
                  backgroundColor: "#fff",
                  textAlign: "center",
                  boxShadow: "0px 2px 5px rgba(0, 0, 0, 0.1)",
                  textDecoration: "none",
                  color: "inherit",
                }}
              >
                <img
                  src={obj.thumbnailUrl || "default-thumbnail.jpg"}
                  alt={obj.title || "No Title"}
                  style={{
                    width: "100%",
                    height: "200px",
                    objectFit: "cover",
                    marginBottom: "10px",
                  }}
                />
                <div style={{ textAlign: "left", margin: "10px 0" }}>
                  {obj.object_title && (
                    <p style={{ fontSize: "1rem", fontWeight: "bold", margin: "0 0 5px 0" }}>
                      {obj.object_title}
                    </p>
                  )}
                  {obj.description && (
                    <p style={{ fontSize: "0.9rem", margin: "0 0 5px 0", color: "#666" }}>
                      {obj.description}
                    </p>
                  )}
                  {obj.object_id && (
                    <p style={{ fontSize: "0.9rem", margin: "0 0 5px 0", color: "#999" }}>
                      <strong>ID:</strong> {obj.object_id}
                    </p>
                  )}
                </div>
              </Link>
            ))
          ) : (
            <p>No results found</p>
          )}
        </main>
      </div>
    </div>
  );
};

export default ResultsPage;


// ---------------------------------------------
// END: components\ResultsPage.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\SearchBox.js
// ---------------------------------------------

import React, { useState } from "react";
import "./SearchBox.css"; // Optional CSS for styling

const SearchBox = ({ onSearch }) => {
  const [query, setQuery] = useState(""); // State to manage search input

  const handleSearch = () => {
    if (query.trim()) {
      onSearch(query); // Call the parent's search handler
    }
  };

  return (
    <div className="search-box" style={{ marginBottom: "20px", textAlign: "center" }}>
      <input
        type="text"
        placeholder="Search by keyword, place, or object ID"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        style={{
          padding: "10px",
          width: "300px",
          marginRight: "10px",
          border: "1px solid #ccc",
          borderRadius: "4px",
        }}
      />
      <button
        onClick={handleSearch}
        style={{
          padding: "10px 20px",
          backgroundColor: "#007BFF",
          color: "white",
          border: "none",
          borderRadius: "4px",
          cursor: "pointer",
        }}
      >
        Search
      </button>
    </div>
  );
};

export default SearchBox;

// ---------------------------------------------
// END: components\SearchBox.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\SearchPage.js
// ---------------------------------------------

// SearchPage.js
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

const SearchPage = () => {
  const [query, setQuery] = useState("");
  const navigate = useNavigate();

  const handleSearch = () => {
    if (query.trim()) {
      navigate(`/results?q=${encodeURIComponent(query)}`); // Navigate to ResultsPage with query as URL parameter
    }
  };

  return (
    <div style={{ textAlign: "center", padding: "40px 20px" }}>
      <h1 style={{ fontSize: "2.5rem", marginBottom: "20px" }}>Search the Collection</h1>
      <div>
        <input
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="Enter search terms..."
          style={{
            padding: "10px",
            width: "60%",
            marginRight: "10px",
            border: "1px solid #ccc",
            borderRadius: "8px",
          }}
        />
        <button
          onClick={handleSearch}
          style={{
            padding: "10px 20px",
            backgroundColor: "#007BFF",
            color: "white",
            border: "none",
            borderRadius: "8px",
            cursor: "pointer",
          }}
        >
          Search
        </button>
      </div>
    </div>
  );
};

export default SearchPage;


// ---------------------------------------------
// END: components\SearchPage.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\UpdateData.js
// ---------------------------------------------

import React, { useState, useEffect } from "react";
import { db, storage } from "../firebase";
import { ref, update } from "firebase/database";
import { ref as storageRef, uploadBytes, getDownloadURL, deleteObject } from "firebase/storage";

function UpdateData({ selectedRecord, onRecordUpdated, onCancel }) {
  const [formData, setFormData] = useState({});
  const [newImages, setNewImages] = useState([]);
  const [newAudio, setNewAudio] = useState([]);
  const [imagesToDelete, setImagesToDelete] = useState([]);

  useEffect(() => {
    if (selectedRecord) {
      setFormData({
        ...selectedRecord,
        object_images: selectedRecord.object_images || [],
        object_audio: selectedRecord.object_audio || [],
        thumbnailUrl: selectedRecord.thumbnailUrl || "",
        modifiedDate: new Date().toISOString(),
      });
    }
  }, [selectedRecord]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleFileChange = (e, setFiles) => {
    setFiles(Array.from(e.target.files));
  };

  const handleDeleteImage = (imageUrl) => {
    setImagesToDelete((prev) => [...prev, imageUrl]);
    setFormData((prev) => {
      const updatedImages = (prev.object_images || []).filter((url) => url !== imageUrl);
      const updatedThumbnail = prev.thumbnailUrl === imageUrl ? (updatedImages[0] || null) : prev.thumbnailUrl;
      return {
        ...prev,
        object_images: updatedImages,
        thumbnailUrl: updatedThumbnail,
      };
    });
  };

  const uploadFiles = async (files, folder) => {
    const urls = [];
    let thumbnailUrl = null;

    for (const file of files) {
      const storagePath = `${folder}/${file.name}`;
      const fileRef = storageRef(storage, storagePath);
      await uploadBytes(fileRef, file);
      const fileURL = await getDownloadURL(fileRef);

      if (!thumbnailUrl) {
        thumbnailUrl = fileURL; // Use the first uploaded image as the thumbnail
      }

      urls.push(fileURL);
    }

    return { urls, thumbnailUrl };
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!formData.object_id) {
      alert("Invalid record ID.");
      return;
    }

    const recordRef = ref(db, `objects/${formData.object_id}`);
    const updatedRecord = { ...formData, modifiedDate: new Date().toISOString() };

    try {
      // Delete selected images
      for (const imageUrl of imagesToDelete) {
        const imageRef = storageRef(storage, imageUrl);
        await deleteObject(imageRef);
      }

      // Upload new multimedia files
      if (newImages.length > 0) {
        const { urls: imageUrls, thumbnailUrl } = await uploadFiles(newImages, "images");
        updatedRecord.object_images = [...(formData.object_images || []), ...imageUrls];
        updatedRecord.thumbnailUrl = thumbnailUrl || updatedRecord.thumbnailUrl;
      }

      if (newAudio.length > 0) {
        const audioUrls = await uploadFiles(newAudio, "audio");
        updatedRecord.object_audio = [...(formData.object_audio || []), ...audioUrls];
      }

      // Update the record in Firebase
      await update(recordRef, updatedRecord);
      alert("Record updated successfully!");
      if (onRecordUpdated) onRecordUpdated(updatedRecord);
    } catch (error) {
      console.error("Error updating record:", error.message);
      alert("Failed to update record. Please try again.");
    }
  };

  const renderInputFields = () => {
    return Object.entries(formData).map(([key, value]) => {
      if (key === "object_images") {
        // Handle images
        return (
          <div key={key}>
            <label className="block text-sm font-medium text-gray-700">Existing Images</label>
            <div className="grid grid-cols-2 gap-4 mt-2">
              {value.map((imageUrl, index) => (
                <div key={index} className="relative">
                  <img
                    src={imageUrl}
                    alt={`Object ${index + 1}`}
                    className="w-full h-auto rounded-lg shadow"
                  />
                  <button
                    type="button"
                    onClick={() => handleDeleteImage(imageUrl)}
                    className="absolute top-1 right-1 bg-red-500 text-white text-xs px-2 py-1 rounded"
                  >
                    Remove
                  </button>
                </div>
              ))}
            </div>
            <label className="block text-sm font-medium text-gray-700 mt-4">Add New Images</label>
            <input
              type="file"
              multiple
              accept="image/*"
              onChange={(e) => handleFileChange(e, setNewImages)}
              className="block w-full mt-1"
            />
          </div>
        );
      }

      if (key === "object_audio") {
        // Handle audio
        return (
          <div key={key}>
            <label className="block text-sm font-medium text-gray-700">Add New Audio</label>
            <input
              type="file"
              multiple
              accept="audio/*"
              onChange={(e) => handleFileChange(e, setNewAudio)}
              className="block w-full mt-1"
            />
          </div>
        );
      }

      if (key === "thumbnailUrl") {
        // Handle thumbnail
        return (
          <div key={key}>
            <label className="block text-sm font-medium text-gray-700">Thumbnail</label>
            {value ? (
              <img
                src={value}
                alt="Thumbnail"
                className="w-24 h-24 object-cover rounded-md border border-gray-300"
              />
            ) : (
              <div className="w-24 h-24 bg-gray-200 flex items-center justify-center rounded-md">
                No Thumbnail
              </div>
            )}
          </div>
        );
      }

      // Default input fields
      return (
        <div key={key}>
          <label className="block text-sm font-medium text-gray-700">{key.replace(/_/g, " ").toUpperCase()}</label>
          <input
            type="text"
            name={key}
            value={value || ""}
            onChange={handleChange}
            className="block w-full mt-1 p-2 border rounded-md"
          />
        </div>
      );
    });
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="w-full max-w-lg bg-white shadow-md rounded-lg p-8">
        <h2 className="text-2xl font-bold text-center mb-6">Update Record</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          {renderInputFields()}
          <div className="flex justify-between mt-4">
            <button
              type="button"
              onClick={onCancel}
              className="w-1/2 bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-md mr-2"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="w-1/2 bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-md"
            >
              Update Record
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default UpdateData;


// ---------------------------------------------
// END: components\UpdateData.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\constants.js
// ---------------------------------------------

// src/components/constants.js
export const objectTypes = [
    "Figure",
    "Coin",
    "Ivory",
    "Jewellery",
    "Sculpture",
    "Pottery",
    "Postcard",
    "Painting",
    "Ceramic",
    "Fabric",
    "Other", // Add more as needed
  ];
  

// ---------------------------------------------
// END: components\constants.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: components\exportRecordsToCSV.js
// ---------------------------------------------

import { ref, get } from "firebase/database";
import { db } from "../firebase";
import { useAuth } from "./Auth/AuthContext"; // Use AuthContext for authentication and verification
import "./exportRecordsToCSV.css";

function exportRecordsToCSV() {
  const { currentUser, emailVerified } = useAuth(); // Access current user and email verification status

  // Check user authentication and email verification
  if (!currentUser) {
    alert("You must be logged in to export records.");
    return;
  }

  if (!emailVerified) {
    alert("You must verify your email before exporting records.");
    return;
  }

  // Reference to the "objects" node
  const recordsRef = ref(db, `objects`);

  get(recordsRef)
    .then((snapshot) => {
      if (snapshot.exists()) {
        const records = snapshot.val();
        const recordsArray = Object.entries(records).map(([object_id, data]) => {
          const { object_images = [], object_audio = [], ...rest } = data;
          return {
            object_id, // Use object_id as the key
            ...rest,
            object_images: object_images.join("; "), // Combine image URLs into a single string
            object_audio: object_audio.join("; "), // Combine audio URLs into a single string
          };
        });
        const csvContent = convertToCSV(recordsArray);
        downloadCSV(csvContent, "object_records.csv");
      } else {
        alert("No records available to export.");
      }
    })
    .catch((error) => {
      console.error("Error fetching records:", error.message);
      alert("Failed to fetch records. Please try again.");
    });
}

// Convert JSON data to CSV format
function convertToCSV(data) {
  if (!data.length) return "";

  // Dynamically fetch all headers from the first record
  const headers = Object.keys(data[0]).join(",");

  // Map each record to a CSV row
  const rows = data.map((record) =>
    Object.values(record)
      .map((value) => {
        // Convert arrays to strings and escape quotes
        if (Array.isArray(value)) {
          return `"${value.join("; ").replace(/"/g, '""')}"`;
        }
        return `"${String(value).replace(/"/g, '""')}"`; // Escape quotes in values
      })
      .join(",")
  );

  return [headers, ...rows].join("\n");
}

// Download the generated CSV file
function downloadCSV(csvContent, fileName) {
  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  const link = document.createElement("a");
  const url = URL.createObjectURL(blob);
  link.setAttribute("href", url);
  link.setAttribute("download", fileName);
  link.style.visibility = "hidden";
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export default exportRecordsToCSV;

/* exportRecordsToCSV.css */
.download-button {
  background-color: #007bff;
  color: white;
  font-weight: bold;
  padding: 10px 20px;
  border-radius: 5px;
  border: none;
  cursor: pointer;
}

.download-button:hover {
  background-color: #0056b3;
}


// ---------------------------------------------
// END: components\exportRecordsToCSV.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: firebase.js
// ---------------------------------------------

import { initializeApp } from "firebase/app";
import {
  getDatabase,
  ref,
  query,
  orderByKey,
  get,
  limitToFirst,
} from "firebase/database"; // Import query functions
import { getAnalytics } from "firebase/analytics"; // Optional, for analytics
import {
  getAuth,
  setPersistence,
  browserSessionPersistence,
} from "firebase/auth"; // For authentication
import {
  getStorage,
  ref as storageRef,
  uploadBytes,
  getDownloadURL,
} from "firebase/storage"; // For Storage
import { enableLogging } from "firebase/database";

// Firebase configuration
const firebaseConfig = {
  apiKey: process.env.REACT_APP_API_KEY,
  authDomain: process.env.REACT_APP_AUTHDOMAIN,
  databaseURL: process.env.REACT_APP_DATABASEURL,
  projectId: process.env.REACT_APP_PROJECTID,
  storageBucket: process.env.REACT_APP_STORAGEBUCKET,
  messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,
  appId: process.env.REACT_APP_APPID,
  measurementId: process.env.REACT_APP_MEASUREMENTID,
};

// Initialize Firebase App
const app = initializeApp(firebaseConfig);

// Realtime Database instance
export const db = getDatabase(app); // For Realtime Database

// Firebase Storage instance
export const storage = getStorage(app); // For File Storage

// Optional: Initialize Firebase Analytics
if (firebaseConfig.measurementId) {
  getAnalytics(app);
}

// Authentication instance
export const auth = getAuth(app);

// Set session persistence
setPersistence(auth, browserSessionPersistence)
  .then(() => {
    console.log("Session persistence set to browser session only");
  })
  .catch((error) => {
    console.error("Error setting session persistence:", error);
  });

// Fetch all objects data
export const fetchAllObjects = async () => {
  try {
    const objectsRef = ref(db, "objects");
    const snapshot = await get(objectsRef); // Fetch all data at the "objects" node
    if (snapshot.exists()) {
      return snapshot.val(); // Return all objects
    } else {
      console.warn("No objects data found");
      return {};
    }
  } catch (error) {
    console.error("Error fetching objects data:", error.message);
    throw error;
  }
};

// Example: Fetch limited objects data
export const fetchLimitedObjects = async (limit = 10) => {
  try {
    const objectsRef = ref(db, "objects");
    const limitedQuery = query(objectsRef, orderByKey(), limitToFirst(limit));
    const snapshot = await get(limitedQuery);
    return snapshot.val() || {};
  } catch (error) {
    console.error("Error fetching limited objects data:", error.message);
    throw error;
  }
};

// Example: Fetch object by key
export const fetchObjectByKey = async (key) => {
  try {
    const objectRef = ref(db, `objects/${key}`);
    const snapshot = await get(objectRef);
    return snapshot.val() || null;
  } catch (error) {
    console.error("Error fetching object by key:", error.message);
    throw error;
  }
};

// Upload file to Firebase Storage
export const uploadFile = async (file, folder = "uploads") => {
  try {
    const fileRef = storageRef(storage, `${folder}/${file.name}`);
    await uploadBytes(fileRef, file);
    const downloadURL = await getDownloadURL(fileRef);
    console.log(`File uploaded successfully: ${downloadURL}`);
    return downloadURL;
  } catch (error) {
    console.error("Error uploading file:", error.message);
    throw error;
  }
};

// Fetch file download URL from Firebase Storage
export const fetchFileURL = async (path) => {
  try {
    const fileRef = storageRef(storage, path);
    const downloadURL = await getDownloadURL(fileRef);
    console.log(`File URL fetched: ${downloadURL}`);
    return downloadURL;
  } catch (error) {
    console.error("Error fetching file URL:", error.message);
    throw error;
  }
};

// Enable logging for Firebase
enableLogging(true);


// ---------------------------------------------
// END: firebase.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: index.js
// ---------------------------------------------

import React from "react";
import ReactDOM from "react-dom/client"; // Use createRoot API for React 18+
import { BrowserRouter } from "react-router-dom";
import "./index.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { AuthProvider } from "./components/Auth/AuthContext"; // Import AuthProvider

// Create root and render the application
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <AuthProvider>
      <BrowserRouter
        future={{
          v7_startTransition: true, // Opt into React startTransition behavior for state updates
          v7_relativeSplatPath: true, // Enable new relative route resolution within Splat routes
        }}
      >
        <App />
      </BrowserRouter>
    </AuthProvider>
  </React.StrictMode>
);

// Optional: Log performance metrics
reportWebVitals();


// ---------------------------------------------
// END: index.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: reportWebVitals.js
// ---------------------------------------------

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


// ---------------------------------------------
// END: reportWebVitals.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: setupTests.js
// ---------------------------------------------

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


// ---------------------------------------------
// END: setupTests.js
// ---------------------------------------------


// ---------------------------------------------
// BEGIN: utils\fetchData.js
// ---------------------------------------------

// src/utils/fetchData.js
import { ref, get } from "firebase/database";
import { db } from "../firebase";

export const fetchData = async () => {
  const dbRef = ref(db, "objects");

  try {
    // Fetch all records from the "objects" node
    const snapshot = await get(dbRef);
    if (snapshot.exists()) {
      return Object.values(snapshot.val()); // Convert the snapshot to an array of objects
    } else {
      return []; // Return an empty array if no data exists
    }
  } catch (error) {
    console.error("Error fetching data:", error);
    throw error;
  }
};


// ---------------------------------------------
// END: utils\fetchData.js
// ---------------------------------------------

// =============================================
// End of merged file
// =============================================
